<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'base/ArrayObject.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ArrayObjectTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataLoad()
    {
        return array(
            array(array(1,2,3,4), array(1,2,3,4)),
            array(
                array("a" => 1,"b" => 2,"c" => 3,"d" => 4),
                array("a" => 1,"b" => 2,"c" => 3,"d" => 4),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param int $preload The array to load
    * @param int $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataLoad()
    */
    public function testPreloadExpect($preload, $expect)
    {
        $array = ArrayObject::factory($preload);
        foreach ((array)$expect as $key => $value) {
            $this->assertSame($value, $array[$key], "Key '".$key."' wrong");
        }
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param int $preload The array to load
    * @param int $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataLoad()
    */
    public function testPreloadArray($preload, $expect)
    {
        $array = ArrayObject::factory($preload);
        $count = 0;
        foreach ($array as $key => $value) {
            $this->assertSame($expect[$key], $value, "Key '".$key."' wrong");
            $count++;
        }
        $this->assertSame(count($preload), $count, "Only iterated ".$count." times");
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param int $preload The array to load
    * @param int $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataLoad()
    */
    public function testLoadExpect($preload, $expect)
    {
        $array = ArrayObject::factory($preload);
        foreach ((array)$preload as $key => $value) {
            $array[$key] = $value;
        }
        foreach ((array)$expect as $key => $value) {
            $this->assertSame($value, $array[$key], "Key '".$key."' wrong");
        }
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param int $preload The array to load
    * @param int $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataLoad()
    */
    public function testLoadArray($preload, $expect)
    {
        $array = ArrayObject::factory();
        foreach ((array)$preload as $key => $value) {
            $array[$key] = $value;
        }
        $count = 0;
        foreach ($array as $key => $value) {
            $count++;
            $this->assertSame($expect[$key], $value, "Key '".$key."' wrong");
        }
        $this->assertSame(count($preload), $count, "Only iterated ".$count." times");
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataNoKeyLoad()
    {
        return array(
            array(array(1,2,3,4), array(1,2,3,4)),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param int $preload The array to load
    * @param int $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataNoKeyLoad()
    */
    public function testNoKeyLoad($preload, $expect)
    {
        $array = ArrayObject::factory();
        foreach ((array)$preload as $value) {
            $array[] = $value;
        }
        foreach ((array)$expect as $key => $value) {
            $this->assertSame($value, $array[$key], "Key '".$key."' wrong");
        }
    }

    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataIsset()
    {
        return array(
            array(array(1,2,3,4), 0, true),
            array(array(1,2,3,4), 5, false),
            array(
                array("a" => 1,"b" => 2,"c" => 3,"d" => 4), "a", true
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $preload The array to load
    * @param mixed $key     The key to check
    * @param bool  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataIsset()
    */
    public function testIsset($preload, $key, $expect)
    {
        $array = ArrayObject::factory($preload);
        $this->assertSame($expect, isset($array[$key]));
    }

    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataUnset()
    {
        return array(
            array(array(1,2,3,4), 0),
            array(array(1,2,3,4), 5),
            array(
                array("a" => 1,"b" => 2,"c" => 3,"d" => 4), "a",
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $preload The array to load
    * @param mixed $key     The key to check
    *
    * @return null
    *
    * @dataProvider dataIsset()
    */
    public function testUnset($preload, $key)
    {
        $array = ArrayObject::factory($preload);
        unset($array[$key]);
        $this->assertFalse(isset($array[$key]));
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataCount()
    {
        return array(
            array(array(1,2,3,4), 4),
            array(
                array("a" => 1,"b" => 2,"c" => 3,"d" => 4), 4,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $preload The array to load
    * @param mixed $expect  The expected count
    *
    * @return null
    *
    * @dataProvider dataCount()
    */
    public function testCount($preload, $expect)
    {
        $array = ArrayObject::factory($preload);
        $this->assertSame($expect, count($array));
    }

}
?>
