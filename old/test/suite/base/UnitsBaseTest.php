<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** This is a required class */
require_once CODE_BASE.'containers/ConfigContainer.php';
/** This is a required class */
require_once CODE_BASE.'base/UnitsBase.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 * @SuppressWarnings(PHPMD.ShortVariable)
 */
class UnitsBaseTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "plugins" => array(
                "dir" => realpath(
                    TEST_CONFIG_BASE."files/plugins/"
                ),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                    "to" => "&deg;C",
                    "from" => "&deg;C",
                    "type" => UnitsBase::TYPE_RAW,
                ),
                array(
                    "to" => "&deg;C",
                    "from" => "&deg;C",
                    "type" => UnitsBase::TYPE_RAW,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $data   The data to use
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($data, $expect)
    {
        $obj = new UnitsBaseTestClass($data);
        foreach ((array)$expect as $key => $value) {
            $this->assertAttributeSame($value, $key, $obj);
        }
    }

    /**
     * Data provider for testConvert
     *
     * @return array
     */
    public static function dataConvert()
    {
        return array(
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                18,
                "&#176;C",
                "&#176;C",
                18,
                true,
            ),
            array(
                array(
                    "to" => "&#176;C",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                18,
                "&#176;F",
                "&#176;C",
                18,
                false,
            ),
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                18,
                null,
                null,
                18,
                false,
            ),
            array(
                array(
                    "to" => "&#176;C",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                18,
                null,
                null,
                18,
                true,
            ),
        );
    }
    /**
    * test CtoF()
    *
    * @param array  $preload the stuff to preload into the Units
    * @param mixed  $data    The data to use
    * @param string $to      The units to convert to
    * @param string $from    The units to convert from
    * @param mixed  $expect  The value to expect
    * @param bool   $return  The expected return value
    *
    * @return null
    *
    * @dataProvider dataConvert
    */
    public function testConvert($preload, $data, $to, $from, $expect, $return)
    {
        $this->o = new UnitsBaseTestClass($preload);
        $ret = $this->o->convert($data, $to, $from);
        $this->assertSame($expect, $data, "The data is wrong");
        $this->assertSame($return, $ret, "Return Wrong");
    }
    /**
     * Data provider for testValid
     *
     * @return array
     */
    public static function dataValid()
    {
        return array(
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                "&#176;C",
                true,
            ),
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_DIFF,
                ),
                "&#176;F",
                true,
            ),
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                "&#176;Q",
                false,
            ),
        );
    }
    /**
    * test CtoF()
    *
    * @param array $preload The stuff to preload into the Units
    * @param mixed $units   The units to check
    * @param mixed $expect  The value to expect
    *
    * @return null
    *
    * @dataProvider dataValid
    */
    public function testValid($preload, $units, $expect)
    {
        $this->o = new UnitsBaseTestClass($preload);
        $this->assertSame($expect, $this->o->valid($units));
    }

    /**
     * Data provider for testValid
     *
     * @return array
     */
    public static function dataGetValid()
    {
        return array(
            array(
                array(),
                array(),
            ),
            array(
                array("&#176;F", "&#176;C"),
                array("&#176;F" => "&#176;F", "&#176;C" => "&#176;C"),
            ),
        );
    }
    /**
    * test CtoF()
    *
    * @param array $preload The stuff to preload into the Units
    * @param mixed $expect  The value to expect
    *
    * @return null
    *
    * @dataProvider dataGetValid
    */
    public function testGetValid($preload, $expect)
    {
        $this->o = new UnitsBaseTestClass(array());
        $this->o->setValid($preload);
        $this->assertSame($expect, $this->o->getValid());
    }
    /**
     * Data provider for testValid
     *
     * @return array
     */
    public static function dataNumeric()
    {
        return array(
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                "&#176;C",
                true,
            ),
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_DIFF,
                ),
                "&#176;F",
                true,
            ),
            array(
                array(
                    "to" => "&#176;F",
                    "from" => "&#176;C",
                    "type"  => UnitsBase::TYPE_RAW,
                ),
                "&#176;Q",
                false,
            ),
        );
    }
    /**
    * test CtoF()
    *
    * @param array $preload The stuff to preload into the Units
    * @param mixed $units   The units to check
    * @param mixed $expect  The value to expect
    *
    * @return null
    *
    * @dataProvider dataNumeric
    */
    public function testNumeric($preload, $units, $expect)
    {
        $this->o = new UnitsBaseTestClass($preload);
        $this->assertSame($expect, $this->o->numeric($units));
    }

}
/**
* Driver for the polling script (0039-26-01-P)
*
* @category   Libraries
* @package    HUGnetLibTest
* @subpackage SuiteBase
* @author     Scott Price <prices@hugllc.com>
* @copyright  2012 Hunt Utilities Group, LLC
* @copyright  2009 Scott Price
* @license    http://opensource.org/licenses/gpl-license.php GNU Public License
* @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
*/
class UnitsBaseTestClass extends UnitsBase
{
    /** @var The units that are valid for conversion */
    protected $valid = array("&#176;F", "&#176;C");

    /**
    * Checks to see if units are valid
    *
    * @param array $array The array to set it to
    *
    * @return null
    */
    public function setValid($array)
    {
        if (!is_null($array)) {
            $this->valid = (array)$array;
        }
    }


}
?>
