<?php
/**
 *   Tests the unit conversion class
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *   
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *   
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *   
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$    
 *
 */
// Call unitConversionTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "unitConversionTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../unitConversion.php';

/**
 * Test class for unitConversion.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-29 at 16:23:13.
 */
class unitConversionTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("unitConversionTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    public function testUnitArray() {
        $o = new unitConversion;
        foreach($o->units as $catName => $cat) {
            foreach($cat as $shortName => $unit) {
                // Long Name
                $this->assertTrue(is_string($unit['longName']), $catName.":".$shortName.": Long name is not a string");
                $this->assertThat(strlen($unit['longName']), $this->greaterThan(0), $catName.":".$shortName.": Long name is not a set");            
                // Var Type
                $this->assertTrue(is_string($unit['varType']), $catName.":".$shortName.": Variable type is not a string");
                $this->assertTrue($this->checkvarType($unit['varType']), $catName.":".$shortName.": Variable type '".$unit['varType']."'is not valid");
                // Mode (Mode is not required)
                if (isset($unit['mode'])) {
                    $this->assertTrue(is_string($unit['mode']), $catName.":".$shortName.": Mode is not a string");
                    $this->assertTrue($this->checkMode($unit['mode']), $catName.":".$shortName.": Mode '".$unit['varType']."'is not valid");
                }
                // Mode (Mode is not required)
                if (isset($unit['convert'])) {
                    $this->assertTrue(is_array($unit['convert']), $catName.":".$shortName.": convert is not an array");
                    foreach($unit['convert'] as $to => $function) {
                        $this->assertTrue(method_exists($o, $function), $catName.":".$shortName.": conversion function ".$function." doesn't exist");
                        $this->assertTrue($this->findUnits($catName, $to), $catName.":".$shortName.": Unit ".$to." doesn't exist");
                    }
                }
            }
        }
    }
    /**
     */
    public function findUnits($cat, $units) {
        $o = new unitConversion;
        if (is_null($cat)) {
            if (is_array($o->units)) {
                foreach($array as $catName => $cat) {
                    return isset($cat[$units]);
                }
            }
        } else {
            return is_array($o->units[$cat][$units]);
        }
        return FALSE;
    }
    /**
     */
    public function findUnitMode($cat, $unit, $mode) {
        $o = new unitConversion;
        if (is_null($cat)) {
            if (is_array($o->units)) {
                foreach($array as $catName => $cat) {
                    if (isset($cat[$unit])) {
                        return unitConversionTest::checkUnitModeRaw($cat[$unit]['mode'], $mode);
                    }
                }
            }
        } else {
            return unitConversionTest::checkUnitModeRaw($o->units[$cat][$unit]['mode'], $mode);
        }
        return FALSE;
    }
    /**
     */
    private function checkUnitModeRaw($modes, $mode) {
        if (is_null($modes)) {                        
            return TRUE;
        } else {
            if (stristr($modes, $mode) === FALSE) {
                return FALSE;
            } else {
                return TRUE;
            }
        }
    
    }

    /**
     */
    private function checkvarType($vartype) {
        if ($vartype == 'float') return TRUE;
        if ($vartype == 'int') return TRUE;
        if ($vartype == 'text') return TRUE;
        return FALSE;
    }
    /**
    */
    private function checkMode($mode) {
        if ($mode == 'raw') return TRUE;
        if ($mode == 'diff') return TRUE;
        return FALSE;
    }

    /**
     */
    public function testpreferredUnit() {
        $o = new unitConversion;
        $this->assertEquals("&#176;F", $o->preferredUnit("&#176;C"));
        $this->assertEquals("&#176;F", $o->preferredUnit("&#176;F"));
    }    
    
    /**
     */
    public function testgraphable() {
        $o = new unitConversion;
        $this->assertEquals(TRUE, $o->graphable("&#176;C"));
        $this->assertEquals(FALSE, $o->graphable("Direction"));
    }    
    /**
     */
    public function testfindUnit() {
        $o = new unitConversion;
        $this->assertEquals(TRUE, is_array($o->findUnit("&#176;C")));
        $this->assertEquals(FALSE, $o->findUnit("ASDF"));
    }

    /**
     */
    public function testgetDataType() {
        $o = new unitConversion;
        $this->assertEquals("asdf", $o->getDataType("&#176;C", "", "asdf"));
        $this->assertEquals("raw", $o->getDataType("Direction", "", "asdf"));
    }

    /**
     */
    public function testgetConvFunct() {
        $o = new unitConversion;
        $this->assertEquals("FtoC", $o->getConvFunct("&#176;F", "&#176;C", "diff"));
        $this->assertEquals(NULL, $o->getConvFunct("&#176;F", "Direction", "diff"));
    }

    /**
     */
    public function testgetPossConv() {
        $o = new unitConversion;
        $this->assertEquals(TRUE, is_array($o->getPossConv("diff")));
        $this->assertEquals(TRUE, is_array($o->getPossConv("diff", "&#176;F")));
        $this->assertEquals(array("asdf" => "asdf"), $o->getPossConv("diff", "asdf"));
    }

    /**
     */
    public function testCtoF() {
        $o = new unitConversion;
        $this->assertEquals(212, $o->CtoF(100, 0, "raw"));        
        $this->assertEquals(32, $o->CtoF(0, 0, "raw"));        
        $this->assertEquals(-40, $o->CtoF(-40, 0, "raw"));        
        $this->assertEquals(180, $o->CtoF(100, 0, "diff"));        
        $this->assertEquals(0, $o->CtoF(0, 0, "diff"));        
	}

    /**
     *  Converts from &#176; F to &#176; C.
     *
     *  If the temperature is differential we can't subtract 32 like we would
     *  for an absolute temperature.  This is because it is already factored
     *  out by the subtraction in the difference.
     *
     * @param float $f The temperature in F
     * @param int $time The time in seconds between this record and the last.
     * @param string $type The type of data (diff, raw, etc)
     * @return float The temperature in C
    */
	public function testFtoC() {
        $o = new unitConversion;
        $this->assertEquals(100, $o->FtoC(212, 0, "raw"));        
        $this->assertEquals(0, $o->FtoC(32, 0, "raw"));        
        $this->assertEquals(-40, $o->FtoC(-40, 0, "raw"));        
        $this->assertEquals(100, $o->FtoC(180, 0, "diff"));        
        $this->assertEquals(0, $o->FtoC(0, 0, "diff"));        
	}


    /**
    */
	public function testtoMilli() {
        $o = new unitConversion;
        $this->assertEquals(0, $o->toMilli(0, 0, 'raw'));
        $this->assertEquals(1000, $o->toMilli(1, 0, 'diff'));
	}
    /**
     *
    */
	public function testfromMilli() {
        $o = new unitConversion;
        $this->assertEquals(0, $o->fromMilli(0, 0, 'raw'));
        $this->assertEquals(1, $o->fromMilli(1000, 0, 'diff'));
	}

    /**
    */
	public function testfromCenti() {
        $o = new unitConversion;
        $this->assertEquals(0, $o->fromCenti(0, 0, 'raw'));
        $this->assertEquals(1, $o->fromCenti(100, 0, 'diff'));
	}

    /**
     */
    public function testCnttoRPM() {
        $o = new unitConversion;
        $this->assertEquals(NULL, $o->CnttoRPM(0, 0, 'raw', 0));
        $this->assertEquals(50, $o->CnttoRPM(50, 60, 'diff', 1));
        $this->assertEquals(50, $o->CnttoRPM(50, 60, 'diff', 0));
    }

    /**
     */
    public function testDirtonumDir() {
        $o = new unitConversion;
        $this->assertEquals(0, $o->DirtonumDir("N", 0, 0));
        $this->assertEquals(22.5, $o->DirtonumDir("NNE", 0, 0));
        $this->assertEquals(45, $o->DirtonumDir("NE", 0, 0));
        $this->assertEquals(67.5, $o->DirtonumDir("ENE", 0, 0));
        $this->assertEquals(90, $o->DirtonumDir("E", 0, 0));
        $this->assertEquals(112.5, $o->DirtonumDir("ESE", 0, 0));
        $this->assertEquals(135, $o->DirtonumDir("SE", 0, 0));
        $this->assertEquals(157.5, $o->DirtonumDir("SSE", 0, 0));
        $this->assertEquals(180, $o->DirtonumDir("S", 0, 0));
        $this->assertEquals(202.5, $o->DirtonumDir("SSW", 0, 0));
        $this->assertEquals(225, $o->DirtonumDir("SW", 0, 0));
        $this->assertEquals(247.5, $o->DirtonumDir("WSW", 0, 0));
        $this->assertEquals(270, $o->DirtonumDir("W", 0, 0));
        $this->assertEquals(292.5, $o->DirtonumDir("WNW", 0, 0));
        $this->assertEquals(315, $o->DirtonumDir("NW", 0, 0));
        $this->assertEquals(337.5, $o->DirtonumDir("NNW", 0, 0));
        $this->assertEquals(0, $o->DirtonumDir("ASDF", 0, 0));
    }

    /**
     */
    public function testnumDirtoDir() {
        $o = new unitConversion;
        $this->assertEquals("N", $o->numDirtoDir(0, 0, 0));
        $this->assertEquals("NNE", $o->numDirtoDir(22.5, 0, 0));
        $this->assertEquals("NE", $o->numDirtoDir(45, 0, 0));
        $this->assertEquals("ENE", $o->numDirtoDir(67.5, 0, 0));
        $this->assertEquals("E", $o->numDirtoDir(90, 0, 0));
        $this->assertEquals("ESE", $o->numDirtoDir(112.5, 0, 0));
        $this->assertEquals("SE", $o->numDirtoDir(135, 0, 0));
        $this->assertEquals("SSE", $o->numDirtoDir(157.5, 0, 0));
        $this->assertEquals("S", $o->numDirtoDir(180, 0, 0));
        $this->assertEquals("SSW", $o->numDirtoDir(202.5, 0, 0));
        $this->assertEquals("SW", $o->numDirtoDir(225, 0, 0));
        $this->assertEquals("WSW", $o->numDirtoDir(247.5, 0, 0));
        $this->assertEquals("W", $o->numDirtoDir(270, 0, 0));
        $this->assertEquals("WNW", $o->numDirtoDir(292.5, 0, 0));
        $this->assertEquals("NW", $o->numDirtoDir(315, 0, 0));
        $this->assertEquals("NNW", $o->numDirtoDir(337.5, 0, 0));
        $this->assertEquals("N", $o->numDirtoDir(360, 0, 0));
        $this->assertEquals("N", $o->numDirtoDir(-1, 0, 0));
    }
    
    /**
     */
    public function testkWhTokW () {
        $o = new unitConversion;
        $this->assertEquals(NULL, $o->kWhTokW(100, 0, 'diff', 0));
        $this->assertEquals(NULL, $o->kWhTokW(100, 0, 'raw', 0));
        $this->assertEquals(10, $o->kWhTokW(1, 360, 'diff', 0));
        $this->assertEquals(10, $o->kWhTokW(1, -360, 'diff', 0));
    }

    /**
     */
    public function testkWhToW () {
        $o = new unitConversion;
        $this->assertEquals(NULL, $o->kWhToW(100, 0, 'diff', 0));
        $this->assertEquals(NULL, $o->kWhToW(100, 0, 'raw', 0));
        $this->assertEquals(10000, $o->kWhToW(1, 360, 'diff', 0));
        $this->assertEquals(10000, $o->kWhToW(1, -360, 'diff', 0));
    }

}

// Call unitConversionTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "unitConversionTest::main") {
    unitConversionTest::main();
}
?>
