<?php
/**
 *   Tests the driver class
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$
 *
 */

// Call driverTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "driverTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../hugnet.inc.php';
require_once 'adodb/adodb.inc.php';

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 */
class driverTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("driverTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    public function &createDriver() {
        $db = &ADONewConnection('mysqli');
        $driver = new driver($db);
        return $driver;
    }
    /**
     * @todo Implement testHealth().
     */
    public function testHealth() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testDiagnose().
     */
    public function testDiagnose() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGet_ydhms().
     */
    public function testGet_ydhms() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     *
     */
    public function testRegisterDriver() {
        $o = new driver();
        $class = "testDriver";
        $o->registerDriver($class);
        $this->assertTrue(is_object($o->drivers[$class]), "Driver object is missing");
        $this->assertEquals(get_class($o->drivers[$class]), $class, "The wrong class got registered");    
        foreach($o->drivers[$class]->devices as $fw => $Firm) {
            foreach($Firm as $hw => $ver) {
                $dev = explode(",", $ver);
                foreach($dev as $d) {
                    $this->assertEquals($o->dev[$hw][$fw][$d], $class, "'$hw->$fw->$d': entry not found");
                }
            }
        }

    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionDefaultCall() {
        $Info = array();
        $o = new driver();
//        $o->drivers['eDEFAULT'] = $this->getMock("eDEFAULT", array("InterpConfig"), array(&$o));
        $o->registerDriver($this->getMock("eDEFAULT", array("InterpConfig"), array(&$o)), "eDEFAULT");
        $o->drivers['eDEFAULT']->expects($this->once())
                               ->method('InterpConfig')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "InterpConfig");
    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionBadDriverCall() {
        $Info = array("Driver" => "BadDriver");
        $o = new driver();
//        $o->drivers['eDEFAULT'] = $this->getMock("eDEFAULT", array("InterpConfig"), array(&$o));
        $o->registerDriver($this->getMock("eDEFAULT", array("InterpConfig"), array(&$o)), "eDEFAULT");
        $o->drivers['eDEFAULT']->expects($this->once())
                               ->method('InterpConfig')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "InterpConfig");
    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionGoodDriverCall() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("InterpConfig"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("InterpConfig"), array(&$o)), "testDriver");
        $o->drivers['testDriver']->expects($this->once())
                               ->method('InterpConfig')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "InterpConfig");
    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionMultiArgsCall() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $o->drivers['testDriver']->expects($this->once())
                               ->method('Test')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "Test", "1", "2");
    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionMissingFunctionCall() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $ret = $o->RunFunction($Info, "Test", "1", "2");
        $this->assertEquals(NULL, $ret);
    }

    public function testRunFunctionBadFunctionCall() {
        $Info = array("Driver" => "asdf");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $ret = $o->RunFunction($Info, "TestBad", "1", "2");
        $this->assertEquals(FALSE, $ret);
    }
    public function testRunFunctionGotError() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $ret = $o->RunFunction($Info, "getError", "1", "2");
        $this->assertEquals(FALSE, $ret);
    }

    /**
     * @todo Implement testReadConfig().
     */
    public function test__CallCall() {
        $Info = array('Driver' => 'testDriver');
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $o->drivers['testDriver']->expects($this->once())
                               ->method('Test')
                               ->with($this->arrayHasKey("Driver"), $this->equalTo("1"), $this->equalTo("2"));
        $ret = $o->Test($Info, "1", "2");
    }

    /**
     * @todo Implement testReadConfig().
     */
    public function test__Call() {
        $Info = array('Driver' => 'testDriver');
        $arg2 = "1";
        $arg3 = "2";
        $o = new driver();
//        $o->drivers['testDriver'] = new testDriver(&$o);
        $o->registerDriver("testDriver");
        $ret = $o->Test($Info, $arg2, $arg3);
        $this->assertEquals($ret['arg2'], $arg2, "Arg2 mangled: '".$ret['arg2']."' != '$arg2'");
        $this->assertEquals($ret['arg3'], $arg3, "Arg3 mangled: '".$ret['arg3']."' != '$arg3'");
    }

    /**
     * @todo Implement testReadConfig().
     */
    public function test__CallNoArgsCall() {
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
//        $o->drivers['eDEFAULT'] = $this->getMock("testDriver", array("TestCall"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("TestCall"), array(&$o)), "eDEFAULT");
        $o->drivers['eDEFAULT']->expects($this->once())
                               ->method('TestCall')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->TestCall();
    }


    /**
     * @todo Implement testSetConfig().
     */
    public function testSetConfig() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testDone().
     */
    public function testDone() {
        $Info = array("GatewayKey" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->packet = $this->getMock("EPacket");
        $o->packet->expects($this->once())
                  ->method('Close')
                  ->with($this->arrayHasKey("GatewayKey"));
        $o->done($Info);
    }

    /**
     * @todo Implement testUpdateDevice().
     */
    public function testUpdateDevice() {
        $Info = array("DeviceID" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->device = $this->getMock("device", array("UpdateDevice"), array(&$o));
        $o->device->expects($this->once())
                  ->method('UpdateDevice')
                  ->with($this->arrayHasKey("DeviceID"));
        $o->UpdateDevice($Info);
    }

    /**
     * @todo Implement testUnsolicitedConfigCheck().
     */
    public function testUnsolicitedConfigCheck() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetDevice().
     */
    public function testGetDevice() {
        $Info = array("DeviceID" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->device = $this->getMock("device", array("getDevice"), array(&$o));
        $o->device->expects($this->once())
                  ->method('getDevice')
                  ->with($this->arrayHasKey("DeviceID"));
        $o->getDevice($Info, "KEY");
    }

    /**
     * @todo Implement testPacketLog().
     */
    public function testPacketLog() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testFindDevice().
     */
    public function testFindDevice() {
        $Info = array("GatewayKey" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->packet = $this->getMock("EPacket");
        $o->packet->expects($this->once())
                  ->method('FindDevice')
                  ->with($this->arrayHasKey("GatewayKey"));
        $o->FindDevice($Info);
    }

    /**
     * @todo Implement testGetInfo().
     */
    public function testGetInfo() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testInterpConfig().
     */
    public function testInterpConfig() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetHistoryTable().
     */
    public function testGetHistoryTable() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
        $o->drivers['testDriver'] = new testDriver(&$o);
        $table = $o->drivers['testDriver']->history_table;
        $this->assertEquals($o->getHistoryTable($Info), $table);
    }

    /**
     * @todo Implement testGetHistoryTable().
     */
    public function testGetHistoryTableBad() {
        $Info = array("Driver" => "asdf");
        $o = new driver();
        $o->drivers['testDriver'] = new testDriver(&$o);
        $this->assertFalse($o->getHistoryTable($Info));
    }

    /**
     * @todo Implement testGetAverageTable().
     */
    public function testGetAverageTable() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
        $o->drivers['testDriver'] = new testDriver(&$o);
        $table = $o->drivers['testDriver']->average_table;
        $this->assertEquals($o->getAverageTable($Info), $table);
    }
    /**
     * @todo Implement testGetHistoryTable().
     */
    public function testGetAverageTableBad() {
        $Info = array("Driver" => "asdf");
        $o = new driver();
        $o->drivers['testDriver'] = new testDriver(&$o);
        $this->assertFalse($o->getAverageTable($Info));
    }

    /**
     * @todo Implement testGetLocationTable().
     */
    public function testGetLocationTable() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
        $o->drivers['testDriver'] = new testDriver(&$o);
        $table = $o->drivers['testDriver']->location_table;
        $this->assertEquals($o->getLocationTable($Info), $table);
    }
    /**
     * @todo Implement testGetHistoryTable().
     */
    public function testGetLocationTableBad() {
        $Info = array("Driver" => "asdf");
        $o = new driver();
        $this->assertFalse($o->getLocationTable($Info));
    }

    /**
     * @todo Implement testDriverInfo().
     */
    public function testDriverInfo() {
        $Info = array(
            "DeviceID" => "123456",
            "Driver" => "testDriver",
            );
        $o = new driver();
        $o->drivers['testDriver'] = new testDriver(&$o);
        $Info = $o->DriverInfo($Info);
        $history_table = $o->drivers['testDriver']->history_table;
        $this->assertEquals($Info['history_table'], $history_table, "history_table mangled: '".$Info['history_table']."' != '$history_table'");
        $average_table = $o->drivers['testDriver']->average_table;
        $this->assertEquals($Info['average_table'], $average_table, "average_table mangled: '".$Info['average_table']."' != '$average_table'");
    }

    /**
     * @todo Implement testFindDriver().
     */
    public function testFindDriver() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testModifyUnits().
     */
    public function testModifyUnits() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }
}

// Call driverTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "driverTest::main") {
    driverTest::main();
}
/**
 * This is a dummy endpoint driver to test the driver class with
 *
 * @see driver, eDEFAULT
 */
class testDriver extends eDEFAULT {

    /** history table */
    var $history_table = "testhistory";
    /** location table
     *  @deprecated This is now stored in the 'params' field in the devices table
     */
    var $location_table = "testlocation";
    /** Average Table */
    var $average_table = "testaverage";
    /** Raw history Table */
    var $raw_history_table = "testhistory_raw";
    var $devices = array(    
        "testFW" => array(
            "testHW1" => "DEFAULT",
            "testHW2" => "0.1.2,0.2.3",
        ),
        "DEFAULT" => array(
            "testHW3" => "DEFAULT",
        ),
    );        
    
    public function Test($arg1, $arg2, $arg3) {
        if (is_array($arg1)) {
            $arg1['arg2'] = $arg2;
            $arg1['arg3'] = $arg3;
        }
        return $arg1;
    }

    public function TestCall($arg1) {
        return $arg1;
    }
    
    public function InterpConfig($Info) {
        $Info["testVar"] = "InterpConfig";
        return $Info;
    }
    
    public function getError() {
        return array("Errno" => 1, "Error" => "Test Error");
    }
}
?>
