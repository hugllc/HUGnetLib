<?php
/**
 * Tests the driver class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2009 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
if (!defined("HUGNET_INCLUDE_PATH")) {
    define("HUGNET_INCLUDE_PATH", dirname(__FILE__)."/..");
}

require_once dirname(__FILE__).'/../hugnet.inc.php';
require_once HUGNET_INCLUDE_PATH."/driver.php";
require_once HUGNET_INCLUDE_PATH."/drivers/endpoints/eDEFAULT.php";
require_once dirname(__FILE__).'/unitConversionTest.php';
require_once dirname(__FILE__).'/drivers/socket/epsocketTest.php';
require_once dirname(__FILE__).'/EPacketTest.php';
require_once dirname(__FILE__).'/database/GatewayTest.php';
/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DriverTest extends PHPUnit_Framework_TestCase
{
    static $socket = 1;

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->o = &$this->createDriver();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * This crates the driver correctly for testing.  It mocks a number of classes
    * to make it easier to test.
    *
    * @param int $socket The socket to use
    *
    * @return object
    */
    public function &createDriver($socket = null)
    {
        if (!is_numeric($socket)) {
            $socket = self::$socket;
        }
        $config["file"]       = ":memory:";
        $config["servers"][0] = array(
            'host' => 'localhost',
            'user' => '',
            'pass' => '',
            'dsn' => "sqlite::memory:",
        );

        $driver = new HUGnetDriver($config);

        $driver->unit    = new unitConversionMock();
        $driver->gateway =& HUGnetDB::getInstance("GatewayMock", $config);

        $driver->packet->socket[$socket] = new epsocketMock();
        // The reply timeout can be short becuase we should get an instant reply.
        $driver->packet->ReplyTimeout = 1;
        $driver->sensors->registerSensor("TestSensor");
        return $driver;
    }

    /**
    * Sets up a packet to be returned if one is sent out
    *
    * @param array $preload The packets to set up
    *
    * @return null
    */
    protected function setUpPacket($preload)
    {
        if (is_array($preload)) {
            foreach ($preload as $data => $reply) {
                $this->o->packet->socket[self::$socket]->setReply($data, $reply);
            }
        }
    }

    /**
    * dataProvider for testRegisterSensor
    *
    * @return array
    */
    public static function dataRegisterDriver()
    {
        $classTest = new testDriver();
        return array(
            array("testDriver", true),
            array("testDriverBad", false),
            array("testDriverNoDrivers", false),
            array($classTest, true),
        );
    }
    /**
    * test registerDriver
    *
    * @param mixed $class  object or class name to register
    * @param bool  $expect The result to expect
    *
    * @return null
    *
    * @dataProvider dataRegisterDriver
    */
    public function testRegisterDriver($class, $expect)
    {
        $ret = $this->o->registerDriver($class);
        $this->assertSame($expect, $ret);
    }
    /**
    * dataProvider for testRegisterSensor
    *
    * @return array
    *
    */
    public static function dataRegisterDriverGood()
    {
        // These should all be good drivers.
        $classTest = new testDriver();
        return array(
            array("testDriver"),
            array($classTest),
        );
    }
    /**
    * test registerDriver
    *
    * @param mixed $class object or class name to register
    *
    * @return null
    *
    * @dataProvider dataRegisterDriverGood
    */
    public function testRegisterDriverObject($class)
    {
        $ret = $this->o->registerDriver($class);
        if (is_object($class)) {
            $this->assertSame($class, $this->o->drivers[get_class($class)]);
        } else {
            $this->assertThat(
                $this->o->drivers[$class],
                $this->isInstanceOf($class)
            );
        }
    }

    /**
    * test registerDriver
    *
    * @param mixed $class object or class name to register
    *
    * @return null
    *
    * @dataProvider dataRegisterDriverGood
    */
    public function testRegisterDriverDevArray($class)
    {
        $ret = $this->o->registerDriver($class);
        if (is_object($class)) {
            $class = get_class($class);
        }
        $this->assertType(
            "array",
            $this->o->drivers[$class]->devices,
            "Devices array missing"
        );
        foreach ($this->o->drivers[$class]->devices as $fw => $Firm) {
            foreach ($Firm as $hw => $ver) {
                $dev = explode(",", $ver);
                foreach ($dev as $d) {
                    $this->assertSame(
                        $this->o->dev[$hw][$fw][$d],
                        $class,
                        "'$hw->$fw->$d': entry not found"
                    );
                }
            }
        }
    }

    /**
    * data provider for testDriversRegistered
    *
    * @return array
    */
    public static function dataDriversRegistered()
    {
        return array(
            array("eDEFAULT"),
            array("e00391200"),
            array("e00391201"),
            array("e00392100"),
            array("e00392800"),
        );
    }

    /**
    * test registerDriver
    *
    * @param string $class class name to check
    *
    * @return null
    *
    * @dataProvider dataDriversRegistered
    */
    public function testDriversRegistered($class)
    {
        $this->assertThat($this->o->drivers[$class], $this->isInstanceOf($class));
    }


    /**
    * Test runFunction
    *
    * @return null
    *
    */
    public function testRunFunctionDefaultCall()
    {
        $Info = array();
        $this->o->registerDriver(
            $this->getMock("eDEFAULT", array("interpConfig"), array(&$this->o)),
            "eDEFAULT"
        );
        $this->o->drivers['eDEFAULT']->expects($this->once())
            ->method('interpConfig')
            ->with($this->arrayHasKey("Driver"));
        $ret = $this->o->RunFunction($Info, "interpConfig");
    }
    /**
    * Test runFunction
    *
    * @return null
    *
    */
    public function testRunFunctionBadDriverCall()
    {
        $Info = array("Driver" => "BadDriver");
        $this->o->registerDriver(
            $this->getMock("eDEFAULT", array("interpConfig"), array(&$this->o)),
            "eDEFAULT"
        );
        $this->o->drivers['eDEFAULT']->expects($this->once())
            ->method('interpConfig')
            ->with($this->arrayHasKey("Driver"));
        $ret = $this->o->RunFunction($Info, "interpConfig");
    }
    /**
    * Test runFunction
    *
    * @return null
    *
    */
    public function testRunFunctionGoodDriverCall()
    {
        $Info = array("Driver" => "testDriver");
        $this->o->registerDriver(
            $this->getMock("testDriver", array("interpConfig"), array(&$this->o)),
            "testDriver"
        );
        $this->o->drivers['testDriver']->expects($this->once())
            ->method('interpConfig')
            ->with($this->arrayHasKey("Driver"));
        $ret = $this->o->RunFunction($Info, "interpConfig");
    }
    /**
    * Test runFunction
    *
    * @return null
    *
    */
    public function testRunFunctionMultiArgsCall()
    {
        $Info = array("Driver" => "testDriver");
        $this->o->registerDriver(
            $this->getMock("testDriver", array("test"), array(&$this->o)),
            "testDriver"
        );
        $this->o->drivers['testDriver']->expects($this->once())
            ->method('test')
            ->with($this->arrayHasKey("Driver"));
        $ret = $this->o->RunFunction($Info, "test", "1", "2");
    }
    /**
    * Test runFunction
    *
    * @return null
    *
    */
    public function testRunFunctionMissingFunctionCall()
    {
        $Info = array("Driver" => "testDriver");
        $this->o->registerDriver(
            $this->getMock("testDriver", array("test"), array(&$this->o)),
            "testDriver"
        );
        $ret = $this->o->RunFunction($Info, "test", "1", "2");
        $this->assertEquals(null, $ret);
    }

    /**
    * Test runFunction
    *
    * @return null
    *
    */
    public function testRunFunctionBadFunctionCall()
    {
        $Info = array("Driver" => "asdf");
        $this->o->registerDriver(
            $this->getMock("testDriver", array("test"), array(&$this->o)),
            "testDriver"
        );
        $ret = $this->o->RunFunction($Info, "testBad", "1", "2");
        $this->assertEquals(false, $ret);
    }
    /**
    * Test runFunction
    *
    * @return null
    *
    */
    public function testRunFunctionGotError()
    {
        $Info = array("Driver" => "testDriver");
        $this->o->registerDriver(
            $this->getMock("testDriver", array("test"), array(&$this->o)),
            "testDriver"
        );
        $ret = $this->o->RunFunction($Info, "getError", "1", "2");
        $this->assertEquals(false, $ret);
    }

    /**
    * Test __call
    *
    * @return null
    *
    */
    public function testCallCall()
    {
        $Info = array('Driver' => 'testDriver');
        $this->o->registerDriver(
            $this->getMock("testDriver", array("Test"), array(&$this->o)),
            "testDriver"
        );
        $this->o->drivers['testDriver']->expects($this->once())
            ->method('test')
            ->with(
                $this->arrayHasKey("Driver"),
                $this->equalTo("1"),
                $this->equalTo("2")
            );
        $ret = $this->o->Test($Info, "1", "2");
    }

    /**
    * Test __call
    *
    * @return null
    *
    */
    public function testCall()
    {
        $Info = array('Driver' => 'testDriver');
        $arg2 = "1";
        $arg3 = "2";
        $this->o->registerDriver("testDriver");
        $ret = $this->o->Test($Info, $arg2, $arg3);
        $this->assertEquals(
            $ret['arg2'],
            $arg2,
            "Arg2 mangled: '".$ret['arg2']."' != '$arg2'"
        );
        $this->assertEquals(
            $ret['arg3'],
            $arg3,
            "Arg3 mangled: '".$ret['arg3']."' != '$arg3'"
        );
    }

    /**
    * Test __call
    *
    * @return null
    *
    */
    public function testCallNoArgsCall()
    {
        // This has to go to eDEFAULT since it has no args.
        $this->o->registerDriver(
            $this->getMock(
                "testDriver",
                array("testCall"),
                array(&$this->o)
            ),
            "eDEFAULT"
        );
        $this->o->drivers['eDEFAULT']->expects($this->once())
            ->method('testCall')
            ->with($this->arrayHasKey("Driver"));
        $ret = $this->o->TestCall();
    }


    /**
    * Test setConfig()
    *
    * @return null
    *
    */
    public function testSetConfig()
    {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete("This test has not been implemented yet.");
    }

    /**
    * test done()
    *
    * @return null
    *
    */
    public function testDone()
    {
        $Info = array("GatewayKey" => 1);
        // This has to go to eDEFAULT since it has no args.
        $this->o->packet = $this->getMock(
            "EPacket",
            array(),
            array("socketType" => "test")
        );
        $this->o->packet->expects($this->once())
            ->method('close')
            ->with($this->arrayHasKey("GatewayKey"));
        $this->o->done($Info);
    }

    /**
    * test UpdateDevice()
    *
    * @return null
    *
    */
    public function testUpdateDevice()
    {
        /*
        $Info = array("DeviceID" => 1);

        // This has to go to eDEFAULT since it has no args.
        $this->o->device = $this->getMock("device",
                                          array("updateDevice"),
                                          array(&$this->o));
        $this->o->device->expects($this->once())
                  ->method('updateDevice')
                  ->with($this->arrayHasKey("DeviceID"));
        $this->o->UpdateDevice($Info);
        */
    }

    /**
    * test unsolicitedConfigCheck
    *
    * @return null
    *
    */
    public function testUnsolicitedConfigCheck()
    {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete("This test has not been implemented yet.");
    }

    /**
    * test getDevice
    *
    * @return null
    *
    */
    public function testGetDevice()
    {
        $Info = array("DeviceID" => 1);
        /*
        // This has to go to eDEFAULT since it has no args.
        $this->o->device = $this->getMock(
            "device",
            array("getDevice"),
            array(&$this->o)
        );
        $this->o->device->expects($this->once())
                  ->method('getDevice')
                  ->with($this->arrayHasKey("DeviceID"));
        $this->o->getDevice($Info, "KEY");
        */
    }


    /**
    * Data provider for testInterpConfig()
    *
    * @return array
    */
    public static function datainterpConfig()
    {
        return array(
            array("Bad", false, 1),
            array(array(), array(), 2),
            array(
                array(
                    array(
                        "DeviceKey" => 1,
                        "sendCommand" => PACKET_COMMAND_GETSETUP,
                        "RawSetup" => "00000000E8ABCDEF01410123456743000005FFFFFF"
                            ."500102020202020202027070707070707070",
                        "Date" => "2007-11-12 12:34:04",
                        "From" => "0000E8",
                   ),
                    array(
                        "PacketFrom" => "wrongOne",
                        "RawData" => "12345678",
                        "sendCommand" => "55",
                        "Date" => "2007-11-13 12:34:04",
                   ),
                    array(
                        "From" => "wrongOne",
                        "RawData" => "12345678",
                        "sendCommand" => "56",
                        "Date" => "2007-11-14 12:34:04",
                   ),
                    array(
                        "DeviceID" => "wrongOne",
                        "RawData" => "12345678",
                        "sendCommand" => "57",
                        "Date" => "2007-11-15 12:34:04",
                   ),
                    array(
                        "DeviceID" => "0000E8",
                        "Data" => "12345678",
                        "sendCommand" => PACKET_COMMAND_GETCALIBRATION,
                        "Date" => "2007-11-16 12:34:04",
                   ),
               ),
                array(
                    "DeviceID" => "0000E8",
                    "DeviceKey" => 1,
                    "CurrentGatewayKey" => null,
                    "Date" => "2007-11-12 12:34:04",
                    "RawData" => Array(
                        "5C" => "00000000E8ABCDEF01410123456743000005FFFFFF"
                            ."500102020202020202027070707070707070",
                        "4C" => "12345678",
                   ),
                    "SerialNum" => 232,
                    "HWPartNum" => "ABCD-EF-01-A",
                    "FWPartNum" => "0123-45-67-C",
                    "FWVersion" => "0.0.5",
                    "DeviceGroup" => "FFFFFF",
                    "BoredomThreshold" => 80,
                    "RawSetup" => "00000000E8ABCDEF01410123456743000005FFFFFF"
                        ."500102020202020202027070707070707070",
                    "LastConfig" => "2007-11-12 12:34:04",
                    "DriverInfo" => "0102020202020202027070707070707070",
                    "RawCalibration" => "12345678",
                    "unitType" => array(),
                    "Labels" => array(),
                    "Units" => array(),
                    "dType" => array(),
                    "doTotal" => array(),
                    "TotalSensors" => 0,
                    "Driver" => "testDriver",
                    "HWName" => "Phantom Test Hardware",
               ),
                3,
           ),

        );
    }

    /**
    * tests interpConfig
    *
    * @param array $packets The test packets to interpret
    * @param array $expect  The return to expect
    *
    * @return null
    *
    * @dataProvider datainterpConfig().
    */
    public function testinterpConfig($packets, $expect)
    {

        $this->o->registerDriver("testDriver");
        $ret = $this->o->interpConfig($packets);
        $this->assertSame($expect, $ret);
    }



    /**
    * data provider for testGetLocationTable
    *
    * @return array
    */
    public static function dataDriverInfo()
    {
        // DeviceID and Driver must be present and not empty
        return array(
            array(
                array("DeviceID" => "123456", "Driver" => "testDriver"),
                "history_table",
                "testhistory"
            ),
            array(
                array("DeviceID" => "123456", "Driver" => "testDriver"),
                "average_table",
                "testaverage"
            ),
        );
    }
    /**
    * tests driverInfo()
    *
    * @param array  $Info   The devInfo array
    * @param string $field  The field to check
    * @param array  $expect The return to expect
    *
    * @return null
    *
    * @dataProvider dataDriverInfo().
    */
    public function testDriverInfo($Info, $field, $expect)
    {

        $infoSave = $Info;
        $this->o->registerDriver($Info["Driver"]);
        $Info = $this->o->DriverInfo($Info);
        $this->assertSame($expect, $Info[$field]);
        foreach (array("DeviceID", "Driver") as $f) {
            $this->assertSame($infoSave[$f], $Info[$f], "$f not the same");
        }
    }

    /**
    * data provider for testFindDriver
    *
    * @return array
    */
    public static function dataFindDriver()
    {
        return array(
            array(
                array(
                    "HWPartNum" => 1,
                    "FWPartNum" => 2,
                    "FWVersion" =>3
                ),
                "eDEFAULT",
                1
            ),
            array(
                array(
                    "HWPartNum" => "testHW2",
                    "FWPartNum" => "testFW",
                    "FWVersion" => "0.2.3"
                ),
                "testDriver",
                2
            ),
            array(
                array(
                    "HWPartNum" => "testHW1",
                    "FWPartNum" => "testFW",
                    "FWVersion" => "otherVersion"
                ),
                "testDriver",
                3
            ),
            array(
                array(
                    "HWPartNum" => "testHW3",
                    "FWPartNum" => "otherFW",
                    "FWVersion" => "otherVersion"
                ),
                "testDriver",
                4
            ),
            array(
                array(
                    "HWPartNum" => "testHW4",
                    "FWPartNum" => "testFW2",
                    "FWVersion" => "otherVersion"
                ),
                "eDEFAULT",
                5
            ),
        );
    }
    /**
    * tests findDriver()
    *
    * @param array  $Info   The devInfo array
    * @param string $expect The return to expect
    *
    * @return null
    *
    * @dataProvider dataFindDriver().
    */
    public function testFindDriver($Info, $expect)
    {

        $this->o->registerDriver("testDriver");
        $driver = $this->o->findDriver($Info);
        $this->assertSame($expect, $driver);
    }

    /**
    * Setup modifyUnits
    *
    * @return object
    *
    */
    public function &modifyUnitsSetup()
    {
        return $this->o;
    }

    /**
    * data provider for testModifyUnits
    *
    * @return array
    */
    public static function dataModifyUnits()
    {
        return array(
            array(
                array(
                    0 => array(
                        "Data0" => 1.0,
                        "Data1" => 2,
                        "Data2" => 3,
                        "Data3" => 4,
                        "Data4" => 6.5,
                        "data" => array(1.0,2,3,4,6.5),
                        "Date" => "2007-11-12 16:05:00"
                    ),
                    1 => array(
                        "Data0" => 3.0,
                        "Data1" => 2,
                        "Data2" => 4,
                        "Data3" => 6,
                        "Data4" => 6.5,
                        "data" => array(2.0,2,4,6,6.5),
                        "Date" => "2007-11-12 16:10:00"
                    ),
               ), // History
                array(
                    "ActiveSensors" => 5,
                    "dType" => array("raw","diff","diff","raw","diff"),
                    "Types" => array(0x100, 0x100, 0x100, 0x100,0x100),
                    "params"=> array(
                        "sensorType"=>array(
                            "TestSensor2",
                            "TestSensor1",
                            "TestSensor2",
                            "TestSensor2",
                            "TestSensor2"
                        )
                    ),
                    "Units" => array("E", "B", "E", "E", "E"),
               ), // DevInfo
                2, // dPlaces
                array("raw", "ignore", "diff", "diff", "raw"), // Type
                array("E", "B", "E", "D", "E"), // Units
                array(
                    1 => array(
                        "Data0" => 3.0,
                        "Data1" => 2,
                        "Data2" => 4.0,
                        "Data3" => -1.0,
                        "Data4" => 6.5,
                        "data" => array(3.0,2,4.0,-1.0, 6.5),
                        "Date" => "2007-11-12 16:10:00",
                        "deltaT" => 300
                    ),
               ), // expectHistory
                array(
                    "ActiveSensors" => 5,
                    "dType" => array("raw","ignore","diff","diff","diff"),
                    "Types" => array(0x100, 0x100, 0x100, 0x100,0x100),
                    "params"=> array(
                        "sensorType"=>array(
                            "TestSensor2", "TestSensor1", "TestSensor2",
                            "TestSensor2", "TestSensor2"
                        )
                    ),
                    "Units" => array("E", "B", "E", "D", "E"),
                    "modifyUnits" => 1,
               ), // expectDevInfo
                array("raw", "ignore", "diff", "diff", "diff"), // expectType
                array("E", "B", "E", "D","E"), // expectUnits
           ),
        );
    }
    /**
    * Test the history from modifyUnits
    *
    * @param array $history       The history to modify.
    * @param array $devInfo       The devInfo array to modify.
    * @param int   $dPlaces       The maximum number of decimal places to show.
    * @param array $type          The types to change to
    * @param array $units         The units to change to
    * @param array $expectHistory The history we expect after mofication
    * @param array $expectDevInfo The devInfo array we expect after mofication
    * @param array $expectType    The types we expect after mofication
    * @param array $expectUnits   The units we expect after mofication
    *
    * @return null
    *
    * @dataProvider dataModifyUnits().
    */
    public function testModifyUnitsHistory(
        $history,
        $devInfo,
        $dPlaces,
        $type,
        $units,
        $expectHistory,
        $expectDevInfo,
        $expectType,
        $expectUnits
    ) {
        $ret = $this->o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectHistory, $history);
    }
    /**
    * Test the history from modifyUnits
    *
    * @param array $history       The history to modify.
    * @param array $devInfo       The devInfo array to modify.
    * @param int   $dPlaces       The maximum number of decimal places to show.
    * @param array $type          The types to change to
    * @param array $units         The units to change to
    * @param array $expectHistory The history we expect after mofication
    * @param array $expectDevInfo The devInfo array we expect after mofication
    * @param array $expectType    The types we expect after mofication
    * @param array $expectUnits   The units we expect after mofication
    *
    * @return null
    *
    * @dataProvider dataModifyUnits().
    */
    public function testModifyUnitsDevInfo(
        $history,
        $devInfo,
        $dPlaces,
        $type,
        $units,
        $expectHistory,
        $expectDevInfo,
        $expectType,
        $expectUnits
    ) {
        $ret = $this->o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectDevInfo, $devInfo);
    }
    /**
    * Test the history from modifyUnits
    *
    * @param array $history       The history to modify.
    * @param array $devInfo       The devInfo array to modify.
    * @param int   $dPlaces       The maximum number of decimal places to show.
    * @param array $type          The types to change to
    * @param array $units         The units to change to
    * @param array $expectHistory The history we expect after mofication
    * @param array $expectDevInfo The devInfo array we expect after mofication
    * @param array $expectType    The types we expect after mofication
    * @param array $expectUnits   The units we expect after mofication
    *
    * @return null
    *
    * @dataProvider dataModifyUnits().
    */
    public function testModifyUnitsType(
        $history,
        $devInfo,
        $dPlaces,
        $type,
        $units,
        $expectHistory,
        $expectDevInfo,
        $expectType,
        $expectUnits
    ) {
        $ret = $this->o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectType, $type);
    }
    /**
    * Test the history from modifyUnits
    *
    * @param array $history       The history to modify.
    * @param array $devInfo       The devInfo array to modify.
    * @param int   $dPlaces       The maximum number of decimal places to show.
    * @param array $type          The types to change to
    * @param array $units         The units to change to
    * @param array $expectHistory The history we expect after mofication
    * @param array $expectDevInfo The devInfo array we expect after mofication
    * @param array $expectType    The types we expect after mofication
    * @param array $expectUnits   The units we expect after mofication
    *
    * @return null
    *
    * @dataProvider dataModifyUnits().
    */
    public function testModifyUnitsUnits(
        $history,
        $devInfo,
        $dPlaces,
        $type,
        $units,
        $expectHistory,
        $expectDevInfo,
        $expectType,
        $expectUnits
    ) {
        $ret = $this->o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectUnits, $units);
    }




}

/**
 * This is a dummy endpoint driver to test the driver class with
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 * @see        driver, eDEFAULT
 */
class TestDriver extends eDEFAULT
{

    /** history table */
    protected $history_table = "testhistory";
    /** location table
    *  @deprecated This is now stored in the 'params' field in the devices table
    */
    protected $location_table = "testlocation";
    /** Average Table */
    protected $average_table = "testaverage";
    /** Raw history Table */
    protected $raw_history_table = "testhistory_raw";
    /** @var rray shows the devices we can handle */
    var $devices = array(
        "testFW" => array(
            "testHW1" => "DEFAULT",
            "testHW2" => "0.1.2,0.2.3",
       ),
        "DEFAULT" => array(
            "testHW3" => "DEFAULT",
            "ABCD-EF-01-A" => "DEFAULT",
       ),
        "testFW2" => array(
            "testHW4" => "BAD",
       ),
    );
    /**
    * Some Function
    *
    * @param array $arg1 Must be an array
    * @param mixed $arg2 Added to $arg1 array
    * @param mixed $arg3 Added to $arg1 array
    *
    * @return null
    */
    public function test($arg1, $arg2, $arg3)
    {
        if (is_array($arg1)) {
            $arg1['arg2'] = $arg2;
            $arg1['arg3'] = $arg3;
        }
        return $arg1;
    }
    /**
    * Some Function
    *
    * @param mixed $arg1 Function simply returns this value
    *
    * @return mixed
    */
    public function testCall($arg1)
    {
        return $arg1;
    }
    /**
    * Some Function
    *
    * @param array &$Info Infomation about the device to use
    *
    * @return array
    */
    public function interpConfig(&$Info)
    {
        $Info['HWName'] = "Phantom Test Hardware";
        return $Info;
    }
    /**
    * Some Function
    *
    * @return array
    */
    public function getError()
    {
        return array("Errno" => 1, "Error" => "Test Error");
    }
    /**
    * Some Function
    *
    * @param object &$driver An object of class Driver.
    *
    * @return null
    */
    public function __construct(&$driver = false)
    {
        if (is_object($driver)) {
            parent::__construct($driver);
        }
    }
    /**
    * Some Function
    *
    * @return null
    */
    public function __toString()
    {
        return "object(".get_class($this).")";
    }
}
/**
 * This is a dummy endpoint driver to test the driver class with
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 * @see        driver, eDEFAULT
 */
class TestDriverNoDrivers extends eDEFAULT
{
    /**
    * Constructor
    *
    * @return null
    */
    public function __construct()
    {
        unset($this->devices);
    }
}

?>
