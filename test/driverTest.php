<?php
/**
 *   Tests the driver class
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$
 *
 */

// Call driverTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "driverTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../hugnet.inc.php';
require_once dirname(__FILE__).'/unitConversionTest.php';
require_once 'adodb/adodb.inc.php';

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 */
class driverTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("driverTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    public function &createDriver() {
        $db = &ADONewConnection('mysqli');
        $driver = new driver($db);
        return $driver;
    }
    /**
     * dataProvider for testRegisterSensor
     */
    public static function dataRegisterDriver() {
        $classTest = new testDriver();
        return array(
            array("testDriver", TRUE),
            array("testDriverBad", FALSE),
            array("testDriverNoDrivers", FALSE),
            array($classTest, TRUE),
        );
    }
    /**
     *
     * @dataProvider dataRegisterDriver
     * @covers driver::RegisterDriver
     */
    public function testRegisterDriver($class, $expect) {
        $o = new driver();
        $ret = $o->registerDriver($class);
        $this->assertSame($expect, $ret);
    }
    /**
     * dataProvider for testRegisterSensor
     */
    public static function dataRegisterDriverGood() {
        // These should all be good drivers.
        $classTest = new testDriver();
        return array(
            array("testDriver"),
            array($classTest),
        );
    }
    /**
     *
     * @dataProvider dataRegisterDriverGood
     * @covers driver::RegisterDriver
     */
    public function testRegisterDriverObject($class) {
        $o = new driver();
        $ret = $o->registerDriver($class);
        if (is_object($class)) {
            $this->assertSame($class, $o->drivers[get_class($class)]);
        } else {
            $this->assertThat($o->drivers[$class], $this->isInstanceOf($class));
        }
    }

    /**
     *
     * @dataProvider dataRegisterDriverGood
     * @covers driver::RegisterDriver
     */
    public function testRegisterDriverDevArray($class) {
        $o = new driver();
        $ret = $o->registerDriver($class);
        if (is_object($class)) $class = get_class($class);
        $this->assertType("array", $o->drivers[$class]->devices, "Devices array missing");
        foreach($o->drivers[$class]->devices as $fw => $Firm) {
            foreach($Firm as $hw => $ver) {
                $dev = explode(",", $ver);
                foreach($dev as $d) {
                    $this->assertSame($o->dev[$hw][$fw][$d], $class, "'$hw->$fw->$d': entry not found");
                }
            }
        }
    }

    /**
     * data provider for testDriversRegistered
     */
    public static function dataDriversRegistered() {
        return array(
            array("eDEFAULT"),
            array("e00391200"),
            array("e00391201"),
            array("e00392100"),
            array("e00392800"),
        );
    }
    
    /**
     * @dataProvider dataDriversRegistered
     */
    public function testDriversRegistered($class) {
        $o = new driver();
        $this->assertThat($o->drivers[$class], $this->isInstanceOf($class));
    }


    /**
     * @dataProvider dataRunFunction().
     * @covers driver::RunFunction
     */
    public function testRunFunctionDefaultCall() {
        $Info = array();
        $o = new driver();
//        $o->drivers['eDEFAULT'] = $this->getMock("eDEFAULT", array("InterpConfig"), array(&$o));
        $o->registerDriver($this->getMock("eDEFAULT", array("InterpConfig"), array(&$o)), "eDEFAULT");
        $o->drivers['eDEFAULT']->expects($this->once())
                               ->method('InterpConfig')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "InterpConfig");
    }
    /**
     * @dataProvider dataRunFunction().
     * @covers driver::RunFunction
     */
    public function testRunFunctionBadDriverCall() {
        $Info = array("Driver" => "BadDriver");
        $o = new driver();
//        $o->drivers['eDEFAULT'] = $this->getMock("eDEFAULT", array("InterpConfig"), array(&$o));
        $o->registerDriver($this->getMock("eDEFAULT", array("InterpConfig"), array(&$o)), "eDEFAULT");
        $o->drivers['eDEFAULT']->expects($this->once())
                               ->method('InterpConfig')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "InterpConfig");
    }
    /**
     * @dataProvider dataRunFunction().
     * @covers driver::RunFunction
     */
    public function testRunFunctionGoodDriverCall() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("InterpConfig"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("InterpConfig"), array(&$o)), "testDriver");
        $o->drivers['testDriver']->expects($this->once())
                               ->method('InterpConfig')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "InterpConfig");
    }
    /**
     * @dataProvider dataRunFunction().
     * @covers driver::RunFunction
     */
    public function testRunFunctionMultiArgsCall() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $o->drivers['testDriver']->expects($this->once())
                               ->method('Test')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->RunFunction($Info, "Test", "1", "2");
    }
    /**
     * @dataProvider dataRunFunction().
     * @covers driver::RunFunction
     */
    public function testRunFunctionMissingFunctionCall() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $ret = $o->RunFunction($Info, "Test", "1", "2");
        $this->assertEquals(NULL, $ret);
    }

    /**
     * @dataProvider dataRunFunction().
     * @covers driver::RunFunction
     */
    public function testRunFunctionBadFunctionCall() {
        $Info = array("Driver" => "asdf");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $ret = $o->RunFunction($Info, "TestBad", "1", "2");
        $this->assertEquals(FALSE, $ret);
    }
    /**
     * @dataProvider dataRunFunction().
     * @covers driver::RunFunction
     */
    public function testRunFunctionGotError() {
        $Info = array("Driver" => "testDriver");
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $ret = $o->RunFunction($Info, "getError", "1", "2");
        $this->assertEquals(FALSE, $ret);
    }

    /**
     * @dataProvider dataReadConfig().
     * @covers driver::__call
     */
    public function test__CallCall() {
        $Info = array('Driver' => 'testDriver');
        $o = new driver();
//        $o->drivers['testDriver'] = $this->getMock("testDriver", array("Test"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("Test"), array(&$o)), "testDriver");
        $o->drivers['testDriver']->expects($this->once())
                               ->method('Test')
                               ->with($this->arrayHasKey("Driver"), $this->equalTo("1"), $this->equalTo("2"));
        $ret = $o->Test($Info, "1", "2");
    }

    /**
     * @dataProvider dataReadConfig().
     * @covers driver::__call
     */
    public function test__Call() {
        $Info = array('Driver' => 'testDriver');
        $arg2 = "1";
        $arg3 = "2";
        $o = new driver();
//        $o->drivers['testDriver'] = new testDriver(&$o);
        $o->registerDriver("testDriver");
        $ret = $o->Test($Info, $arg2, $arg3);
        $this->assertEquals($ret['arg2'], $arg2, "Arg2 mangled: '".$ret['arg2']."' != '$arg2'");
        $this->assertEquals($ret['arg3'], $arg3, "Arg3 mangled: '".$ret['arg3']."' != '$arg3'");
    }

    /**
     * @dataProvider dataReadConfig().
     * @covers driver::__call
     */
    public function test__CallNoArgsCall() {
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
//        $o->drivers['eDEFAULT'] = $this->getMock("testDriver", array("TestCall"), array(&$o));
        $o->registerDriver($this->getMock("testDriver", array("TestCall"), array(&$o)), "eDEFAULT");
        $o->drivers['eDEFAULT']->expects($this->once())
                               ->method('TestCall')
                               ->with($this->arrayHasKey("Driver"));
        $ret = $o->TestCall();
    }


    /**
     * @dataProvider dataSetConfig().
     * @covers driver::SetConfig
     */
    public function testSetConfig() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @dataProvider dataDone().
     * @covers driver::Done
     */
    public function testDone() {
        $Info = array("GatewayKey" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->packet = $this->getMock("EPacket");
        $o->packet->expects($this->once())
                  ->method('Close')
                  ->with($this->arrayHasKey("GatewayKey"));
        $o->done($Info);
    }

    /**
     * @dataProvider dataUpdateDevice().
     * @covers driver::UpdateDevice
     */
    public function testUpdateDevice() {
        $Info = array("DeviceID" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->device = $this->getMock("device", array("UpdateDevice"), array(&$o));
        $o->device->expects($this->once())
                  ->method('UpdateDevice')
                  ->with($this->arrayHasKey("DeviceID"));
        $o->UpdateDevice($Info);
    }

    /**
     * @dataProvider dataUnsolicitedConfigCheck().
     * @covers driver::UnsolicitedConfigCheck
     */
    public function testUnsolicitedConfigCheck() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @dataProvider dataGetDevice().
     * @covers driver::GetDevice
     */
    public function testGetDevice() {
        $Info = array("DeviceID" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->device = $this->getMock("device", array("getDevice"), array(&$o));
        $o->device->expects($this->once())
                  ->method('getDevice')
                  ->with($this->arrayHasKey("DeviceID"));
        $o->getDevice($Info, "KEY");
    }

    /**
     * data provider for testFindDriver
     */
    public static function dataPacketLog() {
        return array(
            array(
                array("DeviceKey" => 1, "ReplyTime" => 2.54, "RawData" => "1234", "Time" => 1194898871, "From" => "000020", "Command" => "01", "sendCommand" => "5C"),
                array("GatewayKey" => 5),
                "POWERUP",
                array("DeviceKey" => 1, "ReplyTime" => 2.54, "GatewayKey" => 5, "RawData" => "1234", "Date" => "2007-11-12 14:21:11", "PacketFrom" => "000020", "Command" => "01", "sendCommand" => "5C", "Type" => "POWERUP"),
            ),
            array(
                array("DeviceKey" => 1, "RawData" => "1234", "Time" => 1194898871, "From" => "000020", "Command" => "01", "sendCommand" => "55"),
                array("GatewayKey" => 5),
                NULL,
                array("DeviceKey" => 1, "ReplyTime" => 0, "GatewayKey" => 5, "RawData" => "1234", "Date" => "2007-11-12 14:21:11", "PacketFrom" => "000020", "Command" => "01", "sendCommand" => "55", "Type" => "UNSOLICITED"),
            ),
            array(
                array("DeviceKey" => 1, "RawData" => "1234", "Time" => 1194898871, "From" => "000020", "Command" => "01"),
                array("GatewayKey" => 5),
                FALSE,
                array("DeviceKey" => 1, "ReplyTime" => 0, "GatewayKey" => 5, "RawData" => "1234", "Date" => "2007-11-12 14:21:11", "PacketFrom" => "000020", "Command" => '01', "sendCommand" => "  ", "Type" => "UNSOLICITED"),
            ),
        );
    }
    /**
     * @dataProvider dataPacketLog().
     * @covers driver::PacketLog
     */
    public function testPacketLog($Packet, $Gateway, $type, $expect) {
        $o = new driver();
        $o->registerDriver("testDriver");
        if (is_null($type)) {
            $pkt = $o->PacketLog($Packet, $Gateway);
        } else {
            $pkt = $o->PacketLog($Packet, $Gateway, $type);
        }
        $this->assertSame($expect, $pkt);
    }

    /**
     * @dataProvider dataFindDevice().
     * @covers driver::FindDevice
     */
    public function testFindDevice() {
        $Info = array("GatewayKey" => 1);
        $o = new driver();
        // This has to go to eDEFAULT since it has no args.
        $o->packet = $this->getMock("EPacket");
        $o->packet->expects($this->once())
                  ->method('FindDevice')
                  ->with($this->arrayHasKey("GatewayKey"));
        $o->FindDevice($Info);
    }

    /**
     * @dataProvider dataGetInfo().
     * @covers driver::GetInfo
     */
    public function testGetInfo() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    public static function dataInterpConfig() {
        return array(
            array("Bad", FALSE),
            array(array(), array()),
            array(
                array(
                    array(
                        "DeviceKey" => 1,
                        "sendCommand" => PACKET_COMMAND_GETSETUP,
                        "RawSetup" => "00000000E8ABCDEF01410123456743000005FFFFFF500102020202020202027070707070707070",
                        "Date" => "2007-11-12 12:34:04",
                    ),
                    array(
                        "PacketFrom" => "wrongOne",
                        "RawData" => "12345678",
                        "sendCommand" => "55",
                        "Date" => "2007-11-13 12:34:04",
                    ),
                    array(
                        "From" => "wrongOne",
                        "RawData" => "12345678",
                        "sendCommand" => "56",
                        "Date" => "2007-11-14 12:34:04",
                    ),
                    array(
                        "DeviceID" => "wrongOne",
                        "RawData" => "12345678",
                        "sendCommand" => "57",
                        "Date" => "2007-11-15 12:34:04",
                    ),
                    array(
                        "DeviceID" => "0000E8",
                        "Data" => "12345678",
                        "sendCommand" => PACKET_COMMAND_GETCALIBRATION,
                        "Date" => "2007-11-16 12:34:04",
                    ),
                ),
                array(
                    "LastConfig" => "2007-11-16 12:34:04",
                    "DeviceKey" => 1,
                    "CurrentGatewayKey" => NULL,
                    "SerialNum" => 232,
                    "DeviceID" => "0000E8",
                    "HWPartNum" => "ABCD-EF-01-A",
                    "FWPartNum" => "0123-45-67-C",
                    "FWVersion" => "00.00.05",
                    "DeviceGroup" => "FFFFFF",
                    "BoredomThreshold" => 80,
                    "RawSetup" => "00000000E8ABCDEF01410123456743000005FFFFFF500102020202020202027070707070707070",
                    "Driver" => "testDriver",
                    "RawData" => Array(
                        "5C" => "00000000E8ABCDEF01410123456743000005FFFFFF500102020202020202027070707070707070",
                        "4C" => "12345678",
                    ),
                    "RawCalibration" => "12345678",
                    "HWName" => "Phantom Test Hardware",
                ),
            ),      

        );
    }

    /**
     * @dataProvider dataInterpConfig().
     * @covers driver::InterpConfig
     */
    public function testInterpConfig($packets, $expect) {
        $o = new driver();
        $o->registerDriver("testDriver");
        $ret = $o->InterpConfig ($packets);
        $this->assertSame($expect, $ret);
    }

    /**
     * data provider for testGetHistoryTable
     */
    public static function dataGetHistoryTable() {
        return array(
            array("testDriver", "testhistory"),
            array("asdf", FALSE),
        );
    }
    /**
     * @dataProvider dataGetHistoryTable().
     * @covers driver::GetHistoryTable
     */
    public function testGetHistoryTable($driver, $table) {
        $Info = array("Driver" => $driver);
        $o = new driver();
        $o->registerDriver($driver);
        $this->assertSame($table, $o->getHistoryTable($Info));
    }

    /**
     * data provider for testGetHistoryTable
     */
    public static function dataGetAverageTable() {
        return array(
            array("testDriver", "testaverage"),
            array("asdf", FALSE),
        );
    }
    /**
     * @dataProvider dataGetAverageTable().
     */
    public function testGetAverageTable($driver, $table) {
        $Info = array("Driver" => $driver);
        $o = new driver();
        $o->registerDriver($driver);
        $this->assertSame($table, $o->getAverageTable($Info));
    }

    /**
     * data provider for testGetLocationTable
     */
    public static function dataGetLocationTable() {
        return array(
            array("testDriver", "testlocation"),
            array("asdf", FALSE),
        );
    }
    /**
     * @dataProvider dataGetLocationTable().
     */
    public function testGetLocationTable($driver, $table) {
        $Info = array("Driver" => $driver);
        $o = new driver();
        $o->registerDriver($driver);
        $this->assertSame($table, $o->getLocationTable($Info));
    }

    
    /**
     * data provider for testGetLocationTable
     */
    public static function dataDriverInfo() {
        return array(
            array(array("DeviceID" => "123456", "Driver" => "testDriver"), "history_table", "testhistory"),
            array(array("DeviceID" => "123456", "Driver" => "testDriver"), "average_table", "testaverage"),
        );
    }
    /**
     * @dataProvider dataDriverInfo().
     * @covers driver::DriverInfo
     */
    public function testDriverInfo($Info, $field, $expect) {
        $o = new driver();
        $o->registerDriver($Info["Driver"]);
        $Info = $o->DriverInfo($Info);
        $this->assertSame($expect, $Info[$field]);
    }

    /**
     * data provider for testFindDriver
     */
    public static function dataFindDriver() {
        return array(
            array(array("HWPartNum" => 1, "FWPartNum" => 2, "FWVersion" =>3), "eDEFAULT", 1),
            array(array("HWPartNum" => "testHW2", "FWPartNum" => "testFW", "FWVersion" => "0.2.3"), "testDriver", 2),
            array(array("HWPartNum" => "testHW1", "FWPartNum" => "testFW", "FWVersion" => "otherVersion"), "testDriver", 3),
            array(array("HWPartNum" => "testHW3", "FWPartNum" => "otherFW", "FWVersion" => "otherVersion"), "testDriver", 4),
            array(array("HWPartNum" => "testHW4", "FWPartNum" => "testFW2", "FWVersion" => "otherVersion"), "eDEFAULT", 5),
        );
    }
    /**
     * @dataProvider dataFindDriver().
     * @covers driver::FindDriver
     */
    public function testFindDriver($Info, $expect) {
        $o = new driver();
        $o->registerDriver("testDriver");
        $driver = $o->findDriver($Info);
        $this->assertSame($expect, $driver);
    }

    public function &modifyUnitsSetup() {
        $o = new driver();
        $o->sensors->registerSensor("testSensor");
        $o->unit = new unitConversionMock();
        return $o;
    }

    /**
     * data provider for testModifyUnits
     */
    public static function dataModifyUnits() {
        return array(
            array(
                array(
                    0 => array("Data0" => 1.0, "Data1" => 2, "Data2" => 3, "Data3" => 4, "Data4" => 6.5, "data" => array(1.0,2,3,4,6.5), "Date" => "2007-11-12 16:05:00"),
                    1 => array("Data0" => 3.0, "Data1" => 2, "Data2" => 4, "Data3" => 6, "Data4" => 6.5, "data" => array(2.0,2,4,6,6.5), "Date" => "2007-11-12 16:10:00"),
                ), // History
                array(
                    "ActiveSensors" => 5, 
                    "dType" => array("raw","diff","diff","raw","diff"), 
                    "Types" => array(0x100, 0x100, 0x100, 0x100,0x100), 
                    "params"=> array("sensorType"=>array("testSensor2", "testSensor1", "testSensor2", "testSensor2", "testSensor2")),
                    "Units" => array("E", "B", "E", "E", "E"),
                ), // DevInfo
                2, // dPlaces
                array("raw", "ignore", "diff", "diff", "raw"), // Type
                array("E", "B", "E", "D", "E"), // Units
                array(
                    1 => array("Data0" => NULL,"Data2" => 4.0, "Data3" => -1.0, "Data4" => 6.5, "data" => array(NULL,NULL,4.0,-1.0, 6.5), "Date" => "2007-11-12 16:10:00", "deltaT" => 300),
                ), // expectHistory
                array(
                    "ActiveSensors" => 5, 
                    "dType" => array("raw","diff","diff","raw","diff"), 
                    "Types" => array(0x100, 0x100, 0x100, 0x100,0x100), 
                    "params"=> array("sensorType"=>array("testSensor2", "testSensor1", "testSensor2", "testSensor2", "testSensor2")),
                    "Units" => array("E", "B", "E", "D", "E"),
                ), // expectDevInfo
                array("raw", "ignore", "diff", "diff", "diff"), // expectType
                array("E", "B", "E", "D","E"), // expectUnits
            ),
        );
    }
    /**
     * @dataProvider dataModifyUnits().
     * @covers driver::ModifyUnits
     */
    public function testModifyUnitsHistory($history, $devInfo, $dPlaces, $type, $units, $expectHistory, $expectDevInfo, $expectType, $expectUnits) {
        $o = $this->modifyUnitsSetup();
        $ret = $o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectHistory, $history);
    }
    /**
     * @dataProvider dataModifyUnits().
     * @covers driver::ModifyUnits
     */
    public function testModifyUnitsDevInfo($history, $devInfo, $dPlaces, $type, $units, $expectHistory, $expectDevInfo, $expectType, $expectUnits) {
        $o = $this->modifyUnitsSetup();
        $ret = $o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectDevInfo, $devInfo);
    }
    /**
     * @dataProvider dataModifyUnits().
     * @covers driver::ModifyUnits
     */
    public function testModifyUnitsType($history, $devInfo, $dPlaces, $type, $units, $expectHistory, $expectDevInfo, $expectType, $expectUnits) {
        $o = $this->modifyUnitsSetup();
        $ret = $o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectType, $type);
    }
    /**
     * @dataProvider dataModifyUnits().
     * @covers driver::ModifyUnits
     */
    public function testModifyUnitsUnits($history, $devInfo, $dPlaces, $type, $units, $expectHistory, $expectDevInfo, $expectType, $expectUnits) {
        $o = $this->modifyUnitsSetup();
        $ret = $o->modifyUnits($history, $devInfo, $dPlaces, $type, $units);
        $this->assertSame($expectUnits, $units);
    }

}

// Call driverTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "driverTest::main") {
    driverTest::main();
}
/**
 * This is a dummy endpoint driver to test the driver class with
 *
 * @see driver, eDEFAULT
 */
class testDriver extends eDEFAULT {

    /** history table */
    var $history_table = "testhistory";
    /** location table
     *  @deprecated This is now stored in the 'params' field in the devices table
     */
    var $location_table = "testlocation";
    /** Average Table */
    var $average_table = "testaverage";
    /** Raw history Table */
    var $raw_history_table = "testhistory_raw";
    var $devices = array(    
        "testFW" => array(
            "testHW1" => "DEFAULT",
            "testHW2" => "0.1.2,0.2.3",
        ),
        "DEFAULT" => array(
            "testHW3" => "DEFAULT",
            "ABCD-EF-01-A" => "DEFAULT",
        ),
        "testFW2" => array(
            "testHW4" => "BAD",
        ),
    );        
    
    public function Test($arg1, $arg2, $arg3) {
        if (is_array($arg1)) {
            $arg1['arg2'] = $arg2;
            $arg1['arg3'] = $arg3;
        }
        return $arg1;
    }

    public function TestCall($arg1) {
        return $arg1;
    }
    
    public function InterpConfig(&$Info) {
        $Info['HWName'] = "Phantom Test Hardware";
        return $Info;
    }
    
    public function getError() {
        return array("Errno" => 1, "Error" => "Test Error");
    }
    
    public function __construct(&$driver = FALSE) {
        if (is_object($driver)) {
            parent::eDEFAULT($driver);
        }
    }
    
    public function __toString() {
        return "object(".get_class($this).")";
    }
}
/**
 * This is a dummy endpoint driver to test the driver class with
 *
 * @see driver, eDEFAULT
 */
class testDriverNoDrivers extends eDEFAULT {
    public function __construct() {
        unset($this->devices);
    }
}

?>
