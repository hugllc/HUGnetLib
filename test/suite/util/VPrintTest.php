<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'util/VPrint.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class VPrintTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        parent::tearDown();
    }
    /**
    * Data provider for testThrowException
    *
    * @return array
    */
    public static function dataPrint()
    {
        return array(
            array(
                array("verbose" => 1),
                array("This string should not print"),
                array(2),
                "",
                "",
            ),
            array(
                array("verbose" => 3),
                array("This string should print"),
                array(2),
                "This string should print".PHP_EOL,
                "",
            ),
            array(
                array("verbose" => 3, "html" => true),
                array("This string should print"),
                array(2),
                "This string should print<br />".PHP_EOL,
                "",
            ),
            array(
                array("verbose" => 3, "html" => true, "debug" => true),
                array("String1", "String2", "String3"),
                array(2, 5, 2),
                "",
                "String1<br />".PHP_EOL."String3<br />".PHP_EOL,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config  The configuration to use
    * @param array  $string  The string to print
    * @param array  $verbose The verbosity level to use
    * @param string $expect  The output we expect
    * @param string $debug   The output we expect from debug
    *
    * @return null
    *
    * @dataProvider dataPrint
    */
    public function testPrint($config, $string, $verbose, $expect, $debug)
    {
        VPrint::config($config);
        ob_start();
        ob_clean();
        foreach ($string as $key => $str) {
            VPrint::out($str, $verbose[$key]);
        }
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertSame($expect, $ret);
        ob_start();
        VPrint::debug();
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertSame($debug, $ret);
    }



}
?>
