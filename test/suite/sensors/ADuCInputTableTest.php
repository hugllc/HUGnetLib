<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\sensors;
/** This is a required class */
require_once CODE_BASE.'sensors/ADuCInputTable.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ADuCInputTableTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        parent::tearDown();
    }

    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataParams()
    {
        return array(
            array(
                array(
                ),
                null,
                "driver0",
                null,
                "FF",
            ),
            array(
                array(
                ),
                null,
                "driver1",
                null,
                "FF",
            ),
            array(
                array(
                ),
                null,
                "driver0",
                "04",
                "04",
            ),
            array(
                array(
                ),
                null,
                "driver0",
                0x04,
                "04",
            ),
            array(
                array(
                ),
                null,
                "priority",
                5,
                "05",
            ),
            array(
                array(
                ),
                null,
                "priority",
                0x105,
                "05",
            ),
            array(
                array(
                ),
                null,
                "immediateProcessRoutine",
                4,
                "04",
            ),
            array(
                array(
                ),
                null,
                "immediateProcessRoutine",
                0xFE,
                "00",
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mock    The mocks to preload
    * @param string $preload The string to give to the class
    * @param string $param   The driver number
    * @param string $set     The values to set the register to
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataParams
    */
    public function testParams($mock, $preload, $param, $set, $expect)
    {
        $sensor = new \HUGnet\DummyTable("Sensor");
        $sensor->resetMock($mock);
        $obj = ADuCInputTable::factory($sensor, $preload);
        $ret = $obj->$param($set);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataRegister()
    {
        return array(
            array(
                array(
                ),
                null,
                "ADCFLT",
                null,
                "8009",
            ),
            array(
                array(
                ),
                null,
                "ADC0CON",
                null,
                "80C0",
            ),
            array(
                array(
                ),
                null,
                "ADC1CON",
                null,
                "8600",
            ),
            array(
                array(
                ),
                null,
                "ADCFLT",
                "1234",
                "1234",
            ),
            array(
                array(
                ),
                null,
                "ADC0CON",
                "1234",
                "1234",
            ),
            array(
                array(
                ),
                null,
                "ADC1CON",
                "1234",
                "1234",
            ),
            array(
                array(
                ),
                null,
                "ADC1CON",
                0x1234,
                "1234",
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mock    The mocks to preload
    * @param string $preload The string to give to the class
    * @param string $reg     The register to get
    * @param string $set     The values to set the register to
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataRegister
    */
    public function testRegister($mock, $preload, $reg, $set, $expect)
    {
        $sensor = new \HUGnet\DummyTable("Sensor");
        $sensor->resetMock($mock);
        $obj = ADuCInputTable::factory($sensor, $preload);
        $ret = $obj->register($reg, $set);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataFreq()
    {
        return array(
            array(
                array(
                ),
                array(
                ),
                266.2507,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mock    The mocks to preload
    * @param string $preload The string to give to the class
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataFreq
    */
    public function testFreq($mock, $preload, $expect)
    {
        $sensor = new \HUGnet\DummyTable("Sensor");
        $sensor->resetMock($mock);
        $obj = ADuCInputTable::factory($sensor, $preload);
        $ret = $obj->freq();
        $this->assertEquals($expect, $ret, 0.0001);
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataEncode()
    {
        return array(
            array(
                array(
                ),
                null,
                "FF0080C086008009FFFF",
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mock    The mocks to preload
    * @param string $preload The string to give to the class
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataEncode
    */
    public function testEncode($mock, $preload, $expect)
    {
        $sensor = new \HUGnet\DummyTable("Sensor");
        $sensor->resetMock($mock);
        $obj = ADuCInputTable::factory($sensor, $preload);
        $ret = $obj->encode();
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataDecode()
    {
        return array(
            array(
                array(
                ),
                null,
                "FF0080C086008009FFFF",
                true,
            ),
            array(
                array(
                ),
                null,
                "",
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mock    The mocks to preload
    * @param string $preload The string to give to the class
    * @param string $string  The string to give to decode
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataDecode
    */
    public function testDecode($mock, $preload, $string, $expect)
    {
        $sensor = new \HUGnet\DummyTable("Sensor");
        $sensor->resetMock($mock);
        $obj = ADuCInputTable::factory($sensor, $preload);
        $ret = $obj->decode($string);
        $this->assertSame($expect, $ret);
    }

}
?>
