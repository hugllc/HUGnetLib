<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuitePlugins
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** Get our classes */
require_once CODE_BASE.'plugins/historyTable/ETESTHistoryTable.php';
/** This is a required class */
require_once TEST_BASE.'plugins/historyTable/HistoryTablePluginTestBase.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyBase.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuitePlugins
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ETESTHistoryTableTest extends HistoryTablePluginTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->socket = &$this->config->sockets->getSocket("default");
        $this->o = new ETESTHistoryTable(
            array(
            )
        );
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * Data provider for testRegisterPlugin
    *
    * @return array
    */
    public static function dataRegisterPlugin()
    {
        return array(
            array("ETESTHistoryTable"),
        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @return null
    */
    public function testSqlTable()
    {
        $this->assertSame("eTEST_history", $this->o->sqlTable);
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @return null
    */
    public function testDatacols()
    {
        $this->assertSame(20, $this->o->datacols);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromDataArray()
    {
        return array(
            array(
                array(
                    "0000AC" => array(
                        "get" => array(
                            "Data0" => 0,
                            "Data1" => 1,
                            "Data2" => 2,
                            "Data3" => 3,
                            "Data4" => 4,
                            "Data5" => 5,
                        ),
                    ),
                    "123456" => array(
                        "get" => array(
                            "Data0" => 10,
                            "Data1" => 11,
                            "Data2" => 12,
                            "Data3" => 13,
                            "Data4" => 14,
                            "Data5" => 15,
                        ),
                    ),
                ),
                array(
                    "Date" => 123456789,
                    "id" => 5,
                    "TestID" => 5,
                    "0000AC" => new \HUGnet\DummyBase("0000AC"),
                    "123456" => new \HUGnet\DummyBase("123456"),
                    0 => array(
                        array(
                            "name" => "Date", "device" => "0", "field" => "Date"
                        ),
                        array(
                            "name" => "Sensor 0",
                            "device" => "AC",
                            "field" => "0"
                        ),
                        array(
                            "name" => "Sensor 1",
                            "device" => "AC",
                            "field" => "1"
                        ),
                        array(
                            "name" => "Sensor 2",
                            "device" => "AC",
                            "field" => "3"
                        ),
                        array(
                            "name" => "Sensor 3",
                            "device" => "123456",
                            "field" => 2
                        ),
                        array(
                            "name" => "Sensor 4",
                            "device" => "AC",
                            "field" => "5"
                        ),
                        array(
                            "name" => "Sensor 5",
                            "device" => "123456",
                            "field" => 1
                        ),
                        array(
                            "name" => "Date", "device" => "0", "field" => "Date"
                        ),
                    ),
                ),
                array(
                    "group" => "default",
                    "converted" => false,
                    "id"  => 5,
                    "Date"   => 123456789,
                    "TestID" => 5,
                    "deltaT"  => 0,
                    "raw" => array(),
                    "Data0"  => null,
                    "Data1"  => 0,
                    "Data2"  => 1,
                    "Data3"  => 3,
                    "Data4"  => 12,
                    "Data5"  => 5,
                    "Data6"  => 11,
                    "Data7"  => null,
                    "Data8"  => null,
                    "Data9"  => null,
                    "Data10"  => null,
                    "Data11"  => null,
                    "Data12"  => null,
                    "Data13"  => null,
                    "Data14"  => null,
                    "Data15"  => null,
                    "Data16"  => null,
                    "Data17"  => null,
                    "Data18"  => null,
                    "Data19"  => null,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromDataArray
    */
    public function testFromDataArray($mocks, $preload, $expect)
    {
        $this->o->device = new \HUGnet\DummyBase("Device");
        $this->o->device->resetMock($mocks);
        $this->o->fromDataArray($preload);
        $this->assertEquals($expect, $this->o->toArray());
    }

}

?>
