<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Device.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyNetwork.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(new DummySystem(), null, "DummyTable", null),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "Table" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "id" => 5,
                                    "name" => 3,
                                    "value" => 1,
                                ),
                            ),
                        ),
                        "get" => array(
                            array("HWPartNum"),
                            array("FWPartNum"),
                            array("FWVersion"),
                        ),
                        "set" => array(
                            array("Driver", "EDEFAULT"),
                        ),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                2,
                new DummyTable(),
                array(
                    "Table" => array(
                        "getRow" => array(
                            array(0 => 2),
                        ),
                        "set" => array(
                            array("id", 2),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config      The configuration to use
    * @param mixed $device      The gateway to set
    * @param mixed $class       This is either the name of a class or an object
    * @param array $expectTable The table to expect
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $device, $class, $expectTable)
    {
        $table = new DummyTable();
        // This just resets the mock
        $table->resetMock();
        $obj = Device::factory($config, $device, $class);
        // Make sure we have the right object
        $table = $this->readAttribute($obj, "_table");
        if (is_object($table)) {
            $this->assertEquals($expectTable, $table->retrieve(), "Data Wrong");
        }
        unset($obj);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataDriver()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                "asdf",
                "HUGnet\\devices\\drivers\\EDEFAULT",
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                    "Driver" => "EVIRTUAL",
                ),
                "DummyTable",
                null,
                "HUGnet\\devices\\drivers\\EDEFAULT",
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param mixed  $device       The device to set
    * @param mixed  $class        This is either the name of a class or an object
    * @param string $driver       The driver to tell it to load
    * @param string $driverExpect The driver we expect to be loaded
    *
    * @return null
    *
    * @dataProvider dataDriver
    */
    public function testDriver(
        $config, $device, $class, $driver, $driverExpect
    ) {
        $obj = Device::factory($config, $device, $class);
        $this->assertSame($driverExpect, get_class($obj->driver($driver)));
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataNetwork()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    *
    * @return null
    *
    * @dataProvider dataNetwork
    */
    public function testNetwork(
        $config, $device, $class, $mocks
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device, $class);
        $this->assertEquals(
            "HUGnet\devices\Network", get_class($obj->network()), "Wrong Class"
        );
        $this->assertSame($obj->network(), $obj->network(), "Wrong Object Returned");
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataConfig()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    *
    * @return null
    *
    * @dataProvider dataConfig
    */
    public function testConfig(
        $config, $device, $class, $mocks
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device, $class);
        $this->assertEquals(
            "HUGnet\devices\Config", get_class($obj->config()), "Wrong Class"
        );
        $this->assertSame($obj->config(), $obj->config(), "Wrong Object Returned");
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "id",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "packetTimeout",
                5,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $this->assertSame($expect, $obj->get($field));
        unset($obj);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataJson()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                        "toArray" => array(
                            "id" => 2,
                            "asdf" => 3,
                            "params" => json_encode(array(1,2,3,4)),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                json_encode(
                    array(
                        'packetTimeout' => 5,
                        'sensors' => 13,
                        'physicalSensors' => 9,
                        'virtualSensors' => 4,
                        'historyTable' => 'EDEFAULTHistoryTable',
                        'averageTable' => 'EDEFAULTAverageTable',
                        'loadable' => false,
                        'id' => 2,
                        'asdf' => 3,
                        'params' => array(1,2,3,4),
                    )
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataJson
    */
    public function testJson(
        $config, $class, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $json = $obj->json();
        $this->assertSame($expect, $json);
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataGetParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => base64_encode(serialize(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            )),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => base64_encode(serialize(
                                array(
                                    "DriverInfo" => array(
                                        "A" => 1,
                                        "B" => 2,
                                        "C" => 3,
                                    ),
                                )
                            )),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                null,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                null,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGetParam
    */
    public function testGetParam(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $this->assertSame($expect, $obj->getParam($field));
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataSetParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                4,
                array(
                    'Table' => array(
                        'get' => array(array("params"), array("params"),),
                        'set' => array(
                            array(
                                'params',
                                json_encode(
                                    array("A" => 1, "B" => 4, "C" => 3,)
                                ),
                            ),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                5,
                array(
                    'Table' => array(
                        'get' => array(array("params"), array("params"),),
                        'set' => array(
                            array(
                                'params',
                                json_encode(
                                    array("B" => 5,)
                                ),
                            ),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                8,
                array(
                    'Table' => array(
                        'get' => array(array("params"), array("params"),),
                        'set' => array(
                            array(
                                'params',
                                json_encode(
                                    array("A" => 1, "B" => 2, "C" => 3, "Q" => 8)
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to set
    * @param mixed  $value  The value to set the field to
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataSetParam
    */
    public function testSetParam(
        $config, $class, $field, $value, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $obj->setParam($field, $value);
        $this->assertSame($expect, $sys->retrieve());
        unset($obj);
    }
}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceTestDriver1
{
    /**
    * This function creates the system.
    *
    * @param object &$device The device class
    * @param string $driver  The driver to load
    *
    * @return null
    */
    public static function &factory(&$device, $driver)
    {
        $object = new DeviceTestDriver1;
        $object->device = &$device;
        $object->driver = $driver;
        return $object;
    }
}
?>
