<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Device.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'system/Sensor.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyNetwork.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(
                new DummySystem(),
                null,
                "DummyTable",
                array(
                    "clearData" => array(array()),
                ),
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "fromAny" => array(
                        array(
                            array(
                                "id" => 5,
                                "name" => 3,
                                "value" => 1,
                            ),
                        ),
                    ),
                    "get" => array(
                        array("HWPartNum"),
                        array("FWPartNum"),
                        array("FWVersion"),
                    ),
                    "set" => array(
                        array("Driver", "EDEFAULT"),
                    ),
                    "clearData" => array(array()),
                    "selectOneInto" => array(
                        array(
                            "`id` = ? AND `name` = ? AND `value` = ?",
                            array(5, 3, 1),
                        ),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                2,
                new DummyTable(),
                array(
                    "getRow" => array(
                        array(0 => 2),
                    ),
                    "set" => array(
                        array("id", 2),
                    ),
                    "clearData" => array(array()),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config      The configuration to use
    * @param mixed $device      The gateway to set
    * @param mixed $class       This is either the name of a class or an object
    * @param array $expectTable The table to expect
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $device, $class, $expectTable)
    {
        $table = new DummyTable();
        // This just resets the mock
        $table->resetMock();
        $obj = Device::factory($config, $device);
        // Make sure we have the right object
        $table = $this->readAttribute($obj, "_table");
        if (is_object($table)) {
            $this->assertEquals(
                $expectTable, $table->retrieve("Devices"), "Data Wrong"
            );
        }
        unset($obj);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataNetwork()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    *
    * @return null
    *
    * @dataProvider dataNetwork
    */
    public function testNetwork(
        $config, $device, $class, $mocks
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device, $class);
        $this->assertEquals(
            "HUGnet\devices\Network", get_class($obj->network()), "Wrong Class"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataAction()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    *
    * @return null
    *
    * @dataProvider dataAction
    */
    public function testAction(
        $config, $device, $class, $mocks
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $this->assertEquals(
            "HUGnet\devices\Action", get_class($obj->action()), "Wrong Class"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataFirmware()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
                array(
                    "table" => array(
                        array("Devices"),
                        array("Firmware"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    * @param array $expect THe expected calls to system
    *
    * @return null
    *
    * @dataProvider dataFirmware
    */
    public function testFirmware(
        $config, $device, $class, $mocks, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $obj->firmware();
        $this->assertEquals(
            $expect, $config->retrieve("System"), "Wrong Return"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataNewVirtual()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                array(
                    "hello" => "there",
                ),
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                        "table" => array(
                            "Firmware" => "test",
                        ),
                    ),
                ),
                array(
                    array(
                        array(
                            "hello" => "there",
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $data   The data to give it.
    * @param array $mocks  The mocks to use
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataNewVirtual
    */
    public function testNewVirtual(
        $config, $device, $data, $mocks, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $obj->newVirtual($data);
        $ret = $config->retrieve();
        $this->assertEquals(
            $expect, $ret["Devices"]["insertVirtual"], "Wrong Return"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataEncode()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => "01",
                        ),
                    ),
                ),
                true,
                "000000000500391201430039200343010203FFFFFFFF01000000000000000000",
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => "01",
                        ),
                    ),
                ),
                false,
                "FFFFFFFF01",
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config    The configuration to use
    * @param mixed  $device    The device to set
    * @param mixed  $class     This is either the name of a class or an object
    * @param array  $mocks     The mocks to use
    * @param bool   $showFixed Show the fixed portion of the data
    * @param string $expect    The expected return
    *
    * @return null
    *
    * @dataProvider dataEncode
    */
    public function testEncode(
        $config, $device, $class, $mocks, $showFixed, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $this->assertEquals(
            $expect, $obj->encode($showFixed), "Return Wrong"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataDecode()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                true,
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => 1,
                        ),
                    ),
                ),
                "000000000500391201430039200343010203FFFFFFFF01000000000000000000",
                array(
                    array("Driver", "EDEFAULT"),
                    array("id", 5),
                    array("DeviceID", 5),
                    array("HWPartNum", "0039120143"),
                    array("FWPartNum", "0039200343"),
                    array("FWVersion", "010203"),
                    array("DeviceGroup", "FFFFFF"),
                    array(
                        "RawSetup",
                        "000000000500391201430039200343010203FFFFFFFF"
                        ."01000000000000000000"
                    ),
                    array("Driver", "EDEFAULT"),
                    array("TimeConstant", 1),
                ),
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                false,
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => 1,
                        ),
                    ),
                ),
                "",
                array(
                    array("Driver", "EDEFAULT"),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $device The device to set
    * @param mixed  $return The expected return value
    * @param array  $mocks  The mocks to use
    * @param string $string The string to feed into the decode
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataDecode
    */
    public function testDecode(
        $config, $device, $return, $mocks, $string, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $res = $obj->decode($string);
        $this->assertSame($return, $res, "Return Wrong");
        $ret = $config->retrieve();
        $this->assertEquals(
            $expect, $ret["Devices"]["set"], "Calls Wrong"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "id",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "packetTimeout",
                5,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $this->assertSame($expect, $obj->get($field));
        unset($obj);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataJson()
    {
        $sensors = array();
        $obj = Sensor::factory(
            new DummySystem("TestStuff"),
            new DummySystem("Device"),
            array(
            )
        );
        $obj->change(array());
        for ($i = 0; $i < 13; $i++) {
            $sensors[$i] = $obj->toArray(true);
        }
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                            "channels" => json_encode(
                                array(
                                )
                            ),
                        ),
                        "toArray" => array(
                            "id" => 2,
                            "asdf" => 3,
                            "params" => json_encode(array(1,2,3,4)),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                json_encode(
                    array(
                        'packetTimeout' => 5,
                        'totalSensors' => 13,
                        'physicalSensors' => 9,
                        'virtualSensors' => 4,
                        'historyTable' => 'EDEFAULTHistory',
                        'averageTable' => 'EDEFAULTAverage',
                        'loadable' => false,
                        'bootloader' => false,
                        'ConfigInterval' => 43200,
                        'id' => 2,
                        'asdf' => 3,
                        'params' => array(1,2,3,4),
                        'sensors' => $sensors,
                        'type' => 'unknown',
                        'job'  => 'unknown',
                        'actionClass' => 'Action',
                        'arch' => 'unknown',
                        "channels" => array(
                            0 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 0,
                                'label' => '',
                            ),
                            1 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 1,
                                'label' => '',
                            ),
                            2 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 2,
                                'label' => '',
                            ),
                            3 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 3,
                                'label' => '',
                            ),
                            4 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 4,
                                'label' => '',
                            ),
                            5 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 5,
                                'label' => '',
                            ),
                            6 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 6,
                                'label' => '',
                            ),
                            7 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 7,
                                'label' => '',
                            ),
                            8 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 8,
                                'label' => '',
                            ),
                            9 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 9,
                                'label' => '',
                            ),
                            10 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 10,
                                'label' => '',
                            ),
                            11 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 11,
                                'label' => '',
                            ),
                            12 => array(
                                'decimals' => 2,
                                'units' => '&#176;C',
                                'maxDecimals' => 2,
                                'storageUnit' => '&#176;C',
                                'unitType' => 'Temperature',
                                'dataType' => 'raw',
                                'sensor' => null,
                                'validUnits' => array(
                                    '&#176;F' => '&#176;F',
                                    '&#176;C' => '&#176;C',
                                    'K' => 'K'
                                ),
                                'channel' => 12,
                                'label' => '',
                            ),
                        ),
                    )
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $class  This is either the name of a class or an object
    * @param mixed $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataJson
    */
    public function testJson(
        $config, $class, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $json = $obj->json();
        $this->assertEquals(json_decode($expect, true), json_decode($json, true));
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataGetParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => base64_encode(
                                serialize(
                                    array(
                                        "A" => 1,
                                        "B" => 2,
                                        "C" => 3,
                                    )
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => base64_encode(
                                serialize(
                                    array(
                                        "DriverInfo" => array(
                                            "A" => 1,
                                            "B" => 2,
                                            "C" => 3,
                                        ),
                                    )
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                null,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                null,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGetParam
    */
    public function testGetParam(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $this->assertSame($expect, $obj->getParam($field));
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataSetParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                4,
                array(
                    'Table' => array(
                        'get' => array(array("params"), array("params"),),
                        'set' => array(
                            array(
                                'params',
                                json_encode(
                                    array("A" => 1, "B" => 4, "C" => 3,)
                                ),
                            ),
                        ),
                        "clearData" => array(array()),
                    ),
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                5,
                array(
                    'Table' => array(
                        'get' => array(array("params"), array("params"),),
                        'set' => array(
                            array(
                                'params',
                                json_encode(
                                    array("B" => 5,)
                                ),
                            ),
                        ),
                        "clearData" => array(array()),
                    ),
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                8,
                array(
                    'Table' => array(
                        'get' => array(array("params"), array("params"),),
                        'set' => array(
                            array(
                                'params',
                                json_encode(
                                    array("A" => 1, "B" => 2, "C" => 3, "Q" => 8)
                                ),
                            ),
                        ),
                        "clearData" => array(array()),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to set
    * @param mixed  $value  The value to set the field to
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataSetParam
    */
    public function testSetParam(
        $config, $class, $field, $value, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $obj->setParam($field, $value);
        $this->assertEquals($expect, $sys->retrieve());
        unset($obj);
    }
    /**
    * data provider for testSensor
    *
    * @return array
    */
    public static function dataDecodeData()
    {
        return array(
            array(
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                null,
                new DummyTable("SDTable"),
                "010001100D00200C00300B00400A00500900600800700700800600900500",
                0x55,
                300,
                array(
                    null, 10, null, null
                ),
                array(
                    "deltaT" => 300,
                    "DataIndex" => 1,
                    "timeConstant" => 1,
                    "rawData" => "010001100D00200C00300B00400A0050090060080"
                        ."0700700800600900500",
                    array(
                        "value" => 39.7559,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 41.7127,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 43.843,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 46.1795,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 48.7664,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 51.6594,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 54.9383,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 58.717,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => 63.1656,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => null,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => null,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => null,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                    array(
                        "value" => null,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                        "decimals" => 2,
                    ),
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $config  The configuration to use
    * @param array  $preload The data to preload into the device
    * @param mixed  $class   This is either the name of a class or an object
    * @param string $data    The data to use
    * @param int    $command The command that was used
    * @param float  $deltaT  The number of seconds between readings
    * @param array  $prev    The previous reading
    * @param array  $expect  The expected data
    *
    * @return null
    *
    * @dataProvider dataDecodeData
    */
    public function testDecodeData(
        $config, $preload, $class, $data, $command, $deltaT, $prev, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, $preload);
        $data = $obj->decodeData($data, $command, $deltaT, $prev);
        $this->assertEquals($expect, $data);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataSensor()
    {
        return array(
            array(
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => array(array("id" => 0x15)),
                        ),
                    ),
                ),
                0,
                "\HUGnet\Sensor",
                0x15,
            ),
            array(
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => base64_encode(
                                serialize(
                                    array(
                                        array("id" => 0x18),
                                    )
                                )
                            ),
                        ),
                    ),
                ),
                0,
                "\HUGnet\Sensor",
                0x18,
            ),
            array(
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => true,
                        ),
                    ),
                ),
                10,
                "\HUGnet\Sensor",
                0xFE,
            ),
            array(
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => true,
                            "RawSetup" => "000000100800393701410039380143000004"
                            ."FFFFFFFF01044242424241414141"
                        ),
                    ),
                ),
                1,
                "\HUGnet\Sensor",
                0x42,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param string $sensor       The driver to tell it to load
    * @param string $driverExpect The driver we expect to be loaded
    * @param int    $expect       The expected sensor id
    *
    * @return null
    *
    * @dataProvider dataSensor
    */
    public function testSensor(
        $config, $sensor, $driverExpect, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null);
        $sen = $obj->sensor($sensor);
        $this->assertTrue(
            is_a($sen, $driverExpect),
            "Return is not a ".$driverExpect
        );
        $ret = $sys->retrieve();
        $this->assertSame(
            $expect,
            $ret["Sensors"]["fromAny"][1][0]["id"],
            "Wrong sensor returned"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataChannels()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors"  => array(array("id" => 0x15)),
                            "channels" => "",
                        ),
                    ),
                ),
                "DummyTable",
                "\HUGnet\Channels",
                0x15,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param mixed  $class        This is either the name of a class or an object
    * @param string $driverExpect The driver we expect to be loaded
    * @param int    $expect       The expected sensor id
    *
    * @return null
    *
    * @dataProvider dataChannels
    */
    public function testChannels(
        $config, $class, $driverExpect, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $sen = $obj->channels();
        $this->assertTrue(
            is_a($sen, $driverExpect),
            "Return is not a ".$driverExpect
        );
        unset($obj);
    }
    /**
    * Data provider for testHistoryFactory
    *
    * @return array
    */
    public static function dataHistoryFactory()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                    "EDEFAULTHistory" => array(
                        "get" => array(
                            "test" => "EDEFAULTHistory",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                array(
                ),
                true,
                'EDEFAULTHistory',
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "",
                            "id" => 2,
                        ),
                    ),
                    "EDEFAULTAverage" => array(
                        "get" => array(
                            "test" => "EDEFAULTAverage",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                array(
                ),
                false,
                'EDEFAULTAverage',
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config  The configuration to use
    * @param mixed $class   This is either the name of a class or an object
    * @param array $data    The data to build the history record with.
    * @param bool  $history History if true, average if false
    * @param mixed $expect  The value we expect back
    *
    * @return null
    *
    * @dataProvider dataHistoryFactory
    */
    public function testHistoryFactory(
        $config, $class, $data, $history, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $hist = $obj->historyFactory($data, $history);
        $this->assertSame($expect, $hist->get("test"));
        unset($obj);
    }

    /**
    * data provider for testSetUnits
    *
    * @return array
    */
    public static function dataSetUnits()
    {
        return array(
            array(
                array(
                    "SDTable" => array(
                        "get" => array(
                            "id" => 5,
                            "RawSetup" => "000000100800393701410039380143000004"
                            ."FFFFFFFF01040404040404040404",
                            "sensors" => "",
                        ),
                    ),
                ),
                new DummyTable("SDTable"),
                array(
                    "deltaT" => 300,
                    "DataIndex" => 1,
                    "timeConstant" => 1,
                    array(
                        "value" => (float)0x10,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x20,
                        "units" => "&#176;F",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x30,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x40,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x50,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x60,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x70,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x80,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x90,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                ),
                array(
                    "deltaT" => 300,
                    "DataIndex" => 1,
                    "timeConstant" => 1,
                    array(
                        "value" => (float)0x10,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x30,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x40,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x50,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x60,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x70,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x80,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => (float)0x90,
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => null,
                        "units" => "unknown",
                        "unitType" => "unknown",
                        "dataType" => \HUGnet\channels\Driver::TYPE_RAW,
                    ),
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $data   The data to use
    * @param array  $expect The expected data
    *
    * @return null
    *
    * @dataProvider dataSetUnits
    */
    public function testSetUnits($config, $class, $data, $expect)
    {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $obj->setUnits($data);
        $this->assertEquals($expect, $data);
    }
}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceTestDriver1
{
    /**
    * This function creates the system.
    *
    * @param object &$device The device class
    * @param string $driver  The driver to load
    *
    * @return null
    */
    public static function &factory(&$device, $driver)
    {
        $object = new DeviceTestDriver1;
        $object->device = &$device;
        $object->driver = $driver;
        return $object;
    }
}
?>
