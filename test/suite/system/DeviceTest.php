<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2013 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Device.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'devices/Input.php';
/** This is a required class */
require_once CODE_BASE.'devices/datachan/Driver.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyNetwork.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.10.2
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(
                new DummySystem(),
                array(),
                null,
                "DummyTable",
                array(
                ),
            ),
            array(
                new DummySystem(),
                array(
                    "Devices" => array(
                        "sanitizeWhere" => array(
                            "id" => 5,
                            "name" => 3,
                            "value" => 1,
                        ),
                        "selectOneInto" => false,
                    ),
                ),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "fromAny" => array(
                        array(
                            array(
                                "id" => 5,
                                "name" => 3,
                                "value" => 1,
                            ),
                        ),
                    ),
                    "clearData" => array(array()),
                    "selectOneInto" => array(
                        array(
                            "`id` = ? AND `name` = ? AND `value` = ?",
                            array(5, 3, 1),
                        ),
                    ),
                    "sanitizeWhere" => array(
                        array(
                            array(
                                "id" => 5,
                                "name" => 3,
                                "value" => 1,
                            ),
                        ),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                array(),
                2,
                new DummyTable(),
                array(
                    "getRow" => array(
                        array(0 => 2),
                    ),
                    "set" => array(
                        array("Driver", "EDEFAULT"),
                    ),
                    "clearData" => array(array()),
                    "isEmpty" => array(array()),
                    "get" => array(
                        array("HWPartNum"),
                        array("FWPartNum"),
                        array("FWVersion"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config      The configuration to use
    * @param array $mocks       The mocks to use
    * @param mixed $device      The gateway to set
    * @param mixed $class       This is either the name of a class or an object
    * @param array $expectTable The table to expect
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $mocks, $device, $class, $expectTable)
    {
        $table = new DummyTable();
        // This just resets the mock
        $table->resetMock($mocks);
        $obj = Device::factory($config, $device);
        // Make sure we have the right object
        if (is_object($table)) {
            $this->assertEquals(
                $expectTable, $table->retrieve("Devices"), "Data Wrong"
            );
        }
        unset($obj);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataNetwork()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    *
    * @return null
    *
    * @dataProvider dataNetwork
    */
    public function testNetwork(
        $config, $device, $class, $mocks
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device, $class);
        $this->assertEquals(
            "HUGnet\devices\Network", get_class($obj->network()), "Wrong Class"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataAction()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    *
    * @return null
    *
    * @dataProvider dataAction
    */
    public function testAction(
        $config, $device, $class, $mocks
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $this->assertEquals(
            "HUGnet\devices\Action", get_class($obj->action()), "Wrong Class"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataFirmware()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                    ),
                ),
                array(
                    "table" => array(
                        array("Devices"),
                        array("Firmware"),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $mocks  The mocks to use
    * @param array $expect THe expected calls to system
    *
    * @return null
    *
    * @dataProvider dataFirmware
    */
    public function testFirmware(
        $config, $device, $class, $mocks, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $obj->firmware();
        $this->assertEquals(
            $expect, $config->retrieve("System"), "Wrong Return"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataInsertVirtual()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                array(
                    "hello" => "there",
                ),
                array(
                    "System" => array(
                        "network" => new \HUGnet\network\DummyNetwork("Network"),
                        "table" => array(
                            "Firmware" => "test",
                        ),
                    ),
                ),
                array(
                    array(
                        array(
                            "hello" => "there",
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $device The device to set
    * @param mixed $data   The data to give it.
    * @param array $mocks  The mocks to use
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataInsertVirtual
    */
    public function testInsertVirtual(
        $config, $device, $data, $mocks, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Device::factory($config, $device);
        $obj->insertVirtual($data);
        $ret = $config->retrieve();
        $this->assertEquals(
            $expect, $ret["Devices"]["insertVirtual"], "Wrong Return"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataEncode()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "HWPartNum"    => "0039-12-01-C",
                    "FWPartNum"    => "0039-20-03-C",
                    "FWVersion"    => "1.2.3",
                    "DeviceGroup"  => "FFFFFF",
                    "params"       => json_encode(
                        array(
                            "TimeConstant" => 1,
                        )
                    ),
                ),
                "DummyTable",
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "params"       => json_encode(
                                array(
                                    "TimeConstant" => 1,
                                )
                            ),
                        ),
                    ),
                ),
                true,
                "000000000500391201430039200343010203FFFFFFFF01FFFFFFFFFFFFFFFFFF",
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "params"       => json_encode(
                                array(
                                    "TimeConstant" => 1,
                                )
                            ),
                        ),
                    ),
                ),
                false,
                "FFFFFFFF01",
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config    The configuration to use
    * @param mixed  $device    The device to set
    * @param mixed  $class     This is either the name of a class or an object
    * @param array  $mocks     The mocks to use
    * @param bool   $showFixed Show the fixed portion of the data
    * @param string $expect    The expected return
    *
    * @return null
    *
    * @dataProvider dataEncode
    */
    public function testEncode(
        $config, $device, $class, $mocks, $showFixed, $expect
    ) {
        $sys = $this->getMock('\HUGnet\System', array('now'));
        $obj = Device::factory($sys, $device);
        //$config->resetMock($mocks);
        //$obj = Device::factory($config, $device);
        $this->assertEquals(
            $expect, $obj->encode($showFixed), "Return Wrong"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataDecode()
    {
        return array(
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                true,
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "params"       => json_encode(
                                array(
                                    "TimeConstant" => 1,
                                )
                            ),
                        ),
                        "selectOneInto" => true,
                    ),
                ),
                "000000000500391201430039200343010203FFFFFFFF01000000000000000000",
                array(
                    array("Driver", "EDEFAULT"),
                    array("id", 5),
                    array("DeviceID", 5),
                    array("HWPartNum", "0039120143"),
                    array("FWPartNum", "0039200343"),
                    array("FWVersion", "010203"),
                    array("DeviceGroup", "FFFFFF"),
                    array(
                        "RawSetup",
                        "000000000500391201430039200343010203FFFFFFFF"
                        ."01000000000000000000"
                    ),
                    array("Driver", "EDEFAULT"),
                    array(
                        "params",
                        json_encode(
                            array(
                                "TimeConstant" => 1,
                            )
                        ),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                false,
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "params"       => json_encode(
                                array(
                                    "TimeConstant" => 1,
                                )
                            ),
                        ),
                        "selectOneInto" => true,
                    ),
                ),
                "",
                array(
                    array("Driver", "EDEFAULT"),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $device The device to set
    * @param mixed  $return The expected return value
    * @param array  $mocks  The mocks to use
    * @param string $string The string to feed into the decode
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataDecode
    */
    public function testDecode(
        $config, $device, $return, $mocks, $string, $expect
    ) {
        //$config->resetMock($mocks);
        $sys = $this->getMock('\HUGnet\System', array('now'));
        $obj = Device::factory($sys, $device);
        $res = $obj->decode($string);
        $this->assertSame($return, $res, "Return Wrong");
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "id",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "packetTimeout",
                5,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $this->assertSame($expect, $obj->get($field));
        unset($obj);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataToArray()
    {
        return array(
            array( //  #0 Everything Normal
                array(
                    "Driver" => "EDEFAULT",
                    "id" => 2,
                    "channels" => json_encode(
                        array(
                        )
                    ),
                    "Role" => "asdf",
                    "params" => json_encode(array(1,2,3,4)),
                ),
                new DummyTable("Table"),
                true,
                array(
                    'packetTimeout' => 5,
                    'totalSensors' => 13,
                    'physicalSensors' => 9,
                    'virtualSensors' => 4,
                    'historyTable' => 'EDEFAULTHistory',
                    'averageTable' => 'EDEFAULTAverage',
                    'loadable' => false,
                    'bootloader' => false,
                    'InputTables' => 9,
                    'OutputTables' => 0,
                    'ProcessTables' => 0,
                    'setConfig' => true,
                    'ConfigInterval' => 43200,
                    'id' => 2,
                    'params' => array(1,2,3,4),
                    'type' => 'unknown',
                    'job'  => 'unknown',
                    'actionClass' => 'Action',
                    'arch' => 'unknown',
                    "Role" => "asdf",
                    'Roles' => array("" => "None"),
                    "averageTypes" => array(
                        '15MIN' => '15 Minute Average',
                        'HOURLY' => 'Hourly Average',
                        'DAILY' => 'Daily Average',
                        'WEEKLY' => 'Weekly Average',
                        'MONTHLY' => 'Monthly Average',
                        'YEARLY' => 'Yearly Average',
                        "history" => "History",
                    ),
                    "LatePoll" => false,
                    "dataChannels" => array(
                    ),
                    "controlChannels" => array(),
                    'group' => 'default',
                    'DeviceID' => '000000',
                    'DeviceName' => '',
                    'HWPartNum' => '',
                    'FWPartNum' => '',
                    'FWVersion' => '',
                    'RawSetup' => '',
                    'Active' => 1,
                    'GatewayKey' => 0,
                    'ControllerKey' => 0,
                    'ControllerIndex' => 0,
                    'DeviceLocation' => '',
                    'DeviceJob' => '',
                    'Driver' => 'EDEFAULT',
                    'PollInterval' => 0,
                    'ActiveSensors' => 0,
                    'DeviceGroup' => 'FFFFFF',
                    'sensors' => '',
                    'localParams' => '',
                )
            ),
            array(   // #1 No default stuff
                array(
                    "Driver" => "EDEFAULT",
                    "id" => 2,
                    "channels" => json_encode(
                        array(
                        )
                    ),
                    "Role" => "asdf",
                    "params" => json_encode(array(1,2,3,4)),
                ),
                new DummyTable("Table"),
                false,
                array(
                    'id' => 2,
                    'params' => array(1,2,3,4),
                    "dataChannels" => array(
                    ),
                    "controlChannels" => array(),
                    "Role" => "asdf",
                    "Driver" => "EDEFAULT",
                )
            ),
            array( //  #2 Late Poll
                array(
                    "Driver" => "EDEFAULT",
                    "id" => 2,
                    "channels" => json_encode(
                        array(
                        )
                    ),
                    "Role" => "asdf",
                    "PollInterval" => 300,
                    "params" => json_encode(array(1,2,3,4, "LastPoll" => 1000)),
                ),
                new DummyTable("Table"),
                true,
                array(
                    'packetTimeout' => 5,
                    'totalSensors' => 13,
                    'physicalSensors' => 9,
                    'virtualSensors' => 4,
                    'historyTable' => 'EDEFAULTHistory',
                    'averageTable' => 'EDEFAULTAverage',
                    'loadable' => false,
                    'bootloader' => false,
                    'InputTables' => 9,
                    'OutputTables' => 0,
                    'ProcessTables' => 0,
                    'setConfig' => true,
                    'ConfigInterval' => 43200,
                    'id' => 2,
                    'params' => array(1,2,3,4, "LastPoll" => 1000),
                    'PollInterval' => 300,
                    'type' => 'unknown',
                    'job'  => 'unknown',
                    'actionClass' => 'Action',
                    'arch' => 'unknown',
                    "Role" => "asdf",
                    'Roles' => array("" => "None"),
                    "averageTypes" => array(
                        '15MIN' => '15 Minute Average',
                        'HOURLY' => 'Hourly Average',
                        'DAILY' => 'Daily Average',
                        'WEEKLY' => 'Weekly Average',
                        'MONTHLY' => 'Monthly Average',
                        'YEARLY' => 'Yearly Average',
                        "history" => "History",
                    ),
                    "LatePoll" => true,
                    "dataChannels" => array(
                    ),
                    "controlChannels" => array(),
                    'group' => 'default',
                    'DeviceID' => '000000',
                    'DeviceName' => '',
                    'HWPartNum' => '',
                    'FWPartNum' => '',
                    'FWVersion' => '',
                    'RawSetup' => '',
                    'Active' => 1,
                    'GatewayKey' => 0,
                    'ControllerKey' => 0,
                    'ControllerIndex' => 0,
                    'DeviceLocation' => '',
                    'DeviceJob' => '',
                    'Driver' => 'EDEFAULT',
                    'ActiveSensors' => 0,
                    'DeviceGroup' => 'FFFFFF',
                    'sensors' => '',
                    'localParams' => '',
                )
            ),
            array( //  #3 Not a Late Poll
                array(
                    "Driver" => "EDEFAULT",
                    "id" => 2,
                    "channels" => json_encode(
                        array(
                        )
                    ),
                    "Role" => "asdf",
                    "PollInterval" => 300,
                    "Active" => 0,
                    "params" => json_encode(array(1,2,3,4, "LastPoll" => 1000)),
                ),
                new DummyTable("Table"),
                true,
                array(
                    'packetTimeout' => 5,
                    'totalSensors' => 13,
                    'physicalSensors' => 9,
                    'virtualSensors' => 4,
                    'historyTable' => 'EDEFAULTHistory',
                    'averageTable' => 'EDEFAULTAverage',
                    'loadable' => false,
                    'bootloader' => false,
                    'InputTables' => 9,
                    'OutputTables' => 0,
                    'ProcessTables' => 0,
                    'setConfig' => true,
                    'ConfigInterval' => 43200,
                    'id' => 2,
                    'params' => array(1,2,3,4, "LastPoll" => 1000),
                    'PollInterval' => 300,
                    'type' => 'unknown',
                    'job'  => 'unknown',
                    'actionClass' => 'Action',
                    'arch' => 'unknown',
                    "Role" => "asdf",
                    'Roles' => array("" => "None"),
                    "averageTypes" => array(
                        '15MIN' => '15 Minute Average',
                        'HOURLY' => 'Hourly Average',
                        'DAILY' => 'Daily Average',
                        'WEEKLY' => 'Weekly Average',
                        'MONTHLY' => 'Monthly Average',
                        'YEARLY' => 'Yearly Average',
                        "history" => "History",
                    ),
                    "LatePoll" => false,
                    "dataChannels" => array(
                    ),
                    "controlChannels" => array(),
                    'group' => 'default',
                    'DeviceID' => '000000',
                    'DeviceName' => '',
                    'HWPartNum' => '',
                    'FWPartNum' => '',
                    'FWVersion' => '',
                    'RawSetup' => '',
                    'Active' => 0,
                    'GatewayKey' => 0,
                    'ControllerKey' => 0,
                    'ControllerIndex' => 0,
                    'DeviceLocation' => '',
                    'DeviceJob' => '',
                    'Driver' => 'EDEFAULT',
                    'ActiveSensors' => 0,
                    'DeviceGroup' => 'FFFFFF',
                    'sensors' => '',
                    'localParams' => '',
                )
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config  The configuration to use
    * @param mixed $class   This is either the name of a class or an object
    * @param bool  $default Whether to show the default stuff or not
    * @param mixed $expect  The value we expect back
    *
    * @return null
    *
    * @dataProvider dataToArray
    * @large
    */
    public function testToArray(
        $config, $class, $default, $expect
    ) {
        $sys = $this->getMock('\HUGnet\System', array('now'));
        $sys->expects($this->any())
             ->method('now')
             ->will($this->returnValue(1000000));
        $obj = Device::factory($sys, $config);
        $json = $obj->toArray($default);
        $this->assertEquals($expect, $json);
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataGetParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => base64_encode(
                                serialize(
                                    array(
                                        "A" => 1,
                                        "B" => 2,
                                        "C" => 3,
                                    )
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => base64_encode(
                                serialize(
                                    array(
                                        "DriverInfo" => array(
                                            "A" => 1,
                                            "B" => 2,
                                            "C" => 3,
                                        ),
                                    )
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                null,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                null,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGetParam
    * @large
    */
    public function testGetParam(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $this->assertSame($expect, $obj->getParam($field));
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataGetLocalParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "localParams" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "localParams" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                null,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGetLocalParam
    * @large
    */
    public function testGetLocalParam(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $this->assertSame($expect, $obj->getLocalParam($field));
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataSetParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                4,
                array(
                    array(
                        'params',
                        json_encode(
                            array("A" => 1, "B" => 4, "C" => 3,)
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                5,
                array(
                    array(
                        'params',
                        json_encode(
                            array("B" => 5,)
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "params" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                8,
                array(
                    array(
                        'params',
                        json_encode(
                            array("A" => 1, "B" => 2, "C" => 3, "Q" => 8)
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to set
    * @param mixed  $value  The value to set the field to
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataSetParam
    */
    public function testSetParam(
        $config, $class, $field, $value, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $obj->setParam($field, $value);
        $ret = $sys->retrieve("Table");
        $this->assertEquals($expect, $ret["set"]);
        unset($obj);
    }
    /**
    * Data provider for testGetParam
    *
    * @return array
    */
    public static function dataSetLocalParam()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "localParams" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "B",
                4,
                array(
                    array(
                        'localParams',
                        json_encode(
                            array("A" => 1, "B" => 4, "C" => 3,)
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "localParams" => json_encode(
                                array(
                                    "A" => 1,
                                    "B" => 2,
                                    "C" => 3,
                                )
                            ),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "Q",
                8,
                array(
                    array(
                        'localParams',
                        json_encode(
                            array("A" => 1, "B" => 2, "C" => 3, "Q" => 8)
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to set
    * @param mixed  $value  The value to set the field to
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataSetLocalParam
    */
    public function testSetLocalParam(
        $config, $class, $field, $value, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $obj->setLocalParam($field, $value);
        $ret = $sys->retrieve("Table");
        $this->assertEquals($expect, $ret["set"]);
        unset($obj);
    }
    /**
    * data provider for testInput
    *
    * @return array
    */
    public static function dataDecodeData()
    {
        return array(
            array(
                array(
                    "id" => 5,
                    "RawSetup" => "000000000500391201430039200343010203FFFFFFFF01000000000000000000",
                ),
                "010001100D00200C00300B00400A00500900600800700700800600900500",
                0x55,
                300,
                array(
                    null, 10, null, null
                ),
                array(
                    "deltaT" => 300,
                    "DataIndex" => 1,
                    "timeConstant" => 1,
                    "rawData" => "010001100D00200C00300B00400A0050090060080"
                        ."0700700800600900500",
                    array(
                        "value" => 39.7589,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 41.7162,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 43.8471,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 46.1845,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 48.7713,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 51.665,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 54.9448,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 58.7243,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                    array(
                        "value" => 63.1738,
                        "units" => "&#176;C",
                        'maxDecimals' => 2,
                        'storageUnit' => '&#176;C',
                        "unitType" => "Temperature",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "decimals" => 2,
                        "label" => "",
                        "index" => 0,
                        "epChannel" => true,
                    ),
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload The data to preload into the device
    * @param string $data    The data to use
    * @param int    $command The command that was used
    * @param float  $deltaT  The number of seconds between readings
    * @param array  $prev    The previous reading
    * @param array  $expect  The expected data
    *
    * @return null
    *
    * @dataProvider dataDecodeData
    */
    public function testDecodeData(
        $preload, $data, $command, $deltaT, $prev, $expect
    ) {
        //$sys = new DummySystem("System");
        //$sys->resetMock($config);
        $sys = $this->getMock('\HUGnet\System', array('now'));
        $obj = Device::factory($sys, $preload);
        $data = $obj->decodeData($data, $command, $deltaT, $prev);
        $this->assertEquals($expect, $data);
    }

    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataInput()
    {
        return array(
            array(      // #0
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => array(array("id" => 0x15)),
                        ),
                    ),
                    "Inputs" => array(
                        "sanitizeWhere" => array(
                            "sensor" => 5,
                            "name" => 3,
                            "value" => 1,
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Input",
                array(
                    array(
                        array(
                            'dev' => 5,
                            'input' => 0,
                        ),
                    ),
                    array(
                        array(
                            'id' => 0x15,
                        ),
                    ),
                ),
            ),
            array(      // #1
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => base64_encode(
                                serialize(
                                    array(
                                        array("id" => 0x18),
                                    )
                                )
                            ),
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Input",
                array(
                    array(
                        array(
                            'dev' => 5,
                            'input' => 0,
                        ),
                    ),
                    array(
                        array(
                            'id' => 0x18,
                        ),
                    ),
                ),
            ),
            array(      // #2
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => true,
                        ),
                    ),
                ),
                10,
                "\HUGnet\devices\Input",
                array(
                    array(
                        array(
                            'dev' => 5,
                            'input' => 10,
                        ),
                    ),
                ),
            ),
            array(      // #3
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => true,
                            "RawSetup" => "000000100800393701410039380143000004"
                            ."FFFFFFFF01044242424241414141"
                        ),
                    ),
                ),
                1,
                "\HUGnet\devices\Input",
                array(
                    array(
                        array(
                            'dev' => 5,
                            'input' => 1,
                        ),
                    ),
                ),
            ),
            array(      // #4
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "Role" => "DeviceTestRole",
                        ),
                    ),
                    "Inputs" => array(
                        "sanitizeWhere" => array(
                            "sensor" => 5,
                            "name" => 3,
                            "value" => 1,
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Input",
                array(
                    array(
                        array(
                            "input" => 0,
                            "dev" => 5,
                        ),
                    ),
                ),
            ),
            array(      // #5
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors" => array(array("id" => 0x15)),
                            "Role" => "ThisIsABadRole",
                        ),
                    ),
                    "Inputs" => array(
                        "sanitizeWhere" => array(
                            "sensor" => 5,
                            "name" => 3,
                            "value" => 1,
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Input",
                array(
                    array(
                        array(
                            'dev' => 5,
                            'input' => 0,
                        ),
                    ),
                    array(
                        array(
                            'id' => 0x15,
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param string $sensor       The driver to tell it to load
    * @param string $driverExpect The driver we expect to be loaded
    * @param int    $expect       The expected sensor id
    *
    * @return null
    *
    * @dataProvider dataInput
    */
    public function testInput(
        $config, $sensor, $driverExpect, $expect
    ) {
        $sys = $this->getMock('\HUGnet\System', array('now'));
        $sys->expects($this->any())
             ->method('now')
             ->will($this->returnValue(1000000));
        $obj = Device::factory($sys, $config);
        $sen = $obj->input($sensor);
        $this->assertTrue(
            is_a($sen, $driverExpect),
            "Return is not a ".$driverExpect
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataOutput()
    {
        return array(
            array(      // #0
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Output",
                array(
                    array(
                        array(
                            "output" => 0,
                            "dev" => 5,
                        ),
                    ),
                ),
            ),
            array(      // #1
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "Role" => "DeviceTestRole",
                        ),
                    ),
                ),
                1,
                "\HUGnet\devices\Output",
                array(
                    array(
                        array(
                            "output" => 1,
                            "dev" => 5,
                        ),
                    ),
                ),
            ),
            array(      // #2
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "Role" => "NotARole",
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Output",
                array(
                    array(
                        array(
                            "output" => 0,
                            "dev" => 5,
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param string $sensor       The driver to tell it to load
    * @param string $driverExpect The driver we expect to be loaded
    * @param int    $expect       The expected sensor id
    *
    * @return null
    *
    * @dataProvider dataOutput
    */
    public function testOutput(
        $config, $sensor, $driverExpect, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null);
        $sen = $obj->output($sensor);
        $this->assertTrue(
            is_a($sen, $driverExpect),
            "Return is not a ".$driverExpect
        );
        $ret = $sys->retrieve();
        $this->assertEquals(
            $expect,
            $ret["DeviceOutputs"]["fromAny"],
            "Wrong sensor returned"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataProcess()
    {
        return array(
            array(      // #0
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Process",
                array(
                    array(
                        array(
                            "process" => 0,
                            "dev" => 5,
                        ),
                    ),
                ),
            ),
            array(      // #1
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "Role" => "DeviceTestRole",
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Process",
                array(
                    array(
                        array(
                            "process" => 0,
                            "dev" => 5,
                        ),
                    ),
                ),
            ),
            array(      // #2
                array(
                    "Devices" => array(
                        "get" => array(
                            "id" => 5,
                            "Role" => "ThisIsNotAProperRole",
                        ),
                    ),
                ),
                0,
                "\HUGnet\devices\Process",
                array(
                    array(
                        array(
                            "process" => 0,
                            "dev" => 5,
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param string $sensor       The driver to tell it to load
    * @param string $driverExpect The driver we expect to be loaded
    * @param int    $expect       The expected sensor id
    *
    * @return null
    *
    * @dataProvider dataProcess
    */
    public function testProcess(
        $config, $sensor, $driverExpect, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null);
        $sen = $obj->process($sensor);
        $this->assertTrue(
            is_a($sen, $driverExpect),
            "Return is not a ".$driverExpect
        );
        $ret = $sys->retrieve();
        $this->assertEquals(
            $expect,
            $ret["DeviceProcesses"]["fromAny"],
            "Wrong sensor returned"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataChannels()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors"  => array(array("id" => 0x15)),
                            "channels" => "",
                        ),
                    ),
                ),
                "DummyTable",
                "\HUGnet\devices\DataChannels",
                0x15,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param mixed  $class        This is either the name of a class or an object
    * @param string $driverExpect The driver we expect to be loaded
    * @param int    $expect       The expected sensor id
    *
    * @return null
    *
    * @dataProvider dataChannels
    */
    public function testChannels(
        $config, $class, $driverExpect, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $sen = $obj->dataChannels();
        $this->assertInstanceOf(
            $driverExpect, $sen,
            "Return is not a ".$driverExpect
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataControlChannels()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 5,
                            "sensors"  => array(array("id" => 0x15)),
                            "controlChannels" => "",
                        ),
                    ),
                ),
                "DummyTable",
                "\HUGnet\devices\ControlChannels",
                0x15,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config       The configuration to use
    * @param mixed  $class        This is either the name of a class or an object
    * @param string $driverExpect The driver we expect to be loaded
    * @param int    $expect       The expected sensor id
    *
    * @return null
    *
    * @dataProvider dataControlChannels
    */
    public function testControlChannels(
        $config, $class, $driverExpect, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $sen = $obj->controlChannels();
        $this->assertInstanceOf(
            $driverExpect, $sen,
            "Return is not a ".$driverExpect
        );
        unset($obj);
    }
    /**
    * This tests the object creation
    *
    * @return null
    */
    public function testDataChannel()
    {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $sen = $obj->dataChannel(0);
        $this->assertInstanceOf(
            "\\HUGnet\\devices\\DataChan",
            $sen
        );
        unset($obj);
    }
    /**
    * This tests the object creation
    *
    * @return null
    */
    public function testControlChannel()
    {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $sen = $obj->controlChannel(0);
        $this->assertInstanceOf(
            "\\HUGnet\\devices\\ControlChan",
            $sen
        );
        unset($obj);
    }
    /**
    * Data provider for testHistoryFactory
    *
    * @return array
    */
    public static function dataHistoryFactory()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                    ),
                    "EDEFAULTHistory" => array(
                        "get" => array(
                            "test" => "EDEFAULTHistory",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                array(
                ),
                true,
                'EDEFAULTHistory',
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "",
                            "id" => 2,
                        ),
                    ),
                    "EDEFAULTAverage" => array(
                        "get" => array(
                            "test" => "EDEFAULTAverage",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                array(
                ),
                false,
                'EDEFAULTAverage',
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config  The configuration to use
    * @param mixed $class   This is either the name of a class or an object
    * @param array $data    The data to build the history record with.
    * @param bool  $history History if true, average if false
    * @param mixed $expect  The value we expect back
    *
    * @return null
    *
    * @dataProvider dataHistoryFactory
    */
    public function testHistoryFactory(
        $config, $class, $data, $history, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $hist = $obj->historyFactory($data, $history);
        $this->assertSame($expect, $hist->get("test"));
        unset($obj);
    }

    /**
    * data provider for testGetHardwareTypes
    *
    * @return array
    */
    public static function dataGetHardwareTypes()
    {
        return array(
            array(
                array(
                ),
                1,
                array('HWPartNum', 'Parameters', 'Obsolete', 'Notes'),
                array(
                    "ARCH", "CPU", "VCC"
                ),
            ),
            array(
                array(
                ),
                0,
                array('HWPartNum', 'Parameters', 'Obsolete', 'Notes'),
                array(
                    "ARCH", "CPU", "VCC", "Firmware"
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload    The stuff to give to the constructor
    * @param string $obsolete   The string to use for the input
    * @param array  $expect     The expected data
    * @param array  $parameters The parameters to test
    *
    * @return null
    *
    * @dataProvider dataGetHardwareTypes
    */
    public function testGetHardwareTypes($preload, $obsolete, $expect, $parameters)
    {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Device::factory($sys, null, $class);
        $ret = $obj->getHardwareTypes($obsolete);
        foreach ($ret as $val) {
            $this->assertEquals($obsolete, $val["Obsolete"], "Obsolete is wrong");
            foreach ($expect as $k) {
                $this->assertTrue(
                    isset($val[$k]), "'$k' is missing in ".$val["HWPartNum"]
                );
            }
            foreach ($parameters as $k) {
                $this->assertTrue(
                    isset($val["Param"][$k]),
                    "Param '$k' is missing in ".$val["HWPartNum"]
                );
            }
        }
    }
}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.10.2
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceTestDriver1
{
    /**
    * This function creates the system.
    *
    * @param object &$device The device class
    * @param string $driver  The driver to load
    *
    * @return null
    */
    public static function &factory(&$device, $driver)
    {
        $object = new DeviceTestDriver1;
        $object->device = &$device;
        $object->driver = $driver;
        return $object;
    }
}
/** This is the HUGnet namespace */
namespace HUGnet\devices\roles;
/** This is the base of our base class */
require_once CODE_BASE."base/Role.php";
/** This is the base of our Interface */
require_once CODE_BASE."devices/roles/RoleInterface.php";

/**
 * Base driver class for devices.
 *
 * This class deals with loading the drivers and figuring out what driver needs
 * to be loaded.
 *
 * @category   Libraries
 * @package    HUGnetLib
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.11.0
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.11.0
 *
 * @SuppressWarnings(PHPMD.NumberOfChildren)
 */
class DeviceTestRole extends \HUGnet\base\Role
    implements RoleInterface
{
    /**
    *  This is the input table data
    */
    protected $input = array(
        0 => array(
            "table" => array(
                "driver" => "41:DEFAULT",
                "name" => "Intput 0",
            ),
            "data" => array(
                "id" => 0x61,
                "extra" => array(3,2,1),
                "location" => "Input 0",
                "type" => "ASDF",
            ),
        ),
        1 => array(
            "table" => array(
                "driver" => "42:DEFAULT",
                "name" => "Input 1",
            ),
            "data" => array(
                "id" => 0x83,
                "extra" => array(1,2,3),
                "location" => "Input1",
                "type" => "FSDA",
            ),
        ),
    );
    /**
    *  This is the output table data
    */
    protected $output = array(
        0 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(0, 1),
                "location" => "Output 0",
                "id"     => 0x32,
                "type"   => "ASDF",
            ),
        ),
        1 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(1, 1),
                "location" => "Output 1",
                "id"     => 0x31,
                "type"   => "FSDA",
            ),
        ),
    );
    /**
    *  This is the process table data
    */
    protected $process = array(
        0 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(0, 1, 2),
                "location" => "Process 0",
                "id"     => 0x81,
                "type"   => "ASDF",
            ),
        ),
        1 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(2, 1, 0),
                "location" => "Process 1",
                "id"     => 0x23,
                "type"   => "FSDA",
            ),
        ),
    );
}

?>
