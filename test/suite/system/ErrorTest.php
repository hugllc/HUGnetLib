<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'system/Error.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.8
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ErrorTest extends \PHPUnit_Framework_TestCase
{
    /** @var The system object */
    protected $sys = null;
    /** @var The table object */
    protected $table = null;
    /** @var The test object */
    protected $o = null;
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->sys = new DummyBase("System");
        $this->sys->resetMock(
            array(
                "System" => array(
                    "now" => 1234,
                ),
            )
        );
        $this->table = new DummyTable("ErrorTable");
        $this->o = Error::factory($this->sys, null, $this->table);
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        parent::tearDown();
    }
    /**
    * Data provider for testLog
    *
    * @return array
    */
    public static function dataLog()
    {
        return array(
            array(
                array(
                    "System" => array(
                        "now" => 1234,
                    ),
                ),
                1,
                "Message",
                2,
                "Method",
                "Class",
                array(
                    "ErrorTable" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "class" => "Class",
                                    "method" => "Method",
                                    "errno" => 1,
                                    "error" => "Message",
                                    "Date" => 1234,
                                    "Severity" => 2,
                                ),
                            ),
                        ),
                        "insertRow" => array(array(true)),
                    ),
                    "System" => array(
                        "now" => array(array()),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $system   The configuration to use
    * @param mixed  $errno    The error number.  Could be a string or number
    * @param string $errmsg   The error message
    * @param string $severity The severity of the message
    * @param string $method   Should be filled with __METHOD__
    * @param string $class    The classs calling the error
    * @param array  $expect   The table to expect
    *
    * @return null
    *
    * @dataProvider dataLog
    */
    public function testLog(
        $system, $errno, $errmsg, $severity, $method, $class, $expect
    ) {
        $this->sys->resetMock($system);
        $obj = Error::factory($this->sys, null, $this->table);
        $obj->log($errno, $errmsg, $severity, $method, $class);
        $this->assertEquals($expect, $this->table->retrieve(), "Data Wrong");
    }
    /**
    * Data provider for testThrowException
    *
    * @return array
    */
    public static function dataException()
    {
        return array(
            array("Test Message", "BadStuff", "RuntimeException"),
            array("Test Message", "Logic", "LogicException"),
        );
    }
    /**
    * This tests the object creation
    *
    * @param string $msg    The message
    * @param int    $type   The error code
    * @param array  $expect The table to expect
    *
    * @return null
    *
    * @dataProvider dataException
    */
    public function testException($msg, $type, $expect)
    {
        if (is_string($expect)) {
            $this->setExpectedException($expect, $msg);
        }
        $this->o->exception($msg, $type);
        $this->assertTrue(!is_string($expect));
    }


}
?>
