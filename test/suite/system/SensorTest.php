<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Sensor.php';
/** This is a required class */
require_once CODE_BASE.'sensors/Driver.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is our units class */
require_once CODE_BASE."units/Driver.php";

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SensorTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        \HUGnet\sensors\Driver::register("FD:DEFAULT", "TestSensorDriver1");
        \HUGnet\sensors\Driver::register("FC:DEFAULT", "TestSensorDriver2");
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(
                new DummySystem(),
                null,
                "DummyTable",
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
            ),
            array(
                new DummySystem(),
                array("dev" => 2, "sensor" => 0),
                new DummyTable(),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config  The configuration to use
    * @param mixed $gateway The gateway to set
    * @param mixed $class   This is either the name of a class or an object
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $gateway, $class)
    {
        $table = new DummyTable();
        // This just resets the mock
        $table->resetMock();
        $obj = Sensor::factory($config, $gateway, $class);
        // Make sure we have the right object
        $this->assertTrue((get_class($obj) === "HUGnet\Sensor"), "Class wrong");
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataJson()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xFD,
                        ),
                        "toArray" => array(
                            "id" => 0xFD,
                            "asdf" => 3,
                            "params" => json_encode(array(1,2,3,4)),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                json_encode(
                    array(
                        "longName" => "Silly Sensor Driver 1",
                        "shortName" => "SSD1",
                        "unitType" => "Temperature",
                        "bound" => false,
                        "virtual" => false,
                        "total" => false,
                        "extraText" => array("Silliness Factor", "Storage Unit"),
                        "extraDefault" => array(2210, '&#176;C'),
                        "extraValues" => array(5, array('&#176;C', '&#176;F', 'K')),
                        "storageUnit" => "&#176;C",
                        "storageType" => \HUGnet\units\Driver::TYPE_RAW,
                        "maxDecimals" => 4,
                        "dataTypes" => array(
                            \HUGnet\units\Driver::TYPE_RAW
                                => \HUGnet\units\Driver::TYPE_RAW,
                            \HUGnet\units\Driver::TYPE_DIFF
                                => \HUGnet\units\Driver::TYPE_DIFF,
                            \HUGnet\units\Driver::TYPE_IGNORE
                                => \HUGnet\units\Driver::TYPE_IGNORE,
                        ),
                        "defMin" => 0,
                        "defMax" => 150,
                        "inputSize" => 3,
                        'id' => 0xFD,
                        'asdf' => 3,
                        'params' => array(1,2,3,4),
                        'type' => "TestSensorDriver1",
                        'otherTypes' => array(
                            "DEFAULT" => "TestSensorDriver1",
                        ),
                        'validUnits' => array(
                            "&#176;F" => "&#176;F",
                            "&#176;C" => "&#176;C",
                            "K" => "K"
                        ),
                    )
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $class  This is either the name of a class or an object
    * @param mixed $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataJson
    */
    public function testJson(
        $config, $class, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $json = $obj->json();
        $this->assertSame($expect, $json);
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "driver" => "SDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "id",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "driver" => "SDEFAULT",
                            "id" => 1,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "longName",
                "Unknown Sensor",
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "driver" => "TestSensorDriver1",
                            "id" => 0xFD,
                            "extra" => array("a", "b"),
                        ),
                        "toArray" => array(
                            "extra" => array("a", "b"),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "storageUnit",
                "b",
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $this->assertSame($expect, $obj->get($field));
        unset($obj);
    }
    /**
    * Data provider for testLoad
    *
    * @return array
    */
    public static function dataLoad()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xFA,
                            "type" => "raw",
                            "sensor" => 5,
                        ),
                    ),
                ),
                new DummyTable(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                array(
                    "Table" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "id" => 5,
                                    "name" => 3,
                                    "value" => 1,
                                ),
                            ),
                        ),
                        'get' => array(
                            array("id"),
                            array("type"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("units"),
                            array("sensor"),
                            array("extra"),
                            array("sensor"),
                            array("min"),
                            array("max"),
                            array("sensor"),
                            array("sensor"),
                        ),
                        'set' => array(
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array("units", "unknown"),
                            array("extra", array()),
                            array("min", 0),
                            array("max", 150),
                        ),
                        "clearData" => array(array(), array()),
                        "selectOneInto" => array(
                            array(
                                "`id` = ? AND `name` = ? AND `value` = ?",
                                array(5, 3, 1),
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => true,
                    ),
                ),
                new DummyTable("Table"),
                array("dev" => 2, "sensor" => 0),
                array(
                    "Table" => array(
                        "selectOneInto" => array(
                            array(
                                "`dev` = ? AND `sensor` = ?",
                                array(2, 0),
                            ),
                        ),
                        "clearData" => array(array(), array()),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => false,
                        "get" => array(
                            "id" => 0xFA,
                            "type" => "raw",
                            "sensor" => 5,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                array("dev" => 2, "sensor" => 0),
                array(
                    "Table" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "dev" => 2,
                                    "sensor" => 0,
                                ),
                            ),
                        ),
                        'get' => array(
                            array("id"),
                            array("type"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("units"),
                            array("sensor"),
                            array("extra"),
                            array("sensor"),
                            array("min"),
                            array("max"),
                            array("sensor"),
                            array("sensor"),
                        ),
                        'set' => array(
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array("units", "unknown"),
                            array("extra", array()),
                            array("min", 0),
                            array("max", 150),
                        ),
                        "selectOneInto" => array(
                            array(
                                "`dev` = ? AND `sensor` = ?",
                                array(2, 0),
                            ),
                        ),
                        "clearData" => array(array(), array()),
                    ),
                ),
                true,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param object $config      The configuration to use
    * @param object $class       The table class to use
    * @param mixed  $data        The gateway data to set
    * @param array  $expectTable The table to expect
    * @param bool   $return      The expected return
    *
    * @return null
    *
    * @dataProvider dataLoad
    */
    public function testLoad($config, $class, $data, $expectTable, $return)
    {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $ret = $obj->load($data);
        $this->assertSame($return, $ret, "Return Wrong");
        $this->assertEquals($expectTable, $class->retrieve(), "Data Wrong");
    }
    /**
    * Data provider for testLoad
    *
    * @return array
    */
    public static function dataChange()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xFA,
                            "type" => "raw",
                            "sensor" => 5,
                        ),
                    ),
                ),
                new DummyTable(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                array(
                    "Table" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "id" => 5,
                                    "name" => 3,
                                    "value" => 1,
                                ),
                            ),
                        ),
                        "updateRow" => array(array()),
                        'get' => array(
                            array("id"),
                            array("type"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("units"),
                            array("sensor"),
                            array("extra"),
                            array("sensor"),
                            array("min"),
                            array("max"),
                            array("sensor"),
                            array("sensor"),
                        ),
                        'set' => array(
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array('units', 'unknown'),
                            array("extra", array()),
                            array('min', 0),
                            array('max', 150),
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => true,
                        "get" => array(
                            'extra' => array(1,2,3,4,5,6,7,8),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                array("dev" => 2, "sensor" => 0, "extra" => array(1,2,3,4,5,6,7,8)),
                array(
                    "Table" => array(
                        'fromAny' => array(
                            array(
                                array(
                                    'dev' => 2,
                                    'sensor' => 0,
                                    "extra" => array(1,2,3,4,5,6,7,8),
                                ),
                            )
                        ),
                        'updateRow' => array(array()),
                        'get' => array(
                            array("id"),
                            array("type"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("id"),
                            array("type"),
                            array("sensor"),
                            array("units"),
                            array("sensor"),
                            array("extra"),
                            array("sensor"),
                            array("min"),
                            array("max"),
                            array("sensor"),
                            array("sensor"),
                        ),
                        'set' => array(
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array("driver", "SDEFAULT"),
                            array(
                                'units', 'unknown'
                            ),
                            array(
                                'extra', array()
                            ),
                            array(
                                'min', 0
                            ),
                            array(
                                'max', 150
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => false,
                    ),
                ),
                new DummyTable("Table"),
                false,
                array(
                ),
                false,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param object $config      The configuration to use
    * @param object $class       The table class to use
    * @param mixed  $data        The gateway data to set
    * @param array  $expectTable The table to expect
    * @param bool   $return      The expected return
    *
    * @return null
    *
    * @dataProvider dataChange
    */
    public function testChange($config, $class, $data, $expectTable, $return)
    {
        $sys = new DummySystem("System");
        $obj = Sensor::factory($sys, null, $class);
        $sys->resetMock($config);
        $ret = $obj->change($data);
        $this->assertSame($return, $ret, "Return Wrong");
        $this->assertEquals($expectTable, $class->retrieve(), "Data Wrong");
    }
    /**
    * data provider for testSensor
    *
    * @return array
    */
    public static function dataDecodeData()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xFD,
                            "type" => "TestSensorDriver1",
                            "unitType" => "Pressure",
                            "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                            "storageUnit" => "psi",
                        ),
                        "toArray" => array(
                            "id" => 0xFD,
                            "type" => "TestSensorDriver1",
                            "extra" => array(),
                            "unitType" => "Pressure",
                            "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                            "storageUnit" => "psi",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "6F4401ABCDEF",
                300,
                12345,
                array(
                    array(
                        "value" => 25.2134,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 28.5282,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 12.3455,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 82.1253,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                ),
                array(
                    "value" => 166110,
                    "units" => "&#176;C",
                    "unitType" => "Temperature",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                ),
                "ABCDEF",
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xFD,
                            "type" => "TestSensorDriver1",
                            "dataType" => \HUGnet\units\Driver::TYPE_DIFF,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "AE0100123456",
                300,
                0x12345,
                array(
                    array(
                        "value" => 25.2134,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 28.5282,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 12.3455,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 82.1253,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                ),
                array(
                    "value" => 860,
                    "units" => "&#176;C",
                    "unitType" => "Temperature",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                ),
                "123456",
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xFC,
                            "type" => "TestSensorDriver2",
                            "dataType" => \HUGnet\units\Driver::TYPE_DIFF,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "640000",
                300,
                array(
                    "value" => 12.5,
                    "units" => "&#176;C",
                    "unitType" => "Temperature",
                    "dataType" => \HUGnet\units\Driver::TYPE_DIFF,
                    "raw" => 50,
                ),
                array(
                    array(
                        "value" => 25.2134,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 28.5282,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 12.3455,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 82.1253,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                ),
                array(
                    "value" => 25,
                    "units" => "&#176;C",
                    "unitType" => "Temperature",
                    "dataType" => \HUGnet\units\Driver::TYPE_DIFF,
                    "raw" => 100,
                ),
                "",
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param object $config    The configuration to use
    * @param object $class     The table class to use
    * @param string $string    String returned by the device
    * @param float  $deltaT    The time delta in seconds between this record
    * @param array  $prev      The previous reading
    * @param array  $data      The data from the other sensors that were crunched
    * @param array  $expect    The expected data
    * @param array  $strExpect The expected string afterwards
    *
    * @return null
    *
    * @dataProvider dataDecodeData
    */
    public function testDecodeData(
        $config, $class, $string, $deltaT, $prev, $data, $expect, $strExpect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $ret = $obj->decodeData($string, $deltaT, $prev, $data);
        $this->assertEquals($expect, $ret, "Return wrong");
        $this->assertSame($strExpect, $string, "String wrong");
    }
    /**
    * data provider for testConvertUnits
    *
    * @return array
    */
    public static function dataConvertUnits()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0x04,
                            "type" => "",
                            "units" => "&#176;F",
                            "decimals" => 2,
                        )
                    ),
                ),
                new DummyTable("Table"),
                array(
                    "value" => 0.0,
                    "units" => "&#176;C",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                "K",
                array(
                    "value" => 273.15,
                    "units" => "K",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0x04,
                            "type" => "",
                            "units" => "&#176;F",
                            "decimals" => 2,
                        )
                    ),
                ),
                new DummyTable("Table"),
                array(
                    "value" => 0.0,
                    "units" => "&#176;C",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                null,
                array(
                    "value" => 32.0,
                    "units" => "&#176;F",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0x04,
                            "type" => "",
                            "units" => "&#176;F",
                            "decimals" => 2,
                        )
                    ),
                ),
                new DummyTable("Table"),
                array(
                    "value" => 12.0,
                    "units" => "&#176;C",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                "psi",
                array(
                    "value" => 12.0,
                    "units" => "&#176;C",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                false,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0x04,
                            "type" => "",
                            "units" => "&#176;F",
                            "decimals" => 2,
                        )
                    ),
                ),
                new DummyTable("Table"),
                array(
                    "value" => null,
                    "units" => "&#176;C",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                "&#176;F",
                array(
                    "value" => null,
                    "units" => "&#176;C",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    "unitType" => "Temperature",
                ),
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param object $config The configuration to use
    * @param object $class  The table class to use
    * @param mixed  $data   The value to send
    * @param string $units  The units to convert to
    * @param string $expect The expected data
    * @param bool   $ret    The return value expected
    *
    * @return null
    *
    * @dataProvider dataConvertUnits
    */
    public function testConvertUnits($config, $class, $data, $units, $expect, $ret)
    {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $this->assertSame(
            $ret,
            $obj->convertUnits($data, $units),
            "The return value is wrong"
        );
        $this->assertSame($expect, $data, "Data is wrong");
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataEncode()
    {
        return array(
            array(
                new DummySystem(),
                null,
                "DummyTable",
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => "01",
                        ),
                    ),
                ),
                "05",
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $device The device to set
    * @param mixed  $class  This is either the name of a class or an object
    * @param array  $mocks  The mocks to use
    * @param string $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataEncode
    */
    public function testEncode(
        $config, $device, $class, $mocks, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Sensor::factory($config, $device, $class);
        $this->assertEquals(
            $expect, $obj->encode(), "Return Wrong"
        );
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataDecode()
    {
        return array(
            array(
                new DummySystem(),
                null,
                "DummyTable",
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => 1,
                        ),
                    ),
                ),
                "051234",
                array(
                    array("id", 5),
                    array("driver", "SDEFAULT"),
                    array("driver", "SDEFAULT"),
                    array("driver", "SDEFAULT"),
                    array("driver", "SDEFAULT"),
                    array("units", "unknown"),
                    array("extra", array()),
                    array("min", 0),
                    array("max", 150),
                ),
            ),
            array(
                new DummySystem(),
                null,
                "DummyTable",
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => 1,
                        ),
                    ),
                ),
                "05",
                array(
                    array("id", 5),
                    array("driver", "SDEFAULT"),
                    array("driver", "SDEFAULT"),
                    array("driver", "SDEFAULT"),
                    array("units", "unknown"),
                    array("extra", array()),
                    array("min", 0),
                    array("max", 150),
                ),
            ),
            array(
                new DummySystem(),
                null,
                "DummyTable",
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 5,
                            "HWPartNum"    => "0039-12-01-C",
                            "FWPartNum"    => "0039-20-03-C",
                            "FWVersion"    => "1.2.3",
                            "DeviceGroup"  => "FFFFFF",
                            "TimeConstant" => 1,
                        ),
                    ),
                ),
                "", // This is a bad input.
                null,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $device The device to set
    * @param mixed  $class  This is either the name of a class or an object
    * @param array  $mocks  The mocks to use
    * @param string $string The string to feed into the decode
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataDecode
    */
    public function testDecode(
        $config, $device, $class, $mocks, $string, $expect
    ) {
        $config->resetMock($mocks);
        $obj = Sensor::factory($config, $device, $class);
        $obj->decode($string);
        $ret = $config->retrieve();
        $this->assertEquals(
            $expect, $ret["Table"]["set"], "Calls Wrong"
        );
        unset($obj);
    }
}

namespace HUGnet\sensors\drivers;

/**
 * Default sensor driver
 *
 * @category   Libraries
 * @package    HUGnetLib
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.9.7
 *
 * @SuppressWarnings(PHPMD.ShortVariable)
 */
class TestSensorDriver1 extends \HUGnet\sensors\Driver
{
    /**
    * This is where the data for the driver is stored.  This array must be
    * put into all derivative classes, even if it is empty.
    */
    protected static $params = array(
        "longName" => "Silly Sensor Driver 1",
        "shortName" => "SSD1",
        "unitType" => "Temperature",
        "storageUnit" => 'getExtra1',
        "storageType" => \HUGnet\units\Driver::TYPE_RAW,  // Storage dataType
        "extraText" => array("Silliness Factor", "Storage Unit"),
        // Integer is the size of the field needed to edit
        // Array   is the values that the extra can take
        // Null    nothing
        "extraValues" => array(5, array('&#176;C', '&#176;F', 'K')),
        "extraDefault" => array(2210, '&#176;C'),
        "maxDecimals" => 4,
    );
    /**
    * This function creates the system.
    *
    * @return null
    */
    public static function &factory()
    {
        return parent::intFactory();
    }
    /**
    * Changes a raw reading into a output value
    *
    * @param int   $A       Output of the A to D converter
    * @param array &$sensor The sensor information
    * @param float $deltaT  The time delta in seconds between this record
    * @param array &$data   The data from the other sensors that were crunched
    * @param mixed $prev    The previous value for this sensor
    *
    * @return mixed The value in whatever the units are in the sensor
    *
    * @SuppressWarnings(PHPMD.UnusedFormalParameter)
    */
    public function getReading(
        $A, &$sensor, $deltaT = 0, &$data = array(), $prev = null
    ) {
        return $A * 2;
    }

}
/**
 * Default sensor driver
 *
 * @category   Libraries
 * @package    HUGnetLib
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.9.7
 *
 * @SuppressWarnings(PHPMD.ShortVariable)
 */
class TestSensorDriver2 extends \HUGnet\sensors\Driver
{
    /**
    * This is where the data for the driver is stored.  This array must be
    * put into all derivative classes, even if it is empty.
    */
    protected static $params = array(
        "longName" => "Silly Sensor Driver 2",
        "shortName" => "SSD2",
        "unitType" => "Temperature",
        "storageUnit" => 'getExtra1',
        "storageType" => \HUGnet\units\Driver::TYPE_DIFF,  // Storage dataType
        "extraText" => array("Silliness Factor", "Storage Unit"),
        // Integer is the size of the field needed to edit
        // Array   is the values that the extra can take
        // Null    nothing
        "extraValues" => array(5, array('&#176;C', '&#176;F', 'K')),
        "extraDefault" => array(2210, '&#176;C'),
        "maxDecimals" => 4,
    );
    /**
    * This function creates the system.
    *
    * @return null
    */
    public static function &factory()
    {
        return parent::intFactory();
    }
    /**
    * Changes a raw reading into a output value
    *
    * @param int   $A       Output of the A to D converter
    * @param array &$sensor The sensor information
    * @param float $deltaT  The time delta in seconds between this record
    * @param array &$data   The data from the other sensors that were crunched
    * @param mixed $prev    The previous value for this sensor
    *
    * @return mixed The value in whatever the units are in the sensor
    *
    * @SuppressWarnings(PHPMD.UnusedFormalParameter)
    */
    public function getReading(
        $A, &$sensor, $deltaT = 0, &$data = array(), $prev = null
    ) {
        return $A / 2;
    }

}


?>
