<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Sensor.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is our units class */
require_once CODE_BASE."units/Driver.php";

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SensorTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(
                new DummySystem(),
                null,
                "DummyTable",
                array(
                    "Table" => array(
                        "clearData" => array(array()),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                    "Table" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "id" => 5,
                                    "name" => 3,
                                    "value" => 1,
                                ),
                            ),
                        ),
                        'get' => array(
                            array("units"),
                            array("id"),
                            array("type"),
                        ),
                        'set' => array(
                            array("units", "unknown"),
                        ),
                        "clearData" => array(array()),
                    ),
                ),
            ),
            array(
                new DummySystem(),
                array("dev" => 2, "sensor" => 0),
                new DummyTable(),
                array(
                    "Table" => array(
                        "selectOneInto" => array(
                            array(
                                "dev = ? AND sensor = ?",
                                array(2, 0),
                            ),
                        ),
                        "clearData" => array(array()),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config      The configuration to use
    * @param mixed $gateway     The gateway to set
    * @param mixed $class       This is either the name of a class or an object
    * @param array $expectTable The table to expect
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $gateway, $class, $expectTable)
    {
        $table = new DummyTable();
        // This just resets the mock
        $table->resetMock();
        $obj = Sensor::factory($config, $gateway, $class);
        // Make sure we have the right object
        $this->assertTrue((get_class($obj) === "HUGnet\Sensor"), "Class wrong");
        if (is_object($table)) {
            $this->assertEquals($expectTable, $table->retrieve(), "Data Wrong");
        }
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataJson()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "Driver" => "EDEFAULT",
                            "id" => 2,
                        ),
                        "toArray" => array(
                            "id" => 0x41,
                            "asdf" => 3,
                            "params" => json_encode(array(1,2,3,4)),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                json_encode(
                    array(
                        "longName" => "Unknown Sensor",
                        "shortName" => "Unknown",
                        "unitType" => "unknown",
                        "bound" => false,
                        "virtual" => false,
                        "total" => false,
                        "extraText" => array(),
                        "extraDefault" => array(),
                        "extraValues" => array(),
                        "storageUnit" => "unknown",
                        "storageType" => \HUGnet\units\Driver::TYPE_RAW,
                        "maxDecimals" => 2,
                        'id' => 0x41,
                        'asdf' => 3,
                        'params' => array(1,2,3,4),
                        'type' => "SDEFAULT",
                        'otherTypes' => array(
                            "DEFAULT" => "ADuCVoltage",
                            "ADuCPressure" => "ADuCPressure",
                        ),
                        'validUnits' => array("unknown" => "unknown"),
                    )
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $class  This is either the name of a class or an object
    * @param mixed $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataJson
    */
    public function testJson(
        $config, $class, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $json = $obj->json();
        $this->assertSame($expect, $json);
        unset($obj);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "driver" => "SDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "id",
                2,
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "driver" => "SDEFAULT",
                            "id" => 2,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                "longName",
                "Unknown Sensor",
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array  $config The configuration to use
    * @param mixed  $class  This is either the name of a class or an object
    * @param string $field  The field to get
    * @param mixed  $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet(
        $config, $class, $field, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $this->assertSame($expect, $obj->get($field));
        unset($obj);
    }
    /**
    * Data provider for testLoad
    *
    * @return array
    */
    public static function dataLoad()
    {
        return array(
            array(
                array(
                ),
                new DummyTable(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                array(
                    "Table" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "id" => 5,
                                    "name" => 3,
                                    "value" => 1,
                                ),
                            ),
                        ),
                        'get' => array(
                            array("units"),
                            array("id"),
                            array("type"),
                        ),
                        'set' => array(
                            array("units", "unknown"),
                        ),
                        "clearData" => array(array(), array()),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => true,
                    ),
                ),
                new DummyTable("Table"),
                array("dev" => 2, "sensor" => 0),
                array(
                    "Table" => array(
                        "selectOneInto" => array(
                            array(
                                "dev = ? AND sensor = ?",
                                array(2, 0),
                            ),
                        ),
                        "clearData" => array(array(), array()),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => false,
                    ),
                ),
                new DummyTable("Table"),
                array("dev" => 2, "sensor" => 0),
                array(
                    "Table" => array(
                        "selectOneInto" => array(
                            array(
                                "dev = ? AND sensor = ?",
                                array(2, 0),
                            ),
                        ),
                        "clearData" => array(array(), array()),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param object $config      The configuration to use
    * @param object $class       The table class to use
    * @param mixed  $data        The gateway data to set
    * @param array  $expectTable The table to expect
    * @param bool   $return      The expected return
    *
    * @return null
    *
    * @dataProvider dataLoad
    */
    public function testLoad($config, $class, $data, $expectTable, $return)
    {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $ret = $obj->load($data);
        $this->assertSame($return, $ret, "Return Wrong");
        $this->assertEquals($expectTable, $class->retrieve(), "Data Wrong");
    }
    /**
    * Data provider for testLoad
    *
    * @return array
    */
    public static function dataChange()
    {
        return array(
            array(
                array(
                ),
                new DummyTable(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                array(
                    "Table" => array(
                        "fromAny" => array(
                            array(
                                array(
                                    "id" => 5,
                                    "name" => 3,
                                    "value" => 1,
                                ),
                            ),
                        ),
                        "updateRow" => array(array()),
                        'get' => array(
                            array(
                                'id',
                            ),
                            array(
                                'type',
                            ),
                            array(
                                'id',
                            ),
                            array(
                                'type'
                            ),
                            array(
                                'units'
                            ),
                            array(
                                'id'
                            ),
                            array(
                                'type'
                            ),
                            array(
                                'extra'
                            ),
                            array(
                                'id'
                            ),
                            array(
                                'type'
                            ),
                        ),
                        'set' => array(
                            array(
                                'units', 'unknown'
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => true,
                        "get" => array(
                            'extra' => array(1,2,3,4,5,6,7,8),
                        ),
                    ),
                ),
                new DummyTable("Table"),
                array("dev" => 2, "sensor" => 0, "extra" => array(1,2,3,4,5,6,7,8)),
                array(
                    "Table" => array(
                        'fromAny' => array(
                            array(
                                array(
                                    'dev' => 2,
                                    'sensor' => 0,
                                    "extra" => array(1,2,3,4,5,6,7,8),
                                ),
                            )
                        ),
                        'updateRow' => array(array()),
                        'get' => array(
                            array(
                                'id',
                            ),
                            array(
                                'type',
                            ),
                            array(
                                'id',
                            ),
                            array(
                                'type'
                            ),
                            array(
                                'units'
                            ),
                            array(
                                'id'
                            ),
                            array(
                                'type'
                            ),
                            array(
                                'extra'
                            ),
                            array(
                                'id'
                            ),
                            array(
                                'type'
                            ),
                        ),
                        'set' => array(
                            array(
                                'units', 'unknown'
                            ),
                            array(
                                'extra', array()
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Table" => array(
                        "selectOneInto" => false,
                    ),
                ),
                new DummyTable("Table"),
                false,
                array(
                ),
                false,
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param object $config      The configuration to use
    * @param object $class       The table class to use
    * @param mixed  $data        The gateway data to set
    * @param array  $expectTable The table to expect
    * @param bool   $return      The expected return
    *
    * @return null
    *
    * @dataProvider dataChange
    */
    public function testChange($config, $class, $data, $expectTable, $return)
    {
        $sys = new DummySystem("System");
        $obj = Sensor::factory($sys, null, $class);
        $sys->resetMock($config);
        $ret = $obj->change($data);
        $this->assertSame($return, $ret, "Return Wrong");
        $this->assertEquals($expectTable, $class->retrieve(), "Data Wrong");
    }
    /**
    * data provider for testSensor
    *
    * @return array
    */
    public static function dataDecodeData()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0x41,
                            "type" => "ADuCPressure",
                        ),
                    ),
                ),
                new DummyTable("Table"),
                0x23451,
                300,
                0x12345,
                array(
                    array(
                        "value" => 25.2134,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 28.5282,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 12.3455,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 82.1253,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                ),
                array(
                    "value" => 41.7451,
                    "units" => "psi",
                    "unitType" => "Pressure",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                ),
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0x41,
                            "type" => "ADuCPressure",
                            "dataType" => \HUGnet\units\Driver::TYPE_DIFF,
                        ),
                    ),
                ),
                new DummyTable("Table"),
                0x23451,
                300,
                0x12345,
                array(
                    array(
                        "value" => 25.2134,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 28.5282,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 12.3455,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                    array(
                        "value" => 82.1253,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                    ),
                ),
                array(
                    "value" => 41.7451,
                    "units" => "psi",
                    "unitType" => "Pressure",
                    "dataType" => \HUGnet\units\Driver::TYPE_RAW,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param object $config The configuration to use
    * @param object $class  The table class to use
    * @param int    $A      Output of the A to D converter
    * @param float  $deltaT The time delta in seconds between this record
    * @param array  $prev   The previous reading
    * @param array  $data   The data from the other sensors that were crunched
    * @param array  $expect The expected data
    *
    * @return null
    *
    * @dataProvider dataDecodeData
    */
    public function testDecodeData(
        $config, $class, $A, $deltaT, $prev, $data, $expect
    ) {
        $sys = new DummySystem("System");
        $sys->resetMock($config);
        $obj = Sensor::factory($sys, null, $class);
        $ret = $obj->decodeData($A, $deltaT, $prev, $data);
        $this->assertEquals($expect, $ret);
    }
}
?>
