<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Socket.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySocket.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SocketTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataSocket()
    {
        return array(
            array(  // #0
                array(
                ),
                array(
                    "default" => array(
                        "driver" => "DummySocket",
                    ),
                ),
                "default",
                array(
                ),
                "HUGnet\DummySocket",
                null,
            ),
            array(  // #1 Bad socket driver
                array(
                ),
                array(
                    "default" => array(
                        "driver" => "",
                    ),
                ),
                "default",
                array(
                ),
                "HUGnet\DummySocket",
                "Exception",
            ),
            array(  // #2 Already set up class
                array(
                ),
                array(
                    "default" => new DummySocket("defaultSocket"),
                ),
                "default",
                array(
                ),
                "HUGnet\DummySocket",
                null,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $system    The string to give to the class
    * @param array  $config    The configuration to send the class
    * @param string $socket    The socket to try to get
    * @param array  $expect    The info to expect returned
    * @param string $class     The class to expect returned
    * @param string $exception The exception to expect.  Null for none
    *
    * @return null
    *
    * @dataProvider dataSocket()
    */
    public function testSocket(
        $system, $config, $socket, $expect, $class, $exception
    ) {
        if (!is_null($exception)) {
            $this->setExpectedException($exception);
        }
        $sys = new DummyBase("HUGnetSystem");
        $sys->resetMock($system);
        $sock = &Socket::factory($sys, $config);
        $this->assertSame($class, get_class($sock->socket($socket)), "Class wrong");
        $this->assertEquals($expect, $sys->retrieve(), "Calls wrong");
        // This checks to make sure it is always returning the same socket
        $this->assertSame(
            $sock->socket($socket),
            $sock->socket($socket),
            "Wrong socket returned"
        );
    }

}
?>
