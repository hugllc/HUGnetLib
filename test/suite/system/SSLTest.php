<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'system/SSL.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SSLTest extends \PHPUnit_Framework_TestCase
{
    /** @var The system object */
    protected $sys = null;
    /** @var The table object */
    protected $table = null;
    /** @var The test object */
    protected $o = null;
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->sys = new DummyBase("System");
        $this->sys->resetMock(
            array(
                "System" => array(
                    "now" => 1234,
                    "get" => array(
                        "confdir" => sys_get_temp_dir(),
                        'fqdn'    => 'localhost',
                    ),
                ),
            )
        );
        $this->o = SSL::factory($this->sys, null);
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        parent::tearDown();
        unset($this->o);
        unset($this->sys);
        $this->unlinkSSL(sys_get_temp_dir()."/ssl");
    }
    /**
    * This removes the directory everything is built in
    *
    * @param string $dir The directory to use
    *
    * @access protected
    *
    * @return null
    */
    protected function unlinkSSL($dir) 
    {
        if (file_exists($dir)) {
            $files = array_diff(scandir($dir), array('.','..'));
            foreach ($files as $file) {
                if (is_dir("$dir/$file")) {
                    $this->unlinkSSL("$dir/$file");
                } else {
                    unlink("$dir/$file");
                }
            }
            return rmdir($dir);
        }
        return true;
    }
    /**
    * Data provider for testLog
    *
    * @return array
    */
    public static function dataSetupCA()
    {
        return array(
            array(null),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $system The configuration to use
    *
    * @return null
    *
    * @dataProvider dataSetupCA
    */
    public function testSetupCA(
        $system
    ) {
        if (is_array($system)) {
            $this->sys->resetMock($system);
        }
        $this->o->setupCA();
        $confdir = $this->sys->get("confdir");
        $this->assertFileExists($confdir."/ssl/ca/".SSL::CA_KEY, "Key missing");
        $this->assertFileExists($confdir."/ssl/ca/".SSL::CA_CERT, "Cert missing");
        $this->assertFileExists($confdir."/ssl/ca/".SSL::CA_CSR, "CSR missing");
        $this->assertEquals(
            0600, (fileperms($confdir."/ssl/ca/".SSL::CA_KEY) & 0777),
            "Key perm wrong"
        );
        $this->assertEquals(
            0644, (fileperms($confdir."/ssl/ca/".SSL::CA_CERT) & 0777),
            "Cert perm wrong"
        );
        $this->assertEquals(
            0644, (fileperms($confdir."/ssl/ca/".SSL::CA_CSR) & 0777),
            "CSR Perm wrong"
        );
    }
    /**
    * This tests the object creation
    *
    * @return null
    */
    public function testException()
    {
        $this->setExpectedException("InvalidArgumentException");
        $obj = SSL::factory($system, null);
    }


}
?>
