<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Channels.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ChannelsTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * This tests the exception when a system object is not passed
    *
    * @return null
    */
    public function testCreateThrowException()
    {
        $this->setExpectedException("InvalidArgumentException");
        // This throws an exception because $test is not a object
        Channels::factory($test, $test2);
    }
    /**
    * This tests the exception when a system object is not passed
    *
    * @return null
    */
    public function testCreateThrowException2()
    {
        $test = new DummyTable();
        // This just resets the mock
        $test->resetMock();
        $this->setExpectedException("InvalidArgumentException");
        // This throws an exception because $test is not a object
        Channels::factory($test, $test2);
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(
                new DummySystem(),
                new DummyTable("Device"),
                array(
                    "Device" => array(
                        "get" => array(
                            array("totalSensors"),
                            array("channels"),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config      The configuration to use
    * @param mixed $gateway     The gateway to set
    * @param array $expectTable The table to expect
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $gateway, $expectTable)
    {
        $table = new DummyTable();
        // This just resets the mock
        $table->resetMock();
        $obj = Channels::factory($config, $gateway);
        // Make sure we have the right object
        $this->assertTrue((get_class($obj) === "HUGnet\Channels"), "Class wrong");
        if (is_object($table)) {
            $this->assertEquals($expectTable, $table->retrieve(), "Data Wrong");
        }
    }
    /**
    * Data provider for testGetField
    *
    * @return array
    */
    public static function dataConvert()
    {
        return array(
            array(
                array(
                ),
                array(
                ),
                array(
                ),
                array(
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $record The record to convert
    * @param mixed $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider dataConvert
    */
    public function testConvert(
        $config, $record, $expect
    ) {
        $sys = new DummySystem("System");
        $dev = new DummyTable("Device");
        $sys->resetMock($config);
        $obj = Channels::factory($sys, $dev);
        $ret = $obj->convert($record);
        $this->assertEquals($expect, $ret);
        unset($obj);
    }
    /**
    * Data provider for testGetField
    *
    * @return array
    */
    public static function data2Array()
    {
        return array(
            array(
                array(
                ),
                false,
                array(
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "totalSensors" => 5,
                            "channels" => json_encode(
                                array(
                                    array(
                                        "label" => "Output 0",
                                    ),
                                    array(
                                        "label" => "Output 1",
                                    ),
                                    array(
                                        "label" => "Output 2",
                                    ),
                                    array(
                                        "label" => "Output 3",
                                    ),
                                    array(
                                        "label" => "Output 4",
                                    ),
                                )
                            ),
                        ),
                        "sensor" => array(
                            '0' => new DummyTable("Sensor0"),
                            '1' => new DummyTable("Sensor1"),
                            '2' => new DummyTable("Sensor2"),
                            '3' => new DummyTable("Sensor3"),
                            '4' => new DummyTable("Sensor4"),
                        ),

                    ),
                    "Sensor0" => array(
                        "channels" => array(
                            array(
                                "storageUnit" => "&#176;C",
                                "units" => "&#176;C",
                                "unitType" => "Temperature",
                            ),
                        ),
                    ),
                    "Sensor1" => array(
                        "channels" => array(
                            array(
                                "storageUnit" => "&#176;C",
                                "units" => "&#176;C",
                                "unitType" => "Temperature",
                            ),
                        ),
                    ),
                    "Sensor2" => array(
                        "channels" => array(
                            array(
                                "storageUnit" => "&#176;C",
                                "units" => "&#176;C",
                                "unitType" => "Temperature",
                            ),
                        ),
                    ),
                    "Sensor3" => array(
                        "channels" => array(
                            array(
                                "storageUnit" => "&#176;C",
                                "units" => "&#176;C",
                                "unitType" => "Temperature",
                            ),
                        ),
                    ),
                    "Sensor4" => array(
                        "channels" => array(
                            array(
                                "storageUnit" => "&#176;C",
                                "units" => "&#176;C",
                                "unitType" => "Temperature",
                            ),
                        ),
                    ),
                ),
                false,
                array(
                    array(
                        "storageUnit" => "&#176;C",
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "label" => "Output 0",
                    ),
                    array(
                        "storageUnit" => "&#176;C",
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "label" => "Output 1",
                    ),
                    array(
                        "storageUnit" => "&#176;C",
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "label" => "Output 2",
                    ),
                    array(
                        "storageUnit" => "&#176;C",
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "label" => "Output 3",
                    ),
                    array(
                        "storageUnit" => "&#176;C",
                        "units" => "&#176;C",
                        "unitType" => "Temperature",
                        "label" => "Output 4",
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config  The configuration to use
    * @param mixed $default Whether or not to show the default stuff
    * @param mixed $expect  The value we expect back
    *
    * @return null
    *
    * @dataProvider data2Array
    */
    public function test2Array(
        $config, $default, $expect
    ) {
        $sys = new DummySystem("System");
        $dev = new DummyTable("Device");
        $sys->resetMock($config);
        $obj = Channels::factory($sys, $dev);
        $ret = $obj->toArray($default);
        $this->assertEquals($expect, $ret);
        unset($obj);
    }

}
?>
