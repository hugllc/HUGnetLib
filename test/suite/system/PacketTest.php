<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet;
/** This is a required class */
require_once CODE_BASE.'system/Packet.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class PacketTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataFromString()
    {
        return array(
            array(
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Checksum" => "C3",
                ),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param string $string  The string to give to the class
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataFromString()
    */
    public function testFromString($string, $expect)
    {
        $pkt = Packet::factory($string);
        foreach ((array)$expect as $key => $value) {
            $this->assertSame($value, $pkt[$key], "Key '".$key."' wrong");
        }
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataString()
    {
        return array(
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Checksum" => "C3",
                ),
                "5A5A5A55000ABC0000200401020304C3",
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param string $string The string to give to the class
    * @param array  $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataString()
    */
    public function testString($array, $expect)
    {
        $pkt = Packet::factory($array);
        $this->assertSame($expect, (string)$pkt);
    }

    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataValid()
    {
        return array(
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Checksum" => "C3",
                ),
                true,
            ),
            array(
                "5A5A5A55000ABC0000200401020304C3",
                true,
            ),
            array(
                "5A5A5A55000ABC0000200401020304F4",
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param string $preload The string to give to the class
    * @param array  $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataValid()
    */
    public function testValid($preload, $expect)
    {
        $pkt = Packet::factory($preload);
        $this->assertSame($expect, $pkt->valid());
    }

}
?>
