<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteTables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
/** This is a required class */
require_once CODE_BASE.'tables/DataCollectorsTable.php';
/** This is a required class */
require_once CODE_BASE.'system/Device.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'system/Error.php';
/** This is a required class */
require_once CODE_BASE.'util/Util.php';
/** This is a required class */
require_once TEST_BASE."tables/HUGnetDBTableTestBase.php";
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteTables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DataCollectorsTableTest extends HUGnetDBTableTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "hugnet_database" => "HUGNet",
            "script_gateway" => 4,
            "pluginData" => array(
                5 => "h",
            ),
            "admin_email" => "me@mydomain.com",
            "useSocket" => "dummy",

        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->pdo = &$this->config->servers->getPDO();
        $this->o = new DataCollectorsTable();
        $this->o->create();
        parent::Setup();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            TEST_CONFIG_BASE.'files/DataCollectorsTableTest.xml'
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataColumns()
    {
        $obj = new DataCollectorsTable();
        return HUGnetDBTableTestBase::splitObject($obj, "sqlColumns");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataIndexes()
    {
        $obj = new DataCollectorsTable();
        return HUGnetDBTableTestBase::splitObject($obj, "sqlIndexes");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataVars()
    {
        return array(
            array(new DataCollectorsTable()),
        );
    }

    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array(
                "LastContact", "2003-02-28 02:00:00", gmmktime(02, 0, 0, 2, 28, 2003)
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->$var = $value;
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $data[$var]);
    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataOnGateway()
    {
        return array(
            array(
                1,
                true,
                array(
                    0 => array(
                        'group' => 'default',
                        'GatewayKey' => '1',
                        'uuid' => '48aa1c44-85be-4179-beab-8bbad51c1824',
                        'name' => 'Test2',
                        'ip' => '192.168.192.125',
                        'LastContact' => 123456789,
                        'SetupString' => "c",
                        'Config' => 'd',
                    ),
                    1 => array(
                        'group' => 'default',
                        'GatewayKey' => '1',
                        'uuid' => '46ba8126-57a1-4038-b5e4-2e2585f9f5a5',
                        'name' => 'Test1',
                        'ip' => '192.168.192.5',
                        'LastContact' => 12345678,
                        'SetupString' => "a",
                        'Config' => 'b',
                    ),
                ),
            ),
            array(
                8,
                false,
                array(
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param int   $GatewayKey The id to use
    * @param bool  $return     The expected return
    * @param mixed $expect     The expected data
    *
    * @return null
    *
    * @dataProvider dataOnGateway
    */
    public function testOnGateway($GatewayKey, $return, $expect)
    {
        $ret = $this->o->onGateway($GatewayKey);
        $this->assertSame($return, $ret, "Return Wrong");
        if ($ret) {
            $data = array();
            do {
                $data[] = $this->o->toArray();
            } while ($this->o->nextInto());
            $this->assertEquals($expect, $data, "Data Wrong");
        }
    }
    /**
    * data provider for testForceTable
    *
    * @return array
    */
    public static function dataFromAny()
    {
        return array(
            array(
                array(
                    "System" => array(
                        "config" => array(1, 2, 3, 4, 5),
                        "get" => array(
                            "uuid" => "fa7d187c-9b3f-4c3e-983d-d1311dd6d3cf",
                        ),
                    ),
                ),
                array(
                    "GatewayKey" => 5,
                    "DeviceName" => "fa7d187c-9b3f-4c3e-983d-d1311dd6d3cf",
                    "DeviceLocation" => "1.2.3.4",
                    "id" => 0xC,
                    "HWPartNum" => "0039-26-02-P",
                    "FWPartNum" => "0039-26-00-P",
                    "FWVersion" => "0.1.2",
                ),
                array(
                    'GatewayKey' => 5,
                    "ip" => '1.2.3.4',
                    "uuid" => "fa7d187c-9b3f-4c3e-983d-d1311dd6d3cf",
                    'LastContact' => 0,
                    'SetupString' => '000000000C00392602500039260050000102'
                        .'FFFFFFFFFA7D187C9B3F4C3E983DD1311DD6D3CF010203040005',
                    'Config' => json_encode(array(1, 2, 3, 4, 5)),
                ),
            ),
        );
    }

    /**
    * test the forceTable routine
    *
    * @param array $mock   The mocks to load
    * @param array $dev    The device to use
    * @param mixed $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataFromAny
    */
    public function testFromAny($mock, $dev, $expect)
    {
        $sys = new \HUGnet\DummySystem("System");
        $sys->resetMock($mock);
        $device = \HUGnet\Device::factory($sys, $dev);

        $this->o->fromAny($device);
        $this->assertEquals($expect, $this->o->toArray(false));
    }
}

?>
