<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteSockets
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
/** This is our namespace */
namespace HUGnet\network\physical;

/** This is a required class */
require_once CODE_BASE.'network/Socket.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteSockets
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SocketTest extends \PHPUnit_Framework_TestCase
{
    /** @var This is the pid file for the socket server */
    protected $pidfile = array();
    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->tearDownSocket();
    }
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @param array &$preload the preload data to fix
    *
    * @access protected
    *
    * @return null
    */
    protected function setUpSocket(&$preload)
    {
        if (($preload["type"] === AF_INET) && empty($preload["port"])) {
            $sock = socket_create(AF_INET, SOCK_STREAM, 0);
            $port = 0;
            socket_bind($sock, "127.0.0.1", 0);
            socket_getsockname($sock, $address, $port);
            socket_close($sock);
            $this->pidfile = tempnam(sys_get_temp_dir(), 'SocketServer');
            exec(
                "php ".TEST_CONFIG_BASE."scripts/socketserver.php "
                .(int)$port." ".$this->pidfile." >> /tmp/testfile 2>&1 &"
            );
            sleep(1);
            $preload["port"] = $port;
        } else if ($preload["type"] === AF_UNIX) {
            $this->pidfile = tempnam(sys_get_temp_dir(), 'SocketServer');
            exec(
                "php ".TEST_CONFIG_BASE."scripts/socketserver.php "
                ."\"".$preload["location"]."\" ".$this->pidfile
                ." >> /tmp/testfile 2>&1 &"
            );
            sleep(1);
        }
    }
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDownSocket()
    {
        // This kills off the old process
        if (!empty($this->pidfile)) {
            $pid = (int)file_get_contents($this->pidfile);
            if (!empty($pid)) {
                posix_kill($pid, SIGINT);
            }
            unlink($this->pidfile);
            $this->pidfile = "";
        }
    }

    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataWrite()
    {
        return array(
            array( // #0
                array(
                    "type" => AF_INET,
                    "location" => "127.0.0.1",
                    "port" => 64583945,
                ),
                "",
                "",
                false,
                false,
                "Exception",
            ),
            array( // #1
                array(
                    "type" => AF_INET,
                    "location" => "127.0.0.1",
                    "port" => 328968768,
                    "quiet" => true,
                ),
                "",
                "",
                0,
                "",
                null,
            ),
            array( // #2
                array(
                    "type" => AF_INET,
                    "location" => "127.0.0.1",
                    "port" => 0,
                    "bus" => true,
                ),
                "",
                "5A5A5A010102030405060401020304C3",
                32,
                "5A5A5A010102030405060401020304C3",
                null,
            ),
            array( // #3
                array(
                    "type" => AF_UNIX,
                    "location" => sys_get_temp_dir()."/test".md5(mt_rand()),
                    "port" => 0,
                    "bus" => true,
                ),
                "",
                "5A5A5A010102030405060401020304C3",
                32,
                "5A5A5A010102030405060401020304C3",
                null,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload   The value to preload
    * @param array  $clients   Array of what the clients should write to the server
    * @param string $write     The string to write
    * @param mixed  $expect    The expected return
    * @param string $buffer    What we expect to be written
    * @param string $exception The exception to expect.  Null for none
    *
    * @return null
    *
    * @dataProvider dataWrite
    */
    public function testWrite(
        $preload, $clients, $write, $expect, $buffer, $exception
    ) {
        if (is_string($exception)) {
            $this->setExpectedException($exception);
        }
        $this->setupSocket($preload);
        // This sets up the server
        $obj = Socket::factory($preload);
        // This writes to the connection
        $ret = $obj->write($write);
        $this->assertSame($expect, $ret, "The return is wrong");
        // This reads what we have written
        $string .= $obj->read();
        $this->assertSame($buffer, $string, "The string is wrong");
        // This clean up everything
        unset($obj);
    }
    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataAvailable()
    {
        return array(
            array(
                array(
                    "type" => AF_UNIX,
                    "location" => sys_get_temp_dir()."/test".md5(mt_rand()),
                    "port" => 0,
                ),
                true,
            ),
            array(
                array(
                    "type" => AF_UNIX,
                    "location" => "/dev/null",
                    "port" => 0,
                    "quiet" => true,
                ),
                false,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param mixed $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataAvailable()
    */
    public function testAvailable($preload, $expect)
    {
        $this->setupSocket($preload);
        // This sets up the server
        $obj = Socket::factory($preload);
        $this->assertTrue($obj->available());
        unset($obj);
    }

}

?>
