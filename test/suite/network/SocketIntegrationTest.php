<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteSockets
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
/** This is our namespace */
namespace HUGnet\network\physical;

/** This is a required class */
require_once CODE_BASE.'network/SocketServer.php';
/** This is a required class */
require_once CODE_BASE.'network/Socket.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteSockets
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SocketIntegrationTest extends \PHPUnit_Framework_TestCase
{
    /** @var This is the pid file for the socket server */
    protected $pidfile = array();
    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
    }
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    */
    protected static function findPort()
    {
        $sock = socket_create(AF_INET, SOCK_STREAM, 0);
        $port = 0;
        socket_bind($sock, "127.0.0.1", 0);
        socket_getsockname($sock, $address, $port);
        socket_close($sock);
        return $port;
    }

    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataServer()
    {
        $port = self::findPort();
        $file = sys_get_temp_dir()."/serverInteg".mt_rand();
        return array(
            array( // #0
                array(
                    "type" => AF_INET,
                    "location" => "127.0.0.1",
                    "port" => $port,
                    "bus" => false,
                ),
                array(
                    "default" => array(
                        "type" => AF_INET,
                        "location" => "127.0.0.1",
                        "port" => $port,
                        "name" => "default",
                    ),
                    "default2" => array(
                        "type" => AF_INET,
                        "location" => "127.0.0.1",
                        "port" => $port,
                        "name" => "default2",
                    ),
                ),
                10,
                // There must be data from each client before they actually connect
                // therefore, numbers should be lower in the client array.
                array(
                    6 => "Passed",
                ),
                array(
                    "default" => array(
                        4 => "Really",
                    ),
                    "default2" => array(
                        3 => "Test",
                    ),
                ),
                "TestReallyPassedPassed",
                null,
            ),
            array( // #1
                array(
                    "type" => AF_UNIX,
                    "location" => $file,
                    "bus" => false,
                ),
                array(
                    "default" => array(
                        "type" => AF_UNIX,
                        "location" => $file,
                        "name" => "default",
                    ),
                ),
                10,
                // There must be data from each client before they actually connect
                // therefore, numbers should be lower in the client array.
                array(
                    2 => "Passed",
                    4 => "Data",
                    6 => "And",
                ),
                array(
                    "default" => array(
                        1 => "Test",
                        3 => "Much",
                        5 => "Back",
                        7 => "Forth",

                    ),
                ),
                "TestPassedMuchDataBackAndForth",
                null,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $server      Server configs
    * @param array $clients     Client Configs
    * @param int   $loops       The number of loops to go through.
    * @param array $servWrite   Array of strings to write from the server
    * @param array $clientWrite The string to writ
    * @param array $expect      The expected return
    * @param mixed $exception   Expected exception
    *
    * @return null
    *
    * @dataProvider dataServer
    */
    public function testServer(
        $server, $clients, $loops, $servWrite, $clientWrite,
        $expect, $exception
    ) {
        if (is_string($exception)) {
            $this->setExpectedException($exception);
        }
        $serv = SocketServer::factory($server);
        // Setup clients
        $clien = array();
        foreach ($clients as $key => $client) {
            $clien[$key] = Socket::factory($client);
        }
        $sread = "";
        for ($i = 0; $i < $loops; $i++) {
            foreach (array_keys($clien) as $key) {
                $read = $clien[$key]->read();
                // We have to do a read between every client.
                $sread .= $serv->read();
                // Clients just return what they were given
                $clien[$key]->write($read);
                $clien[$key]->write($clientWrite[$key][$i]);
            }
            $serv->write($servWrite[$i]);
        }
        $this->assertSame($expect, $sread);
    }

}

?>
