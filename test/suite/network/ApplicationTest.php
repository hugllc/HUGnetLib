<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\network;
/** This is a required class */
require_once CODE_BASE.'network/Application.php';
/** This is a required class */
require_once CODE_BASE.'network/Packet.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyNetwork.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ApplicationTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataApplication()
    {
        return array(
            array(  // #0 // No sockets
                array(
                    "Transport" => array(
                        "receive" => array(
                            "thisIsAToken" => Packet::factory(
                                array(
                                    "From"    => "000100",
                                    "To"      => "000200",
                                    "Command" => "23",
                                    "Data"    => "01",
                                )
                            ),
                        ),
                        "unsolicited" => array(
                            Packet::factory(
                                array(
                                    "From"    => "000100",
                                    "To"      => "000000",
                                    "Command" => "POWERUP",
                                    "Data"    => "0102",
                                )
                            ),
                            null,
                        ),
                        "send" => array(
                            "thisIsAToken",
                            "anotherToken",
                        ),
                    ),
                ),
                array(
                ),
                2,
                array(
                    "mon",
                ),
                array(
                    "unsol",
                ),
                array(
                    "bad" => Packet::factory(
                        array(
                            "From"    => "000200",
                            "To"      => "000100",
                            "Command" => "23",
                            "Data"    => "010203",
                        )
                    ),
                    // This should not be callable
                    true => Packet::factory(
                        array(
                            "From"    => "000200",
                            "To"      => "000300",
                            "Command" => "23",
                            "Data"    => "01020304",
                        )
                    ),

                ),
                array(
                    "Transport" => array(
                        "send" => array(
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000200",
                                        "To"      => "000100",
                                        "Command" => "23",
                                        "Data"    => "010203",
                                    )
                                ),
                                array(),
                            ),
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000200",
                                        "To"      => "000300",
                                        "Command" => "23",
                                        "Data"    => "01020304",
                                    )
                                ),
                                array(
                                    "find" => false,
                                    "retries" => 1,
                                ),
                            ),
                        ),
                        "mon" => array(
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000200",
                                        "To"      => "000100",
                                        "Command" => "23",
                                        "Data"    => "010203",
                                    )
                                ),
                            ),
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000200",
                                        "To"      => "000300",
                                        "Command" => "23",
                                        "Data"    => "01020304",
                                    )
                                ),
                            ),
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000100",
                                        "To"      => "000200",
                                        "Command" => "23",
                                        "Data"    => "01",
                                    )
                                ),
                            ),
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000100",
                                        "To"      => "000000",
                                        "Command" => "POWERUP",
                                        "Data"    => "0102",
                                    )
                                ),
                            ),
                        ),
                        "receive" => array(
                            array(
                                "thisIsAToken",
                            ),
                            array(
                                "anotherToken",
                            ),
                            array(
                                "anotherToken",
                            ),
                        ),
                        "bad" => array(
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000100",
                                        "To"      => "000200",
                                        "Command" => "23",
                                        "Data"    => "01",
                                    )
                                ),
                            ),
                        ),
                        "unsolicited" => array(
                            array(
                            ),
                            array(
                            ),
                        ),
                        "unsol" => array(
                            array(
                                Packet::factory(
                                    array(
                                        "From"    => "000100",
                                        "To"      => "000000",
                                        "Command" => "POWERUP",
                                        "Data"    => "0102",
                                    )
                                ),
                            ),
                        ),
                    ),
                ),
                null,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mock        The string to give to the class
    * @param array  $config      The configuration to send the class
    * @param int    $loops       The number of times to call read and write
    * @param array  $monitor     Array of strings to monitor
    * @param array  $unsolicited Array of strings to get unsolicited packets
    * @param array  $send        Array of "function" => Packets to send out
    * @param array  $expect      The info to expect returned
    * @param string $exception   The exception to expect.  Null for none
    *
    * @return null
    *
    * @dataProvider dataApplication()
    */
    public function testApplication(
        $mock, $config, $loops, $monitor, $unsolicited, $send, $expect, $exception
    ) {
        if (!is_null($exception)) {
            $this->setExpectedException($exception);
        }
        $transport = new \HUGnet\network\DummyNetwork("Transport");
        $transport->resetMock($mock);
        $application = &Application::factory($transport, $config);
        foreach ((array)$monitor as $mon) {
            $application->monitor(array($transport, $mon));
        }
        foreach ((array)$unsolicited as $unsol) {
            $application->unsolicited(array($transport, $unsol));
        }
        foreach ((array)$send as $name => $packet) {
            $application->send($packet, array($transport, $name));
        }
        for ($i = 0; $i < $loops; $i++) {
            $application->main();
        }
        $this->assertEquals($expect, $transport->retrieve(), "Calls wrong");
    }

}
?>
