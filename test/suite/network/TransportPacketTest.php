<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\network;
/** This is a required class */
require_once CODE_BASE.'network/TransportPacket.php';
/** This is a required class */
require_once CODE_BASE.'network/Packet.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class TransportPacketTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataReply()
    {
        return array(
            array(  // #0 everything correct
                array(
                ),
                Packet::factory(
                    array(
                        "To"      => "000ABC",
                        "From"    => "000020",
                        "Command" => "03",
                        "Data"    => "01020304",
                    )
                ),
                array(
                    array(
                        "To"      => "000020",
                        "From"    => "000ABC",
                        "Command" => "01",
                        "Data"    => "01020304",
                    ),
                ),
                1234567,
                1,
                array(
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "03",
                            "Data"    => "01020304",
                        )
                    ),
                ),
                array(
                    Packet::factory(
                        array(
                            "To"      => "000020",
                            "From"    => "000ABC",
                            "Command" => "01",
                            "Data"    => "01020304",
                        )
                    ),
                ),
                1.234567,
            ),
            array(  // #1 No Reply
                array(
                    "ident" => "ABCDEF",
                ),
                array(
                    "To"      => "000ABC",
                    "From"    => "000020",
                    "Command" => "55",
                    "Data"    => "01020304",
                ),
                array(
                ),
                0,
                5,
                array(
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "FINDPING",
                            "Data"    => "ABCDEF",
                        )
                    ),
                    false,
                    false,
                ),
                array(
                    false,
                    false,
                    false,
                    false,
                    false,
                ),
                false,
            ),
            array(  // #2 Reply on 3rd & 4th try
                array(
                    "ident" => "ABCDEF",
                ),
                array(
                    "To"      => "000ABC",
                    "From"    => "000020",
                    "Command" => "55",
                    "Data"    => "01020304",
                ),
                array(
                    "",
                    "",
                    Packet::factory(
                        array(
                            "To"        => "000020",
                            "From"      => "000ABC",
                            "Command"   => "REPLY",
                            "Data"      => "ABCDEF",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"        => "000020",
                            "From"      => "000ABC",
                            "Command"   => "REPLY",
                            "Data"      => "01020304",
                        )
                    ),
                    "",
                ),
                100000,
                5,
                array(
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "FINDPING",
                            "Data"    => "ABCDEF",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    false,
                ),
                array(
                    false,
                    false,
                    true,
                    Packet::factory(
                        array(
                            "To"        => "000020",
                            "From"      => "000ABC",
                            "Command"   => "01",
                            "Data"      => "01020304",
                        )
                    ),
                    false,
                ),
                0.45,
            ),
            array(  // #3 Reply on 3rd try, no find packet
                array(
                    "ident" => "ABCDEF",
                    "find"  => false,
                ),
                array(
                    "To"      => "000ABC",
                    "From"    => "000020",
                    "Command" => "55",
                    "Data"    => "01020304",
                ),
                array(
                    "",
                    "",
                    Packet::factory(
                        array(
                            "To"        => "000020",
                            "From"      => "000ABC",
                            "Command"   => "REPLY",
                            "Data"      => "01020304",
                        )
                    ),
                    "",
                    "",
                ),
                100000,
                5,
                array(
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "55",
                            "Data"    => "01020304",
                        )
                    ),
                    false,
                ),
                array(
                    false,
                    false,
                    Packet::factory(
                        array(
                            "To"        => "000020",
                            "From"      => "000ABC",
                            "Command"   => "01",
                            "Data"      => "01020304",
                        )
                    ),
                    false,
                    false,
                ),
                0.35,
            ),
            array(  // #4 valid reply data == ident
                array(
                    "ident" => "ABCDEF",
                ),
                Packet::factory(
                    array(
                        "To"      => "000ABC",
                        "From"    => "000020",
                        "Command" => "03",
                        "Data"    => "01020304",
                    )
                ),
                array(
                    array(
                        "To"      => "000020",
                        "From"    => "000ABC",
                        "Command" => "01",
                        "Data"    => "ABCDEF",
                    ),
                ),
                1234567,
                1,
                array(
                    Packet::factory(
                        array(
                            "To"      => "000ABC",
                            "From"    => "000020",
                            "Command" => "03",
                            "Data"    => "01020304",
                        )
                    ),
                ),
                array(
                    Packet::factory(
                        array(
                            "To"      => "000020",
                            "From"    => "000ABC",
                            "Command" => "01",
                            "Data"    => "ABCDEF",
                        )
                    ),
                ),
                1.234567,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $config The configuration array
    * @param array $packet The packet to give (array, string or object)
    * @param array $reply  The reply packet (array, string or object)
    * @param int   $pause  The number of MICROSECONDS to pause
    * @param int   $loops  The number of times to loop through the software
    * @param array $send   The object returnd from send
    * @param array $expect The expected return from the reply command
    * @param float $time   The number of SECONDS to check for
    *
    * @return null
    *
    * @dataProvider dataReply()
    */
    public function testFactory(
        $config, $packet, $reply, $pause, $loops, $send, $expect, $time
    ) {
        $transPacket = TransportPacket::factory($config, $packet);
        for ($i = 0; $i < $loops; $i++) {
            $ret = $transPacket->send();
            $this->assertEquals(
                $send[$i], $ret, "The return from send is wrong.  Iteration $i"
            );
            usleep($pause);
            $ret = &$transPacket->reply($reply[$i]);
            if (is_object($expect[$i])) {
                $this->assertEquals(
                    $expect[$i], $ret, "The return from reply is wrong. Iteration $i"
                );
            } else {
                $this->assertSame(
                    $expect[$i], $ret, "The return from reply is wrong. Iteration $i"
                );
            }
        }
        if (is_float($time)) {
            $this->assertEquals(
                $time, $transPacket->time(), "The time is wrong", 0.2
            );
        } else {
            $this->assertSame(
                $time, $transPacket->time(), "The time is wrong"
            );
        }
    }
}
?>
