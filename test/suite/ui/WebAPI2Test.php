<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteCLI
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\ui;
/** This is a required class */
require_once CODE_BASE.'ui/WebAPI2.php';
/** This is a required class */
require_once CODE_BASE.'system/Error.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'base/SystemTableBase.php';
/** This is a required class */
require_once CODE_BASE.'db/Table.php';
/** This is a required class */
require_once CODE_BASE.'ui/WebAPIArgs.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteCLI
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class WebAPI2Test extends \PHPUnit_Framework_TestCase
{
    /** Files that have been created */
    private $_files = array();
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        foreach ($this->_files as $file) {
            unlink($file);
        }
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataExecute()
    {

        return array(
            array(  // #0
                array(
                    "task" => "device",
                    "action" => "get",
                    "id" => "5",
                ),
                array(
                ),
                false,
                array(),
                json_encode(array("Real" => "array")),
                array(
                    "Device" => array(
                        "toArray" => array(
                            array(true),
                        ),
                    ),
                ),
            ),
            array(  // #1
                array(
                    "object" => "device",
                    "method" => "GET",
                    "data" => array(
                        "a" => "b",
                        "c" => "d",
                    ),
                ),
                array(
                ),
                false,
                array(),
                json_encode(array("Real" => "list")),
                array(
                ),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param mixed $config   The config to use
    * @param array $mock     The mocks to use
    * @param bool  $readonly Whether the system is read only or not
    * @param array $extra    The extra data to send to execute
    * @param mixed $expect   The system object we are expecting
    * @param array $calls    The calls to expect
    *
    * @return null
    *
    * @dataProvider dataExecute()
    */
    public function testExecute($config, $mock, $readonly, $extra, $expect, $calls)
    {
        $system = $this->getMockBuilder('\HUGnet\System')
                    ->setMethods(array('now', 'device', 'table'))
                    ->setConstructorArgs(
                        array(
                            array(
                                "servers" => array(
                                    "hello" => array(
                                        "driver" => "sqlite",
                                        "file" => ":memory:",
                                        "group" => "hello",
                                    ),
                                    "default" => array(
                                        "driver" => "sqlite",
                                        "file" => ":memory:",
                                        "group" => "default",
                                    ),
                                ),
                            ),
                        )
                    )->getMock();
        $error = $this->getMockBuilder('\HUGnet\Error')
                    ->setConstructorArgs(array(&$system, "Error"))
                    ->setMethods(array('toArray', 'getList'))
                    ->getMock();
        $table = $this->getMockBuilder('\HUGnet\db\tables\Devices')
                    ->setConstructorArgs(array(&$system))
                    ->setMethods(array('toArray', 'getList'))
                    ->getMock();
        $system->expects($this->any())
            ->method('now')
            ->will($this->returnValue(1000000));

        $system->expects($this->any())
            ->method('device')
            ->will($this->returnValue($error));
        $system->expects($this->any())
            ->method('table')
            ->will($this->returnValue($table));

        $error->expects($this->any())
            ->method('toArray')
            ->will($this->returnValue(array('Real' => 'array')));
        $error->expects($this->any())
            ->method('getList')
            ->will($this->returnValue(array('Real' => 'list')));

        $table->expects($this->any())
            ->method('toArray')
            ->will($this->returnValue(array('Real' => 'array')));
        $table->expects($this->any())
            ->method('getList')
            ->will($this->returnValue(array('Real' => 'list')));

        if (!is_object($config)) {
            $args = \HUGnet\ui\WebAPIArgs::factory(
                $config,
                count($config)
            );
        } else {
            $args = $config;
        }
        $obj = WebAPI2::factory($args, $system, $readonly);
        ob_start();
        $obj->execute($extra);
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertEquals($expect, $ret, "Output wrong");
    }

}
?>
