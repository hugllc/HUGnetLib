<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteCLI
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\ui;
/** This is a required class */
require_once CODE_BASE.'ui/WebAPI.php';
/** This is a required class */
require_once CODE_BASE.'ui/HTMLArgs.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteCLI
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class WebAPITest extends \PHPUnit_Framework_TestCase
{
    /** Files that have been created */
    private $_files = array();
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        foreach ($this->_files as $file) {
            unlink($file);
        }
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataSystem()
    {
        $data = array();
        $htmlargs = \HUGnet\ui\HTMLArgs::factory($argv, $argc, $data);
        return array(
            array(
                new \HUGnet\DummySystem("System"),
                array(
                    "System" => array(
                        "config" => array(
                            "verbose" => 5,
                            "other" => "stuff",
                        ),
                    ),
                ),
                array(
                    "verbose" => 5,
                    "other" => "stuff",
                    "html" => true,
                ),
            ),
            array(
                array(
                    "verbose" => 5,
                ),
                null,
                array(
                    "verbose" => 5,
                    "html" => true,
                )
            ),
            array(
                $htmlargs,
                null,
                array(
                    "verbose" => 0,
                    "html" => true,
                    "file" => "",
                    "quiet" => false,
                    "debug" => false,
                    "test" => false,
                )
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param mixed $config The config to use
    * @param array $mock   The mocks to use
    * @param mixed $expect The system object we are expecting
    *
    * @return null
    *
    * @dataProvider dataSystem()
    */
    public function testSystem($config, $mock, $expect)
    {
        if (is_array($mock)) {
            $config->resetMock($mock);
        }
        $obj = WebAPI::factory($config);
        $conf = $obj->system()->config();
        unset($conf["IPAddr"]);
        $this->assertEquals($expect, $conf);
    }
    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataExecute()
    {
        return array(
            array(
                array(
                    "task" => "device",
                    "action" => "get",
                    "id" => "5",
                ),
                array(
                    "System" => array(
                        "config" => array(
                            "verbose" => 0,
                        ),
                        "device" => array(
                            "5" => new \HUGnet\DummyBase("Device"),
                        ),
                    ),
                    "Device" => array(
                        "toArray" => array(
                            "Real" => "array",
                        ),
                    ),
                ),
                array(),
                json_encode(array("Real" => "array")),
                array(
                    "Device" => array(
                        "toArray" => array(
                            array(true),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "task" => "device",
                    "action" => "get",
                    "id" => 5,
                    "format" => "CSV",
                ),
                array(
                    "System" => array(
                        "config" => array(
                            "verbose" => 0,
                        ),
                        "device" => array(
                            "5" => new \HUGnet\DummyBase("Device"),
                        ),
                    ),
                    "Device" => array(
                        "toArray" => "Test",
                    ),
                ),
                array(),
                "Test",
                array(
                    "Device" => array(
                        "toArray" => array(
                            array(true),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "task" => "device",
                    "action" => "put",
                    "id" => "10",
                    "data" => array(
                        "a" => "b",
                        "c" => "d",
                    ),
                ),
                array(
                    "System" => array(
                        "config" => array(
                            "verbose" => 0,
                        ),
                        "device" => new \HUGnet\DummyBase("Device"),
                    ),
                    "Device" => array(
                        "toArray" => array(
                            "Real" => "array",
                        ),
                    ),
                ),
                array(),
                json_encode(array("Real" => "array")),
                array(
                    "Device" => array(
                        "toArray" => array(
                            array(true),
                        ),
                        "change" => array(
                            array(
                                array(
                                    "a" => "b",
                                    "c" => "d",
                                ),
                            ),
                        ),
                        "load" => array(
                            array(16),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "task" => "dataCollector",
                    "action" => "get",
                    "id" => "5",
                ),
                array(
                    "System" => array(
                        "config" => array(
                            "verbose" => 0,
                        ),
                        "datacollector" => new \HUGnet\DummyBase("Datacollector"),
                    ),
                    "Datacollector" => array(
                        "toArray" => array(
                            "Real" => "array",
                        ),
                    ),
                ),
                array(),
                json_encode(array("Real" => "array")),
                array(
                    "Datacollector" => array(
                        "toArray" => array(
                            array(true),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param mixed $config The config to use
    * @param array $mock   The mocks to use
    * @param array $extra  The extra data to send to execute
    * @param mixed $expect The system object we are expecting
    * @param array $calls  The calls to expect
    *
    * @return null
    *
    * @dataProvider dataExecute()
    */
    public function testExecute($config, $mock, $extra, $expect, $calls)
    {
        $system = new \HUGnet\DummySystem("System");
        $system->resetMock($mock);
        $args = \HUGnet\ui\HTMLArgs::factory(
            $config,
            count($config),
            array(
                "task" => array(
                    "name" => "task", "type" => "string", "default" => ""
                ),
                "action" => array(
                    "name" => "action", "type" => "string"
                ),
                "format" => array(
                    "name" => "action", "type" => "string"
                ),
                "id" => array(
                    "name" => "id", "type" => "string"
                ),
                "clientuuid" => array(
                    "name" => "clientuuid", "type" => "string"
                ),
                "data" => array(
                    "name" => "data", "type" => "array", "default" => array()
                ),
            )
        );
        $obj = WebAPI::factory($args, $system);
        ob_start();
        $obj->execute($extra);
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertEquals($expect, $ret, "Output wrong");
        foreach ((array)$calls as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj), "$obj Calls Wrong");
        }
    }

}
?>
