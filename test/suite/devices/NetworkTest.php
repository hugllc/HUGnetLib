<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices;
/** This is a required class */
require_once CODE_BASE.'devices/Network.php';
/** This is a required class */
require_once CODE_BASE.'network/packets/Packet.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'db/Table.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyDeviceDriver.php';
/** This is a required class */
require_once CODE_BASE.'db/tables/Firmware.php';



/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class NetworkTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
    }

    /**
    * Data provider for testPing
    *
    * @return array
    */
    public static function dataPing()
    {
        return array(
            array( // #0 Normal ping
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                null,
                false,
                "123456",
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'PING',
                                    "Data" => "123456",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
            array( // #1 Find ping
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                null,
                true,
                "654321",
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'FINDPING',
                                    "Data" => "654321",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
            array( // #0 Normal ping
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                null,
                false,
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'PING',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks    The data to reset the mocks with
    * @param object $driver   The driver to use
    * @param mixed  $callback The function to call on packet reply
    * @param bool   $find     Whether to use FindPing or not
    * @param string $data     The data to send in the ping
    * @param array  $config   The configuration array
    * @param array  $expect   The expected calls in the mock
    * @param bool   $return   The expected return
    *
    * @return null
    *
    * @dataProvider dataPing()
    */
    public function testPing(
        $mocks, $driver, $callback, $find, $data, $config, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->ping($find, $data, $callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        if (empty($data)) {
            /* Random Number.  We can't test for it exactly. */
            $this->assertEquals(6, strlen($ret["Network"]["send"][0][0]["Data"]));
            unset($ret["Network"]["send"][0][0]["Data"]);
        }
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $ret[$obj],  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataPoll()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SENSORREAD',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                    "Driver" => array(
                        "poll" => array(array("Command" => "SENSORREAD")),
                    ),
                ),
                new \HUGnet\devices\drivers\DummyDeviceDriver("Driver"),
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "To" => 21,
                                        "Command" => 'SENSORREAD',
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                    "Driver" => array(
                        "poll" => array(array()),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks    The data to reset the mocks with
    * @param object $driver   The driver to use
    * @param mixed  $callback The function to call on packet reply
    * @param array  $config   The configuration array
    * @param array  $expect   The expected calls in the mock
    * @param bool   $return   The expected return
    *
    * @return null
    *
    * @dataProvider dataPoll()
    */
    public function testPoll($mocks, $driver, $callback, $config, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->poll($callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataConfig()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                    "Driver" => array(
                        "config" => array(array("Command" => "CONFIG")),
                    ),
                ),
                new \HUGnet\devices\drivers\DummyDeviceDriver("Driver"),
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "To" => 21,
                                        "Command" => 'CONFIG',
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                    "Driver" => array(
                        "config" => array(array()),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks    The data to reset the mocks with
    * @param object $driver   The driver to use
    * @param mixed  $callback The function to call on packet reply
    * @param array  $config   The configuration array
    * @param array  $expect   The expected calls in the mock
    * @param bool   $return   The expected return
    *
    * @return null
    *
    * @dataProvider dataConfig()
    */
    public function testConfig($mocks, $driver, $callback, $config, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->config($callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataSensorConfig()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                3,
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "To" => 21,
                                        "Command" => 'SENSORCONFIG',
                                        "Data" => "03",
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                    "Driver" => array(
                        "sensorConfig" => array(
                            array(
                                "Command" => "SENSORCONFIG",
                                "Data" => "03",
                            ),
                        ),
                    ),
                ),
                new \HUGnet\devices\drivers\DummyDeviceDriver("Driver"),
                3,
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "To" => 21,
                                        "Command" => 'SENSORCONFIG',
                                        "Data" => "03",
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                    "Driver" => array(
                        "sensorConfig" => array(array(3)),
                    ),
                ),
                \HUGnet\network\packets\Packet::factory(
                    array(
                        "From" => 21,
                        "Reply" => "123456",
                    )
                ),
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks    The data to reset the mocks with
    * @param object $driver   The driver to use
    * @param int    $sensor   The sensor to write
    * @param mixed  $callback The function to call on packet reply
    * @param array  $config   The configuration array
    * @param array  $expect   The expected calls in the mock
    * @param bool   $return   The expected return
    *
    * @return null
    *
    * @dataProvider dataSensorConfig()
    */
    public function testSensorConfig(
        $mocks, $driver, $sensor, $callback, $config, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->sensorConfig($sensor, $callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataSetInputTable()
    {
        return array(
            array( // #0
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "09080706",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                3,
                "09080706",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "To" => 21,
                                        "Command" => 'SETINPUTTABLE',
                                        "Data" => "0309080706",
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array( // #1
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                3,
                "",           // Empty String
                null,
                array(),
                array(
                ),
                false,
            ),
            array( // #2
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                3,
                array(),  // This is not a string
                null,
                array(),
                array(
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks        The data to reset the mocks with
    * @param object $driver       The driver to use
    * @param int    $sensor       The sensor to write
    * @param string $sensorConfig The config for the sensor
    * @param mixed  $callback     The function to call on packet reply
    * @param array  $config       The configuration array
    * @param array  $expect       The expected calls in the mock
    * @param bool   $return       The expected return
    *
    * @return null
    *
    * @dataProvider dataSetInputTable()
    */
    public function testSetInputTable(
        $mocks, $driver, $sensor, $sensorConfig, $callback, $config, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->setInputTable($sensor, $sensorConfig, $callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataSetOutputTable()
    {
        return array(
            array( // #0
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "09080706",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                3,
                "09080706",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "To" => 21,
                                        "Command" => 'SETOUTPUTTABLE',
                                        "Data" => "0309080706",
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array( // #1
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                3,
                "",           // Empty String
                null,
                array(),
                array(
                ),
                false,
            ),
            array( // #2
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                new \HUGnet\DummyBase("Driver"),
                3,
                array(),  // This is not a string
                null,
                array(),
                array(
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks        The data to reset the mocks with
    * @param object $driver       The driver to use
    * @param int    $sensor       The sensor to write
    * @param string $sensorConfig The config for the sensor
    * @param mixed  $callback     The function to call on packet reply
    * @param array  $config       The configuration array
    * @param array  $expect       The expected calls in the mock
    * @param bool   $return       The expected return
    *
    * @return null
    *
    * @dataProvider dataSetOutputTable()
    */
    public function testSetOutputTable(
        $mocks, $driver, $sensor, $sensorConfig, $callback, $config, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->setOutputTable($sensor, $sensorConfig, $callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testGetRTC
    *
    * @return array
    */
    public static function dataGetRTC()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                        "decodeRTC" => "asdf",
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "78563412",
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "decodeRTC" => array(
                            array("78563412"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'GET_RTC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                "asdf",
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => null,
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'GET_RTC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => false,
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'GET_RTC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks  The data to reset the mocks with
    * @param array $config The configuration array
    * @param array $expect The expected calls in the mock
    * @param bool  $return The expected return
    *
    * @return null
    *
    * @dataProvider dataGetRTC()
    */
    public function testGetRTC($mocks, $config, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->getRTC($config);
        $this->assertSame($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testSetRTC
    *
    * @return array
    */
    public static function dataSetRTC()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                        "encodeRTC" => "11223344",
                        "decodeRTC" => "asdf",
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "78563412",
                            )
                        ),
                    ),
                ),
                array(),
                0x12345678,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "decodeRTC" => array(
                            array("78563412"),
                        ),
                        "encodeRTC" => array(
                            array(0x12345678),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "Command" => 'SET_RTC',
                                        "Data" => "11223344",
                                        "To" => 21,
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                "asdf",
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                        "encodeRTC" => "11223344",
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => null,
                            )
                        ),
                    ),
                ),
                array(),
                null,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "encodeRTC" => array(
                            array(null),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "Command" => 'SET_RTC',
                                        "Data" => "11223344",
                                        "To" => 21,
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                        "encodeRTC" => "11223344",
                    ),
                    "Network" => array(
                        "send" => false,
                    ),
                ),
                array(),
                null,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "encodeRTC" => array(
                            array(null),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    array(
                                        "Command" => 'SET_RTC',
                                        "Data" => "11223344",
                                        "To" => 21,
                                    ),
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks  The data to reset the mocks with
    * @param array $config The configuration array
    * @param array $value  The value to set it to
    * @param array $expect The expected calls in the mock
    * @param bool  $return The expected return
    *
    * @return null
    *
    * @dataProvider dataSetRTC()
    */
    public function testSetRTC($mocks, $config, $value, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->setRTC($value, $config);
        $this->assertSame($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataGetCRC()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "1234",
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'GETCRC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                "1234",
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => null,
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'GETCRC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => false,
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'GETCRC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks  The data to reset the mocks with
    * @param array $config The configuration array
    * @param array $expect The expected calls in the mock
    * @param bool  $return The expected return
    *
    * @return null
    *
    * @dataProvider dataGetCRC()
    */
    public function testGetCRC($mocks, $config, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->getCRC($config);
        $this->assertSame($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataSetCRC()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "1234",
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                "1234",
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => null,
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => false,
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks  The data to reset the mocks with
    * @param array $config The configuration array
    * @param array $expect The expected calls in the mock
    * @param bool  $return The expected return
    *
    * @return null
    *
    * @dataProvider dataSetCRC()
    */
    public function testSetCRC($mocks, $config, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->setCRC($config);
        $this->assertSame($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataRunBootloader()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "",
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "To" => 21,
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => false,
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks  The data to reset the mocks with
    * @param array $config The configuration array
    * @param array $expect The expected calls in the mock
    * @param bool  $return The expected return
    *
    * @return null
    *
    * @dataProvider dataRunBootloader()
    */
    public function testRunBootloader($mocks, $config, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->runBootloader($config);
        $this->assertSame($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataRunApplication()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "",
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "To" => 21,
                            )
                        ),
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => false,
                    ),
                ),
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks  The data to reset the mocks with
    * @param array $config The configuration array
    * @param array $expect The expected calls in the mock
    * @param bool  $return The expected return
    *
    * @return null
    *
    * @dataProvider dataRunApplication()
    */
    public function testRunApplication($mocks, $config, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->runApplication($config);
        $this->assertSame($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }
    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataWriteFlash()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                0x1234,
                "ABCDEF",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1234ABCDEF",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "ABCDEF",
                            )
                        ),
                    ),
                ),
                0x1234,
                "ABCDEF",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1234ABCDEF",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                0x1234,
                null,
                null,
                array(),
                array(
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                            "AddressSize" => 3,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "ABCDEF",
                            )
                        ),
                    ),
                ),
                0x1234,
                "ABCDEF",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "001234ABCDEF",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                            "AddressSize" => 2,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "ABCDEF",
                            )
                        ),
                    ),
                ),
                0x123456,
                "ABCDEF",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "123456ABCDEF",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                            "AddressSize" => 3,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "ABCDEF",
                            )
                        ),
                    ),
                ),
                0x123456,
                "ABCDEF",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "123456ABCDEF",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks    The data to reset the mocks with
    * @param int   $address  The address to write to
    * @param mixed $data     The data to write
    * @param mixed $callback The function to call on packet reply
    * @param array $config   The configuration array
    * @param array $expect   The expected calls in the mock
    * @param bool  $return   The expected return
    *
    * @return null
    *
    * @dataProvider dataWriteFlash()
    */
    public function testWriteFlash(
        $mocks, $address, $data, $callback, $config, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->writeFlash($address, $data, $callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }
    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataWriteE2()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                0x1234,
                "ABCDEF",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1234ABCDEF",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "ABCDEF",
                            )
                        ),
                    ),
                ),
                0x1234,
                "ABCDEF",
                null,
                array(),
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1234ABCDEF",
                                ),
                                null,
                                array(
                                    "timeout" => 4,
                                ),
                            )
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => \HUGnet\network\packets\Packet::factory(
                            array(
                                "From" => 21,
                                "Reply" => "123456",
                            )
                        ),
                    ),
                ),
                0x1234,
                null,
                null,
                array(),
                array(
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks    The data to reset the mocks with
    * @param int   $address  The address to write to
    * @param mixed $data     The data to write
    * @param mixed $callback The function to call on packet reply
    * @param array $config   The configuration array
    * @param array $expect   The expected calls in the mock
    * @param bool  $return   The expected return
    *
    * @return null
    *
    * @dataProvider dataWriteE2()
    */
    public function testWriteE2(
        $mocks, $address, $data, $callback, $config, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->writeE2($address, $data, $callback, $config);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }
    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataWriteFlashBuffer()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                6,
                "FF",
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1000000102030405",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1006060708090A0B",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "100C0C0D0E0FFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFE",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                6,
                "FF",
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1000000102030405",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1006060708090A0B",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "100C0C0D0E0FFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0C",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                6,
                "FF",
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1000000102030405",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "1006060708090A0B",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "",
                6,
                "FF",
                array(
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                0,
                "FF",
                array(
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks     The data to reset the mocks with
    * @param int    $address   The address to write to
    * @param mixed  $data      The data to write
    * @param string $chunkSize The size of the chunks to send.  MUST BE LESS THAN 255
    * @param array  $empty     The 'empty' value of the memory
    * @param array  $expect    The expected calls in the mock
    * @param bool   $return    The expected return
    *
    * @return null
    *
    * @dataProvider dataWriteFlashBuffer()
    */
    public function testWriteFlashBuffer(
        $mocks, $address, $data, $chunkSize, $empty, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->writeFlashBuffer($data, $address, $chunkSize, $empty);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }
    }

    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataWriteE2Buffer()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                6,
                "FF",
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1000000102030405",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1006060708090A0B",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "100C0C0D0E0FFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFE",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                6,
                "FF",
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1000000102030405",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1006060708090A0B",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "100C0C0D0E0FFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0C",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                6,
                "FF",
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1000000102030405",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "1006060708090A0B",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 4,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "",
                6,
                "FF",
                array(
                ),
                true,
            ),
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "packetTimeout" => 4,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "000102030405",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "060708090A0B",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0C0D0E0FFFFF",
                                )
                            ),
                        ),
                    ),
                ),
                0x1000,
                "000102030405060708090A0B0C0D0E0F",
                0,
                "FF",
                array(
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array  $mocks     The data to reset the mocks with
    * @param int    $address   The address to write to
    * @param mixed  $data      The data to write
    * @param string $chunkSize The size of the chunks to send.  MUST BE LESS THAN 255
    * @param array  $empty     The 'empty' value of the memory
    * @param array  $expect    The expected calls in the mock
    * @param bool   $return    The expected return
    *
    * @return null
    *
    * @dataProvider dataWriteE2Buffer()
    */
    public function testWriteE2Buffer(
        $mocks, $address, $data, $chunkSize, $empty, $expect, $return
    ) {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->writeE2Buffer($data, $address, $chunkSize, $empty);
        $this->assertEquals($return, $ret,  "Return Wrong");
        $ret = $system->retrieve();
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }
    }

    /**
    * Data provider for testMatcher
    *
    * @return array
    */
    public static function dataLoadFirmware()
    {
        $system = new \HUGnet\DummySystem("System");
        return array(
            array( // #0 Not running boot loader
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => null,
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-20-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            )
                        ),
                    ),
                ),
                false,
            ),
            array( // #1 No reply to config
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-20-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array( // #2 No data in Firmware
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "21FFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-20-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array( // #3 Firmware code good, data bad.
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "21FFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-38-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array( // #4 Firmware code good, data good, crc bad.
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => null,
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-38-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array( // #5 Firmware code good, data good, good crc, no run.
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "1234",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => null,
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-38-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array( // #6 Everything works!
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                            "arch" => "old",
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "1234",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-38-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("setConfig"),
                            array("arch"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array( // #7 Everything works, no Data section
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "arch" => "old",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "1234",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-20-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("setConfig"),
                            array("arch"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array( // #8 Everything works, no Data section
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "arch" => "old",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "1234",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21-01-A",
                        "FWPartNum" => "0039-38-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                false,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("setConfig"),
                            array("arch"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    'timeout' => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                true,
            ),
            array( // #9 Firmware code good, data good, good crc, no run.
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                        "decode" => true,
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."0270000002027001027000000202700",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "1027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => "1234",
                                )
                            ),
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => null,
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(
                        "Code" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "CodeHash" => "",
                        "Data" => "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008"
                        ."FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC",
                        "DataHash" => "",
                        "HWPartNum" => "0039-21",
                        "FWPartNum" => "0039-20-01-C",
                        "Version" => "1.2.3",
                        "RelStatus" => \HUGnet\db\tables\Firmware::RELEASE,

                    ),
                    "Firmware"
                ),
                true,
                array(
                    "Device" => array(
                        "get" => array(
                            array("AddressSize"),
                            array("HWPartNum"),
                            array("id"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                            array("id"),
                            array("packetTimeout"),
                        ),
                        "decode" => array(
                            array(
                                "00000000E800392801410039201343000009"
                                    ."FFFFFF50010202020202020202"
                            ),
                        ),
                    ),
                    "Network" => array(
                        "send" => Array(
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOTLOADER',
                                ),
                                null,
                                array(
                                    "timeout" => 0.5,
                                    "find" => false,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'CONFIG',
                                ),
                                null,
                                array(
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0000FFFFFFFFFFFFFFFFFFFF0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."02700000020",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_FLASH',
                                    "Data" => "0080270010270000002027001027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "000A0039201343"
                                    ."000008FFFFFF500102020202101002026F6F6F6F6F7"
                                    ."0707001000000000000000200000000000000102700"
                                    ."1027000000102700102700000010270010270000001"
                                    ."0270010270000001027001027000000102700102700"
                                    ."0000202700102700000020270010270000002027001"
                                    ."0270000002027001027000000202700",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'WRITE_E2',
                                    "Data" => "008A1027000000"
                                    ."2027001027000000202700102700000020270010270"
                                    ."000002027001027000000FFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                                    ."FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
                                ),
                                null,
                                array(
                                    "find" => false,
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'SETCRC',
                                ),
                                null,
                                array(
                                    "timeout" => 2,
                                ),
                            ),
                            array(
                                array(
                                    "To" => 21,
                                    "Command" => 'BOOT',
                                ),
                                null,
                                array(
                                    "timeout" => 2,
                                ),
                            ),
                        ),
                    ),
                ),
                false,
            ),
            array( // #10 Not running boot loader
                array(
                    "Device" => array(
                        "get" => array(
                            "id" => 21,
                            "HWPartNum" => "0039-21-01-A",
                            "FWPartNum" => "0039-20-01-C",
                            "packetTimeout" => 2,
                        ),
                    ),
                    "Network" => array(
                        "send" => array(
                            \HUGnet\network\packets\Packet::factory(
                                array(
                                    "From" => 21,
                                    "Reply" => null,
                                )
                            ),
                        ),
                    ),
                ),
                \HUGnet\db\Table::factory(
                    $system,
                    array(),
                    "Firmware"
                ),
                true,
                array(
                ),
                false,
            ),
        );
    }
    /**
    * Tests the iteration and preload functions
    *
    * @param array $mocks    The data to reset the mocks with
    * @param array $config   The configuration array
    * @param bool  $loadData Whether to load the data or not
    * @param array $expect   The expected calls in the mock
    * @param bool  $return   The expected return
    *
    * @return null
    *
    * @dataProvider dataLoadFirmware()
    */
    public function testLoadFirmware($mocks, $config, $loadData, $expect, $return)
    {
        $system   = new \HUGnet\DummySystem();
        $device = new \HUGnet\DummyBase("Device");
        $driver = new \HUGnet\DummyBase("Driver");
        $system->resetMock($mocks);
        $devnet = &Network::factory($system, $device, $driver);
        $ret = $devnet->loadFirmware($config, $loadData);
        $this->assertSame($return, $ret,  "Return Wrong");
        foreach ((array)$expect as $obj => $call) {
            $this->assertEquals($call, $system->retrieve($obj),  "$obj Calls Wrong");
        }

    }

}
?>
