<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices;
/** This is a required class */
require_once CODE_BASE.'devices/Fcts.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'devices/datachan/Driver.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.8
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class FctsTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * This tests the exception when a system object is not passed
    *
    * @return null
    */
    public function testCreateThrowException()
    {
        $this->setExpectedException("InvalidArgumentException");
        // This throws an exception because $test is not a object
        Fcts::factory($test, $test2, $channels);
    }
    /**
    * This tests the exception when a system object is not passed
    *
    * @return null
    */
    public function testCreateThrowException2()
    {
        $test = new \HUGnet\DummySystem();
        // This just resets the mock
        $test->resetMock();
        $this->setExpectedException("RuntimeException");
        // This throws an exception because $test2 is not a object
        Fcts::factory($test, $test2, $channels);
    }
    /**
    * This tests the exception when a system object is not passed
    *
    * @return null
    */
    public function testSystem()
    {
        $dev = new \HUGnet\DummyBase("Device");
        $sys = new \HUGnet\DummyBase("System");
        $obj = Fcts::factory($sys, $dev, $channels);
        $this->assertSame($sys, $obj->system());
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(
                new \HUGnet\DummySystem("System"),
                new \HUGnet\DummyTable("Device"),
                array(
                    "System" => array(
                        "fatalError" => array(
                            array(
                                "HUGnet\devices\Fcts needs to be passed"
                                    ." a device object",
                                false,
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config      The configuration to use
    * @param mixed $gateway     The gateway to set
    * @param array $expectTable The table to expect
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $gateway, $expectTable)
    {
        $table = new \HUGnet\DummyTable();
        // This just resets the mock
        $table->resetMock();
        $obj = Fcts::factory($config, $gateway, $channels);
        // Make sure we have the right object
        $this->assertInstanceOf(
            "HUGnet\devices\Fcts", $obj, "Class wrong"
        );
        if (is_object($table)) {
            $this->assertEquals($expectTable, $table->retrieve(), "Data Wrong");
        }
    }
    /**
    * Data provider for testGetField
    *
    * @return array
    */
    public static function dataCount()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "get" => array(
                            "OutputTables" => 3,
                            "controlChannels" => array(
                                array(
                                    "units" => "bar",
                                    "decimals" => 4,
                                ),
                                array(
                                    "units" => "%",
                                    "decimals" => 4,
                                ),
                                array(
                                    "units" => "%",
                                    "decimals" => 4,
                                ),
                            ),
                        ),
                        "output" => array(
                            "0" => new \HUGnet\DummyTable("Output0"),
                            "1" => new \HUGnet\DummyTable("Output1"),
                            "2" => new \HUGnet\DummyTable("Output2"),
                        ),
                    ),
                    "Output0" => array(
                        "channels" => array(
                            array(
                                "unitType" => "Pressure",
                                "storageUnit" => "psi",
                                "storageType" =>
                                    \HUGnet\devices\datachan\Driver::TYPE_RAW,
                            ),
                        ),
                    ),
                    "Output1" => array(
                        "channels" => array(
                            array(
                                "unitType" => "Percent",
                                "storageUnit" => "decimal",
                                "storageType" =>
                                    \HUGnet\devices\datachan\Driver::TYPE_RAW,
                            ),
                        ),
                    ),
                    "Output2" => array(
                        "channels" => array(
                            array(
                                "unitType" => "Percent",
                                "storageUnit" => "decimal",
                                "storageType" =>
                                    \HUGnet\devices\datachan\Driver::TYPE_RAW,
                            ),
                        ),
                    ),
                ),
                array(
                    array(
                        "units" => "bar",
                        "decimals" => 4,
                    ),
                    array(
                        "units" => "%",
                        "decimals" => 4,
                    ),
                    array(
                        "units" => "%",
                        "decimals" => 4,
                    ),
                ),
                3
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config   The configuration to use
    * @param array $channels The channels to use
    * @param mixed $expect   The value we expect back
    *
    * @return null
    *
    * @dataProvider dataCount
    */
    public function testCount(
        $config, $channels, $expect
    ) {
        $sys = new \HUGnet\DummySystem("System");
        $dev = new \HUGnet\DummyTable("Device");
        $sys->resetMock($config);
        $obj = Fcts::factory($sys, $dev, $channels);
        $this->assertEquals($expect, $obj->count());
        unset($obj);
    }
    /**
    * Data provider for testGetField
    *
    * @return array
    */
    public static function data2Array()
    {
        return array(
            array(   // #0
                array(
                    "Device" => array(
                        "input" => new \HUGnet\DummyBase("Input")
                    ),
                    "Input" => array(
                        "getDrivers" => array("a" => "b"),
                    ),
                ),
                array(
                ),
                false,
                array(
                ),
            ),
            array(  // #1
                array(
                    "Device" => array(
                        "input" => new \HUGnet\DummyBase("Input")
                    ),
                    "Input" => array(
                        "getDrivers" => array("a" => "b"),
                    ),
                ),
                array(
                    array(
                    ),
                    array(
                    ),
                    array(
                    ),
                    array(
                    ),
                    array(
                    ),
                ),
                false,
                array(
                    array(
                        "driver"     => "NoOp",
                        "id"         => 0,
                    ),
                    array(
                        "driver"     => "NoOp",
                        "id"         => 1,
                    ),
                    array(
                        "driver"     => "NoOp",
                        "id"         => 2,
                    ),
                    array(
                        "driver"     => "NoOp",
                        "id"         => 3,
                    ),
                    array(
                        "driver"     => "NoOp",
                        "id"         => 4,
                    ),
                ),
            ),
            array(  // #2
                array(
                    "Device" => array(
                        "input" => new \HUGnet\DummyBase("Input")
                    ),
                    "Input" => array(
                        "getDrivers" => array("a" => "b"),
                    ),
                ),
                array(
                    0 => array(
                        "index" => 2,
                        "output" => 4,
                        "min" => 8,
                        "max" => 8150,
                        "label" => "PWM",
                    ),
                    2 => array(
                        "label" => "PWM",
                    ),
                    4 => array(
                    ),
                    6 => array(
                        "label" => "PWM",
                    ),
                    8 => array(
                        "label" => "PWM",
                    ),
                ),
                true,
                array(
                    array(
                        'longName' => 'This does nothing',
                        'shortName' => 'NoOp',
                        'type' => 'Simple',
                        'id' => 0,
                        'driver' => 'NoOp',
                        'data' => array(),
                        'name' => 'New Function',
                        'extraText' => array(),
                        'extraValues' => array(),
                        'extraDefault' => array(),
                        'extraDesc' => array(),
                        'extraNames' => array(),
                        'extra' => array(),
                        'validIds' => array(
                            'NoOp' => 'Do Nothing',
                        )
                    ),
                    array(
                        'longName' => 'This does nothing',
                        'shortName' => 'NoOp',
                        'type' => 'Simple',
                        'id' => 1,
                        'driver' => 'NoOp',
                        'data' => array(),
                        'name' => 'New Function',
                        'extraText' => array(),
                        'extraValues' => array(),
                        'extraDefault' => array(),
                        'extraDesc' => array(),
                        'extraNames' => array(),
                        'extra' => array(),
                        'validIds' => array(
                            'NoOp' => 'Do Nothing',
                        )
                    ),
                    array(
                        'longName' => 'This does nothing',
                        'shortName' => 'NoOp',
                        'type' => 'Simple',
                        'id' => 2,
                        'driver' => 'NoOp',
                        'data' => array(),
                        'name' => 'New Function',
                        'extraText' => array(),
                        'extraValues' => array(),
                        'extraDefault' => array(),
                        'extraDesc' => array(),
                        'extraNames' => array(),
                        'extra' => array(),
                        'validIds' => array(
                            'NoOp' => 'Do Nothing',
                        )
                    ),
                    array(
                        'longName' => 'This does nothing',
                        'shortName' => 'NoOp',
                        'type' => 'Simple',
                        'id' => 3,
                        'driver' => 'NoOp',
                        'data' => array(),
                        'name' => 'New Function',
                        'extraText' => array(),
                        'extraValues' => array(),
                        'extraDefault' => array(),
                        'extraDesc' => array(),
                        'extraNames' => array(),
                        'extra' => array(),
                        'validIds' => array(
                            'NoOp' => 'Do Nothing',
                        )
                    ),
                    array(
                        'longName' => 'This does nothing',
                        'shortName' => 'NoOp',
                        'type' => 'Simple',
                        'id' => 4,
                        'driver' => 'NoOp',
                        'data' => array(),
                        'name' => 'New Function',
                        'extraText' => array(),
                        'extraValues' => array(),
                        'extraDefault' => array(),
                        'extraDesc' => array(),
                        'extraNames' => array(),
                        'extra' => array(),
                        'validIds' => array(
                            'NoOp' => 'Do Nothing',
                        )
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config   The configuration to use
    * @param array $channels The channels to give it
    * @param mixed $default  Whether or not to show the default stuff
    * @param mixed $expect   The value we expect back
    *
    * @return null
    *
    * @dataProvider data2Array
    */
    public function test2Array(
        $config, $channels, $default, $expect
    ) {
        $sys = new \HUGnet\DummySystem("System");
        $dev = new \HUGnet\DummyTable("Device");
        $sys->resetMock($config);
        $obj = Fcts::factory($sys, $dev, $channels);
        $ret = $obj->toArray($default);
        $this->assertEquals($expect, $ret);
        unset($obj);
    }
    /**
    * Data provider for testGetField
    *
    * @return array
    */
    public static function dataStore()
    {
        return array(
            array(   // #0
                array(
                ),
                array(
                ),
                array(
                    "fcts" => array(
                        array(array(), true),
                    ),
                ),
            ),
            array(  // #1
                array(
                ),
                array(
                    array(
                    ),
                    array(
                    ),
                    array(
                    ),
                    array(
                    ),
                    array(
                    ),
                ),
                array(
                    "fcts" => array(
                        array(
                            array(
                                array(
                                    "id"         => 0,
                                    "driver"     => "NoOp",
                                ),
                                array(
                                    "id"         => 1,
                                    "driver"     => "NoOp",
                                ),
                                array(
                                    "id"         => 2,
                                    "driver"     => "NoOp",
                                ),
                                array(
                                    "id"         => 3,
                                    "driver"     => "NoOp",
                                ),
                                array(
                                    "id"         => 4,
                                    "driver"     => "NoOp",
                                ),
                            ),
                            true
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config   The configuration to use
    * @param array $channels The channels to give it
    * @param mixed $expect   The value we expect back
    *
    * @return null
    *
    * @dataProvider dataStore
    */
    public function testStore(
        $config, $channels, $expect
    ) {
        $sys = new \HUGnet\DummySystem("System");
        $dev = new \HUGnet\DummyTable("Device");
        $sys->resetMock($config);
        $obj = Fcts::factory($sys, $dev, $channels);
        $obj->store();
        $ret = $sys->retrieve("Device");
        $this->assertEquals($expect, $ret);
        unset($obj);
    }
    /**
    * Data provider for testApply
    *
    * @return array
    */
    public static function dataApply()
    {
        return array(
            array(  // #0
                array(
                    "id" => 0x123456,
                    "HWPartNum" => "0039-37-01-E",
                    "FWPartNum" => "0039-38-01-C",
                    "FWVersion" => "0.1.2",
                    "Driver"    => "e00393700",
                ),
                array(
                    array(
                        "id" => 0, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 1, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 2, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 3, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 4, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                ),
                true,
                array(
                    'id' => 0x123456,
                    'DeviceID' => '123456',
                    'DeviceName' => '',
                    'HWPartNum' => '0039-37-01-E',
                    'FWPartNum' => '0039-38-01-C',
                    'FWVersion' => '0.1.2',
                    'RawSetup' => '',
                    'Active' => 1,
                    'Publish' => 1,
                    'GatewayKey' => 0,
                    'ControllerKey' => 0,
                    'ControllerIndex' => 0,
                    'DeviceLocation' => '',
                    'DeviceJob' => '',
                    'Role' => '',
                    'Driver' => 'e00393700',
                    'PollInterval' => 0,
                    'ActiveSensors' => 0,
                    'DeviceGroup' => 'FFFFFF',
                    'dataChannels' => array(
                        0 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 0,
                            'port' => 'Port4',
                            'input' => 0,
                            'channel' => 0,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        1 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 1,
                            'port' => 'Port3',
                            'input' => 1,
                            'channel' => 1,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        2 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 2,
                            'port' => 'Port2',
                            'input' => 2,
                            'channel' => 2,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        3 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 3,
                            'port' => 'Port1',
                            'input' => 3,
                            'channel' => 3,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        4 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 4,
                            'port' => 'Port1',
                            'input' => 4,
                            'channel' => 4,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                    ),
                    'controlChannels' => array(),
                    'sensors' => '',
                    'params' => array(
                        'fcts' => array(
                            array(
                                "id" => 0, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 1, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 2, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 3, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 4, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                        ),
                        'fctsApplied' => array(
                            array(
                                "id" => 0, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 1, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 2, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 3, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 4, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                        ),
                        'fctsAppliedDate' => 123456,
                    ),
                    'input' => array(
                        0 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 1,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        1 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 2,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        2 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 6,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        3 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 7,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        4 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 7,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                        8 => array(
                            'id' => 255,
                        ),
                    ),
                    'output' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                        4 => array(
                            'id' => 255,
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                    ),
                    'process' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                    ),
                ),
                array(
                    'id' => 0x123456,
                    'DeviceID' => '123456',
                    'DeviceName' => '',
                    'HWPartNum' => '0039-37-01-E',
                    'FWPartNum' => '0039-38-01-C',
                    'FWVersion' => '0.1.2',
                    'RawSetup' => '',
                    'Active' => 1,
                    'Publish' => 1,
                    'GatewayKey' => 0,
                    'ControllerKey' => 0,
                    'ControllerIndex' => 0,
                    'DeviceLocation' => '',
                    'DeviceJob' => '',
                    'Role' => '',
                    'Driver' => 'e00393700',
                    'PollInterval' => 0,
                    'ActiveSensors' => 0,
                    'DeviceGroup' => 'FFFFFF',
                    'dataChannels' => array(),
                    'controlChannels' => array(),
                    'sensors' => '',
                    'params' => array(
                    ),
                    'input' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                        4 => array(
                            'id' => 255,
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                        8 => array(
                            'id' => 255,
                        ),
                    ),
                    'output' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                        4 => array(
                            'id' => 255,
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                    ),
                    'process' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                    ),
                ),
            ),
            array(  // #1
                array(
                    "id" => 0x123456,
                    "HWPartNum" => "0039-37-01-E",
                    "FWPartNum" => "0039-38-01-C",
                    "FWVersion" => "0.1.2",
                    "Driver"    => "e00393700",
                    "params"     => array(
                        'fcts' => array(
                            array(
                                "id" => 0, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 1, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 2, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 3, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 4, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => 0, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 1, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 2, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 3, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                    array(
                        "id" => 4, 
                        'driver' => 'Temperature',
                        "extra" => array(
                            0 => "ADuCThermocouple",
                        ),
                    ),
                ),
                false,
                array(
                    'id' => 0x123456,
                    'DeviceID' => '123456',
                    'DeviceName' => '',
                    'HWPartNum' => '0039-37-01-E',
                    'FWPartNum' => '0039-38-01-C',
                    'FWVersion' => '0.1.2',
                    'RawSetup' => '',
                    'Active' => 1,
                    'Publish' => 1,
                    'GatewayKey' => 0,
                    'ControllerKey' => 0,
                    'ControllerIndex' => 0,
                    'DeviceLocation' => '',
                    'DeviceJob' => '',
                    'Role' => '',
                    'Driver' => 'e00393700',
                    'PollInterval' => 0,
                    'ActiveSensors' => 0,
                    'DeviceGroup' => 'FFFFFF',
                    'dataChannels' => array(
                        0 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 0,
                            'port' => 'Port4',
                            'input' => 0,
                            'channel' => 0,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        1 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 1,
                            'port' => 'Port3',
                            'input' => 1,
                            'channel' => 1,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        2 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 2,
                            'port' => 'Port2',
                            'input' => 2,
                            'channel' => 2,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        3 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 3,
                            'port' => 'Port1',
                            'input' => 3,
                            'channel' => 3,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                        4 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'maxDecimals' => 4,
                            'storageUnit' => '&#176;C',
                            'unitType' => 'Temperature',
                            'dataType' => 'raw',
                            'label' => 'New Function',
                            'index' => 0,
                            'epChannel' => 4,
                            'port' => 'Port1',
                            'input' => 4,
                            'channel' => 4,
                            'validUnits' => array(
                                '&#176;F' => '&#176;F',
                                '&#176;C' => '&#176;C',
                                'K' => 'K',
                            ),
                            'validTypes' => array(
                                'raw' => 'raw',
                                'diff' => 'diff',
                                'ignore' => 'ignore',
                            ),
                        ),
                    ),
                    'controlChannels' => array(),
                    'sensors' => '',
                    'params' => array(
                        'fcts' => array(
                            array(
                                "id" => 0, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 1, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 2, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 3, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 4, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                        ),
                        'fctsApplied' => array(
                            array(
                                "id" => 0, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 1, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 2, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 3, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 4, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                        ),
                        'fctsAppliedDate' => 123456,
                    ),
                    'input' => array(
                        0 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 1,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        1 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 2,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        2 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 6,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        3 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 7,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        4 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 7,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                        8 => array(
                            'id' => 255,
                        ),
                    ),
                    'output' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                        4 => array(
                            'id' => 255,
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                    ),
                    'process' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                    ),
                ),
                array(
                    'id' => 0x123456,
                    'DeviceID' => '123456',
                    'DeviceName' => '',
                    'HWPartNum' => '0039-37-01-E',
                    'FWPartNum' => '0039-38-01-C',
                    'FWVersion' => '0.1.2',
                    'RawSetup' => '',
                    'Active' => 1,
                    'Publish' => 1,
                    'GatewayKey' => 0,
                    'ControllerKey' => 0,
                    'ControllerIndex' => 0,
                    'DeviceLocation' => '',
                    'DeviceJob' => '',
                    'Role' => '',
                    'Driver' => 'e00393700',
                    'PollInterval' => 0,
                    'ActiveSensors' => 0,
                    'DeviceGroup' => 'FFFFFF',
                    'dataChannels' => array(
                        0 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'dataType' => 'raw',
                        ),
                        1 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'dataType' => 'raw',
                        ),
                        2 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'dataType' => 'raw',
                        ),
                        3 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'dataType' => 'raw',
                        ),
                        4 => array(
                            'decimals' => 4,
                            'units' => '&#176;C',
                            'dataType' => 'raw',
                        ),
                    ),
                    'controlChannels' => array(),
                    'sensors' => '',
                    'params' => array(
                        'fcts' => array(
                            array(
                                "id" => 0, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 1, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 2, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 3, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 4, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                        ),
                        'fctsApplied' => array(
                            array(
                                "id" => 0, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 1, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 2, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 3, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                            array(
                                "id" => 4, 
                                'driver' => 'Temperature',
                                "extra" => array(
                                    0 => "ADuCThermocouple",
                                ),
                            ),
                        ),
                        'fctsAppliedDate' => 123456,
                    ),
                    'input' => array(
                        0 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 1,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        1 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 2,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        2 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 6,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        3 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 7,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        4 => array(
                            'id' => 249,
                            'type' => '',
                            'location' => 'New Function',
                            'driver' => 'ADuCInputTable',
                            'calibration' => '',
                            'tableEntry' => array(
                                'driver0' => 66,
                                'ADC0EN' => 1,
                                'ADC0CH' => 7,
                                'driver1' => 255,
                                'priority' => 255,
                                'process' => 0,
                                'process1' => 0,
                                'ADC0DIAG' => 0,
                                'HIGHEXTREF0' => 0,
                                'AMP_CM' => 0,
                                'ADC0CODE' => 0,
                                'ADC0REF' => 0,
                                'ADC0PGA' => 0,
                                'ADC1EN' => 0,
                                'ADC1DIAG' => 0,
                                'HIGHEXTREF1' => 0,
                                'ADC1CODE' => 0,
                                'ADC1CH' => 12,
                                'ADC1REF' => 0,
                                'BUF_BYPASS' => 0,
                                'ADC1PGA' => 0,
                                'CHOPEN' => 1,
                                'RAVG2' => 0,
                                'AF' => 0,
                                'NOTCH2' => 0,
                                'SF' => 9,
                            ),
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                        8 => array(
                            'id' => 255,
                        ),
                    ),
                    'output' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                        4 => array(
                            'id' => 255,
                        ),
                        5 => array(
                            'id' => 255,
                        ),
                        6 => array(
                            'id' => 255,
                        ),
                        7 => array(
                            'id' => 255,
                        ),
                    ),
                    'process' => array(
                        0 => array(
                            'id' => 255,
                        ),
                        1 => array(
                            'id' => 255,
                        ),
                        2 => array(
                            'id' => 255,
                        ),
                        3 => array(
                            'id' => 255,
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config   The configuration to use
    * @param array $channels The channels to give it
    * @param bool  $pretend  Whether to pretend to apply this or not.
    * @param mixed $return   The value we expect returned
    * @param mixed $expect   The value we expect back
    *
    * @return null
    *
    * @dataProvider dataApply
    */
    public function testApply(
        $config, $channels, $pretend, $return, $expect
    ) {
        $sys = $this->getMockBuilder('\HUGnet\System')
            ->enableArgumentCloning()
            ->setMethods(array("now"))
            ->disableOriginalConstructor()
            ->getMock();
        $sys->expects($this->any())
            ->method('now')
            ->will($this->returnValue(123456));
        $sys->config(array());
        
        $dev = $sys->device($config);
        $obj = Fcts::factory($sys, $dev, $channels);
        $ret = $obj->apply($pretend);
        $this->assertEquals($return, $ret, "Return wrong");
        $this->assertEquals($expect, $dev->fixture()->toArray(false), "Device Wrong");
        unset($obj);
    }

}
?>
