<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2013 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices;
/** This is a required class */
require_once CODE_BASE.'devices/Role.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.10.2
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class RoleTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->o = Role::factory();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataInput()
    {
        return array(
            array(
                "BadName", 0, null
            ),
            array(
                "RoleTestRole",
                0,
                array(
                    "table" => array(
                        'driver' => '41:DEFAULT',
                        'name' => 'Intput 0',
                    ),
                    "data" => array(
                        "extra" => array(3, 2, 1),
                        "location" => "Input 0",
                        "type" => "ASDF",
                        "id" => 0x61,
                    ),
                ),
            ),
            array(
                "RoleTestRole",
                1,
                array(
                    "table" => array(
                        "driver" => "42:DEFAULT",
                        "name" => "Input 1",
                    ),
                    "data" => array(
                        "id" => 0x83,
                        "extra" => array(1,2,3),
                        "location" => "Input1",
                        "type" => "FSDA",
                    ),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The name role.
    * @param int    $sid    The ID value to look for
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataInput
    */
    public function testInput($name, $sid, $expect)
    {
        $ret = $this->o->input($name, $sid);
        $this->assertEquals($expect, $ret);
    }
    /**
    * data provider for testProcess
    *
    * @return array
    */
    public static function dataProcess()
    {
        return array(
            array(
                "BadName", 0, null
            ),
            array(
                "RoleTestRole",
                0,
                array(
                    "table" => array(
                    ),
                    "data" => array(
                        "extra" => array(0, 1, 2),
                        "location" => "Process 0",
                        "id"     => 0x81,
                        "type"   => "ASDF",
                    ),
                ),
            ),
            array(
                "RoleTestRole",
                1,
                array(
                    "table" => array(
                    ),
                    "data" => array(
                        "extra" => array(2, 1, 0),
                        "location" => "Process 1",
                        "id"     => 0x23,
                        "type"   => "FSDA",
                    ),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The name role.
    * @param int    $sid    The ID value to look for
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataProcess
    */
    public function testProcess($name, $sid, $expect)
    {
        $ret = $this->o->process($name, $sid);
        $this->assertEquals($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutput()
    {
        return array(
            array(
                "BadName", 0, null
            ),
            array(
                "RoleTestRole",
                1,
                array(
                    "table" => array(),
                    "data" => array(
                        "extra" => array(1, 1),
                        "location" => "Output 1",
                        "id"     => 0x31,
                        "type"   => "FSDA",
                    ),
                ),
            ),
            array(
                "RoleTestRole",
                0,
                array(
                    "table" => array(),
                    "data" => array(
                        "extra" => array(0, 1),
                        "location" => "Output 0",
                        "id"     => 0x32,
                        "type"   => "ASDF",
                    ),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The name role.
    * @param int    $sid    The ID value to look for
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataOutput
    */
    public function testOutput($name, $sid, $expect)
    {
        $ret = $this->o->output($name, $sid);
        $this->assertEquals($expect, $ret);
    }
    /**
    * data provider for testGetAll
    *
    * @return array
    */
    public static function dataGetAll()
    {
        return array(
            array(
                "BadName", array("" => "None")
            ),
            array(
                "Linux", array("" => "None")
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $arch   The name of the arch
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGetAll
    */
    public function testGetAll($arch, $expect)
    {
        $ret = $this->o->getAll($arch);
        $this->assertSame($expect, $ret);
    }
}

/** This is the HUGnet namespace */
namespace HUGnet\devices\roles;
/** This is the base of our base class */
require_once CODE_BASE."base/Role.php";
/** This is the base of our Interface */
require_once CODE_BASE."devices/roles/RoleInterface.php";

/**
 * Base driver class for devices.
 *
 * This class deals with loading the drivers and figuring out what driver needs
 * to be loaded.
 *
 * @category   Libraries
 * @package    HUGnetLib
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.11.0
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.11.0
 *
 * @SuppressWarnings(PHPMD.NumberOfChildren)
 */
class RoleTestRole extends \HUGnet\base\Role
    implements RoleInterface
{
    /**
    *  This is the input table data
    */
    protected $input = array(
        0 => array(
            "table" => array(
                "driver" => "41:DEFAULT",
                "name" => "Intput 0",
            ),
            "data" => array(
                "id" => 0x61,
                "extra" => array(3,2,1),
                "location" => "Input 0",
                "type" => "ASDF",
            ),
        ),
        1 => array(
            "table" => array(
                "driver" => "42:DEFAULT",
                "name" => "Input 1",
            ),
            "data" => array(
                "id" => 0x83,
                "extra" => array(1,2,3),
                "location" => "Input1",
                "type" => "FSDA",
            ),
        ),
    );
    /**
    *  This is the output table data
    */
    protected $output = array(
        0 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(0, 1),
                "location" => "Output 0",
                "id"     => 0x32,
                "type"   => "ASDF",
            ),
        ),
        1 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(1, 1),
                "location" => "Output 1",
                "id"     => 0x31,
                "type"   => "FSDA",
            ),
        ),
    );
    /**
    *  This is the process table data
    */
    protected $process = array(
        0 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(0, 1, 2),
                "location" => "Process 0",
                "id"     => 0x81,
                "type"   => "ASDF",
            ),
        ),
        1 => array(
            "table" => array(
            ),
            "data" => array(
                "extra" => array(2, 1, 0),
                "location" => "Process 1",
                "id"     => 0x23,
                "type"   => "FSDA",
            ),
        ),
    );
}

?>
