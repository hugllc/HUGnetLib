<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices\processTable;
/** This is a required class */
require_once CODE_BASE.'devices/processTable/DriverADuC.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is a required class */
require_once CODE_BASE.'util/VPrint.php';
/** This is our base class */
require_once dirname(__FILE__)."/drivers/DriverTestBase.php";

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DriverADuCTest extends drivers\DriverTestBase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $process = new \HUGnet\DummyBase("Sensor");
        $process->resetMock(array());
        $this->o = \HUGnet\devices\processTable\Driver::factory(
            "DriverADuCTestClass", $process
        );
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataPresent()
    {
        return array(
            array(
                "ThisIsABadName",
                false,
            ),
            array(
                "unitType",
                true,
            ),
            array(
                "testParam",
                true,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The name of the variable to test.
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataPresent
    */
    public function testPresent($name, $expect)
    {
        $this->assertSame($expect, $this->o->present($name, 1));
    }
    /**
     * Data provider for testGetReading
     *
     * testGetReading($process, $A, $deltaT, $data, $prev, $expect)
     *
     * @return array
     */
    public static function dataGetReading()
    {
        return array(
            array(
                array(),
                256210,
                1,
                array(),
                array(),
                256210,
            ),
        );
    }
    /**
    * data provider for testNumeric
    *
    * @return array
    */
    public static function dataGetTwosCompliment()
    {
        return array(
            array(
                8388608,
                24,
                -8388608,
            ),
            array(
                0xFFFFFF,
                24,
                -1,
            ),
            array(
                0xFFFFFFFFFFFF,
                24,
                -1,
            ),
            array(
                0,
                24,
                0,
            ),
            array(
                8388607,
                24,
                8388607,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param int $value  The integer to feed to the function
    * @param int $bits   The number of bits to use
    * @param int $expect The expected data
    *
    * @return null
    *
    * @dataProvider dataGetTwosCompliment
    */
    public function testGetTwosCompliment($value, $bits, $expect)
    {
        $val = $this->o->getTwosCompliment($value, $bits);
        $this->assertSame($expect, $val);
    }

    /**
    * data provider for testNumeric
    *
    * @return array
    */
    public static function dataInputBiasCompensation()
    {
        return array(
            array(
                8388608,
                10,
                0,
                null,
            ),
            array(
                123456,
                0,
                244.252,
                123456.0,
            ),
            array(
                0,
                24,
                1,
                0.0,
            ),
            array(
                1000,
                1,
                100,
                1010.0,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param int   $value  The integer to feed to the function
    * @param float $Rin    The input resistance to use
    * @param float $Rbias  The bias resistance to use
    * @param int   $expect The expected data
    *
    * @return null
    *
    * @dataProvider dataInputBiasCompensation
    */
    public function testInputBiasComensation($value, $Rin, $Rbias, $expect)
    {
        bcscale(10);
        $val = $this->o->inputBiasCompensation($value, $Rin, $Rbias);
        $this->assertEquals($expect, $val, 0.0001);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
}

/** This is the HUGnet namespace */
namespace HUGnet\devices\processTable\drivers;
/**
 * Base driver class for devices.
 *
 * This class deals with loading the drivers and figuring out what driver needs
 * to be loaded.
 *
 * @category   Libraries
 * @package    HUGnetLib
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.9.7
 */
class DriverADuCTestClass extends \HUGnet\devices\processTable\DriverADuC
{
    /**
    * This is where the data for the driver is stored.  This array must be
    * put into all derivative classes, even if it is empty.
    */
    protected $params = array(
        "unitType" => "asdf", /* This is for test value only */
        "testParam" => "12345", /* This is for test value only */
        "extraDefault" => array(2,3,5,7,11),
        "extraText" => array("a","b","c","d","e"),
        "extraValues" => array(5, 5, 5, 5, 5),
    );
    /**
    * Gets the extra values
    *
    * @param int $index The extra index to use
    *
    * @return The extra value (or default if empty)
    */
    public function getExtra($index)
    {
        return parent::getExtra($index);
    }
    /**
    * Changes a raw reading into a output value
    *
    * @param int   $A      Output of the A to D converter
    * @param float $deltaT The time delta in seconds between this record
    * @param array &$data  The data from the other processs that were crunched
    * @param mixed $prev   The previous value for this process
    *
    * @return mixed The value in whatever the units are in the process
    *
    * @SuppressWarnings(PHPMD.UnusedFormalParameter)
    */
    public function getReading(
        $A, $deltaT = 0, &$data = array(), $prev = null
    ) {
        return $A;
    }
    /**
    * Changes an n-bit twos compliment number into a signed number PHP can use
    *
    * @param int   $value The incoming number
    * @param float $bits  The number of bits the incoming number is
    *
    * @return int A signed integer for PHP to use
    */
    public function getTwosCompliment($value, $bits = 24)
    {
        return parent::getTwosCompliment($value, $bits);
    }
    /**
    * Compensates for an input and bias resistance.
    *
    * The bias and input resistance values can be in Ohms, kOhms or even MOhms.  It
    * doesn't matter as long as they are both the same units.
    *
    * @param float $value The incoming number
    * @param float $Rin   The input resistor.
    * @param float $Rbias The bias resistor.
    *
    * @return float The compensated value
    */
    public function inputBiasCompensation($value, $Rin, $Rbias)
    {
        return parent::inputBiasCompensation($value, $Rin, $Rbias);
    }
}
?>
