<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices;
/** This is a required class */
require_once CODE_BASE.'devices/Fct.php';
/** This is a required class */
require_once CODE_BASE.'devices/functions/Driver.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is our units class */
require_once CODE_BASE."devices/datachan/Driver.php";
/** This is our interface */
require_once CODE_BASE."devices/functions/DriverInterface.php";

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class FctTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        \HUGnet\devices\functions\Driver::register(
            "FD:DEFAULT", "TestFctDriver1"
        );
        \HUGnet\devices\functions\Driver::register(
            "FC:DEFAULT", "TestFctDriver2"
        );
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
        parent::tearDown();
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function dataCreate()
    {
        return array(
            array(
                new \HUGnet\DummySystem(),
                null,
                "DummyTable",
                array(
                ),
            ),
            array(
                new \HUGnet\DummySystem(),
                array(
                    "id" => 5,
                    "name" => 3,
                    "value" => 1,
                ),
                "DummyTable",
                array(
                ),
            ),
            array(
                new \HUGnet\DummySystem(),
                array("dev" => 2, "input" => 0),
                new \HUGnet\DummyTable(),
                array(
                ),
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param mixed $data   The gateway to set
    * @param mixed $class  This is either the name of a class or an object
    * @param array $table  The table to use
    *
    * @return null
    *
    * @dataProvider dataCreate
    */
    public function testCreate($config, $data, $class, $table)
    {
        $table = new \HUGnet\DummyTable();
        $dev = new \HUGnet\DummyBase("Device");
        // This just resets the mock
        $table->resetMock();
        $obj = Fct::factory($config, $data, $dev);
        // Make sure we have the right object
        $this->assertInstanceOf(
            "HUGnet\devices\Fct", $obj, "Class wrong"
        );
    }
    /**
    * Data provider for testCreate
    *
    * @return array
    */
    public static function data2Array()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "input" => new \HUGnet\DummyBase("Input")
                    ),
                    "Input" => array(
                        "getDrivers" => array("a" => "b"),
                    ),
                ),
                array(
                    "id" => 0xFD,
                    "asdf" => 3,
                    "driver" => "TestFctDriver1",
                    "data" => array(1, 2, 3, 4),
                    "name" => "Hello",
                ),
                new \HUGnet\DummyTable("Table"),
                array(
                    "longName" => "Silly Fct Driver 1",
                    "shortName" => "SSD1",
                    'id' => 0xFD,
                    'data' => array(1,2,3,4),
                    'driver' => "TestFctDriver1",
                    "name" => "Hello",
                    'extraText' => array(),
                    'extraValues' => array(),
                    'extraDefault' => array(),
                    'extraDesc' => array(),
                    'extraNames' => array(),
                    'extra' => array(),
                    'validIds' => array(
                        'InputFunction' => 'Generic Input',
                    )
                )
            ),
            array(
                array(
                    "Device" => array(
                        "input" => new \HUGnet\DummyBase("Input")
                    ),
                    "Input" => array(
                        "getDrivers" => array("a" => "b"),
                    ),
                ),
                array(
                    "id" => 0xFD,
                    "asdf" => 3,
                    "data" => array(1, 2, 3, 4),
                    "tableEntry" => json_encode(array(4, 3, 2, 1)),
                ),
                new \HUGnet\DummyTable("Table"),
                array(
                    "longName" => "Input Function",
                    "shortName" => "Input",
                    'id' => 0xFD,
                    'data' => array(1,2,3,4),
                    'driver' => "InputFunction",
                    "type" => "Simple",
                    "name" => "New Function",
                    'extraText' => array("Driver"),
                    'extraValues' => array(array("a" => "b")),
                    'extraDefault' => array(0),
                    'extraDesc' => array("The input function driver to use"),
                    'extraNames' => array("driver" => 0),
                    'extra' => array(),
                    'validIds' => array(
                        'InputFunction' => 'Generic Input',
                    )
                )
            ),
        );
    }
    /**
    * This tests the object creation
    *
    * @param array $config The configuration to use
    * @param array $data   The data to be given to the object
    * @param mixed $class  This is either the name of a class or an object
    * @param mixed $expect The value we expect back
    *
    * @return null
    *
    * @dataProvider data2Array
    */
    public function test2Array(
        $config, $data, $class, $expect
    ) {
        $sys = new \HUGnet\DummySystem("System");
        $dev = new \HUGnet\DummyBase("Device");
        $sys->resetMock($config);
        $obj = Fct::factory($sys, $data, $dev);
        $json = $obj->toArray();
        $this->assertEquals($expect, $json);
        unset($obj);
    }


}

namespace HUGnet\devices\functions\drivers;

/**
 * Default input driver
 *
 * @category   Libraries
 * @package    HUGnetLib
 * @subpackage Fcts
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.9.7
 *
 * @SuppressWarnings(PHPMD.ShortVariable)
 */
class TestFctDriver1 extends \HUGnet\devices\functions\Driver
    implements \HUGnet\devices\functions\DriverInterface
{
    /**
    * This is where the data for the driver is stored.  This array must be
    * put into all derivative classes, even if it is empty.
    */
    protected $params = array(
        "longName" => "Silly Fct Driver 1",
        "shortName" => "SSD1",
    );

}
/**
 * Default input driver
 *
 * @category   Libraries
 * @package    HUGnetLib
 * @subpackage Fcts
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.9.7
 *
 * @SuppressWarnings(PHPMD.ShortVariable)
 */
class TestFctDriver2 extends \HUGnet\devices\functions\Driver
    implements \HUGnet\devices\functions\DriverInterface
{
    /**
    * This is where the data for the driver is stored.  This array must be
    * put into all derivative classes, even if it is empty.
    */
    protected $params = array(
        "longName" => "Silly Fct Driver 2",
        "shortName" => "SSD2",
    );

}


?>
