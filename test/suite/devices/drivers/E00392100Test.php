<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices\drivers;
/** This is the base class */
require_once dirname(__FILE__)."/DriverTestBase.php";
/** This is a required class */
require_once CODE_BASE.'devices/drivers/E00392100.php';
/** This is the dummy table container */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class E00392100Test extends DriverTestBase
{
    /** This is the class we are testing */
    protected $class = "E00392100";
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
        $device  = new \HUGnet\DummyTable("Device");
        $device->resetMock(array());
        $this->o = \HUGnet\devices\Driver::factory("E00392100", $device);
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        parent::tearDown();
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                "ThisIsABadName",
                null,
            ),
            array(
                "packetTimeout",
                2,
            ),
            array(
                "virtualSensors",
                4,
            ),
            array(
                "totalSensors",
                10,
            ),
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataDecodeSensorString()
    {
        return array(
            array(
                array(),
                "ThisIsString",
                array(
                    "DataIndex" => 0,
                    "timeConstant" => 1,
                    "String" => "isIsString",
                ),
            ),
            array(
                array(),
                "400B033F1300004A48994800007F134403",
                array(
                    "DataIndex" => 64,
                    "timeConstant" => 1,
                    "String" => "0B033F1300004A48994800007F134403"
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $mocks  The value to preload into the mocks
    * @param string $string The string to decode
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataDecodeSensorString
    */
    public function testDecodeSensorString($mocks, $string, $expect)
    {
        $device  = new \HUGnet\DummyTable("Device");
        $device->resetMock($mocks);
        $this->assertEquals($expect, $this->o->decodeSensorString($string));
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSensor()
    {
        return array(
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                0,
                array(
                    "id" => 0x40,
                    "sensor" => 0,
                    "dev" => 5,
                    "type" => "ControllerVoltage",
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                1,
                array(
                    "id" => 0x50,
                    "sensor" => 1,
                    "dev" => 5,
                    "type" => "ControllerCurrent",
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                2,
                array(
                    "id" => 2,
                    "sensor" => 2,
                    "dev" => 5,
                    "type" => "ControllerTemp",
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),

                    ),
                ),
                3,
                array(
                    "id" => 0x40,
                    "sensor" => 3,
                    "dev" => 5,
                    "type" => "ControllerVoltage",
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                4,
                array(
                    "id" => 0x50,
                    "sensor" => 4,
                    "dev" => 5,
                    "type" => "ControllerCurrent",
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                5,
                array(
                    "id" => 2,
                    "sensor" => 5,
                    "dev" => 5,
                    "type" => "ControllerTemp",
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                6,
                array(
                    "id" => 0xFE,
                    "sensor" => 6,
                    "dev" => 5,
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                7,
                array(
                    "id" => 0xFE,
                    "sensor" => 7,
                    "dev" => 5,
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                8,
                array(
                    "id" => 0xFE,
                    "sensor" => 8,
                    "dev" => 5,
                ),
            ),
            array(
                array(
                    "Device" => array(
                        "system" => new \HUGnet\DummySystem("System"),
                        "id" => 5,
                        "get" => array(
                            "id" => 5,
                        ),
                    ),
                ),
                9,
                array(
                    "id" => 0xFE,
                    "sensor" => 9,
                    "dev" => 5,
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $mocks  The value to preload into the mocks
    * @param int    $sid    The sensor id to get
    * @param string $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSensor
    */
    public function testSensor($mocks, $sid, $expect)
    {
        $device  = new \HUGnet\DummyTable("Device");
        $device->resetMock($mocks);
        $sensor = $this->o->sensor($sid);
        $ret = $device->retrieve();
        $this->assertEquals(
            $expect, $ret["Sensors"]["fromAny"][1][0], "Setup is wrong"
        );

        /*
        foreach ((array)$expect as $class => $calls) {
            foreach ($calls as $function => $args) {
                $this->assertEquals(
                    $args, $ret[$class][$function], "$key is wrong"
                );
            }
        }
        */
    }
}
?>
