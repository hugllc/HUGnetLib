<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices;
/** This is a required class */
require_once CODE_BASE.'devices/Config.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is a required class */
require_once CODE_BASE.'util/VPrint.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataDecode()
    {
        return array(
            array( // #0
                array(),
                "00000000E80039CF01410039246743000302FFFFFF50",
                array(
                    "Table" => array(
                        "set" => array(
                            array("id", 0xE8),
                            array("DeviceID", 0xE8),
                            array("HWPartNum", "0039CF0141"),
                            array("FWPartNum", "0039246743"),
                            array("FWVersion", "000302"),
                            array("DeviceGroup", "FFFFFF"),
                            array(
                                "RawSetup",
                                "00000000E80039CF01410039246743000302FFFFFF50"
                            ),
                        ),
                    ),
                ),
            ),
            array( // #1
                array(),
                "00000000E80039CF01410039246743000102FFFFFF50",
                array(
                    "Table" => array(
                        "set" => array(
                            array("id", 0xE8),
                            array("DeviceID", 0xE8),
                            array("HWPartNum", "0039CF0141"),
                            array("FWPartNum", "0039246743"),
                            array("FWVersion", "000102"),
                            array("DeviceGroup", "FFFFFF"),
                            array(
                                "RawSetup",
                                "00000000E80039CF01410039246743000102FFFFFF50"
                            ),
                        ),
                    ),
                ),
            ),
            array( // #2
                array(),
                "00000000E80039CE01410039246743000005FFFFFF1E",
                array(
                    "Table" => array(
                        "set" => array(
                            array("id", 0xE8),
                            array("DeviceID", 0xE8),
                            array("HWPartNum", "0039CE0141"),
                            array("FWPartNum", "0039246743"),
                            array("FWVersion", "000005"),
                            array("DeviceGroup", "FFFFFF"),
                            array(
                                "RawSetup",
                                "00000000E80039CE01410039246743000005FFFFFF1E"
                            ),
                        ),
                    ),
                ),
            ),
            array( // #3
                array(),
                "00000000E80039CD01410039456743000005FFFFFF530123456789",
                array(
                    "Table" => array(
                        "set" => array(
                            array("id", 0xE8),
                            array("DeviceID", 0xE8),
                            array("HWPartNum", "0039CD0141"),
                            array("FWPartNum", "0039456743"),
                            array("FWVersion", "000005"),
                            array("DeviceGroup", "FFFFFF"),
                            array(
                                "RawSetup",
                                "00000000E80039CD01410039456743000005FFFFFF"
                                ."530123456789"
                            ),
                        ),
                    ),
                ),
            ),
            array(  // #4
                array(),
                "00000000E80039CC01410039256743000005FFFFFF2101",
                array(
                    "Table" => array(
                        "set" => array(
                            array("id", 0xE8),
                            array("DeviceID", 0xE8),
                            array("HWPartNum", "0039CC0141"),
                            array("FWPartNum", "0039256743"),
                            array("FWVersion", "000005"),
                            array("DeviceGroup", "FFFFFF"),
                            array(
                                "RawSetup",
                                "00000000E80039CC01410039256743000005FFFFFF2101"
                            ),
                        ),
                    ),
                ),
            ),
            array(  // #5 Bad HWPartNum
                array(
                ),
                "00000000E80038CC01410039256743000005FFFFFF2101",
                array(
               ),
            ),
            array(  // #6 Bad FWPartNum
                array(
                ),
                "00000000E80039CC01410038256743000005FFFFFF2101",
                array(
               ),
            ),
            array(  // #7 Specific example
                array(
                ),
                "00000000016E00392801410039201843000002FFFFFF50010202020202020202"
                    ."7046707070707008200820082008204F034F034F034F03",
                array(
               ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $mocks  The value to preload into the mocks
    * @param string $string The setup string to test
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataDecode
    */
    public function testDecode($mocks, $string, $expect)
    {
        $table  = new \HUGnet\DummyTable();
        $driver = new \HUGnet\DummyBase("Driver");
        $table->resetMock($mocks);
        $obj = Config::factory($table, $driver);
        $obj->decode($string);
        $ret = $table->retrieve();
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataEncode()
    {
        return array(
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xE8,
                            "DeviceID" => "0000E8",
                            "HWPartNum" => "0039-CF-01-A",
                            "FWPartNum" => "0039-24-67-C",
                            "FWVersion" => "0.3.2",
                            "DeviceGroup" => "FFFFFF",
                        ),
                    ),
                ),
                "00000000E80039CF01410039246743000302FFFFFFFF",
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xE8,
                            "DeviceID" => "0000E8",
                            "HWPartNum" => "0039-CF-01-A",
                            "FWPartNum" => "0039-24-67-C",
                            "FWVersion" => "12.34.56",
                            "DeviceGroup" => "FFFFFF",
                        ),
                    ),
                ),
                "00000000E80039CF01410039246743123456FFFFFFFF",
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xE8,
                            "DeviceID" => "0000E8",
                            "HWPartNum" => "0039-CE-01-A",
                            "FWPartNum" => "0039-24-67-C",
                            "FWVersion" => "0.0.5",
                            "DeviceGroup" => "FFFFFF",
                        ),
                    ),
                ),
                "00000000E80039CE01410039246743000005FFFFFFFF",
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xE8,
                            "DeviceID" => "0000E8",
                            "HWPartNum" => "0039-CD-01-A",
                            "FWPartNum" => "0123-45-67-C",
                            "FWVersion" => "0.0.5",
                            "DeviceGroup" => "FFFFFF",
                        ),
                    ),
                ),
                "00000000E80039CD01410123456743000005FFFFFFFF",
            ),
            array(
                array(
                    "Table" => array(
                        "get" => array(
                            "id" => 0xE8,
                            "DeviceID" => "0000E8",
                            "HWPartNum" => "0039-CC-01-A",
                            "FWPartNum" => "0039-25-67-C",
                            "FWVersion" => "0.0.5",
                            "DeviceGroup" => "FFFFFF",
                        ),
                    ),
                ),
                "00000000E80039CC01410039256743000005FFFFFFFF",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $mocks  The value to preload into the mocks
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataEncode
    */
    public function testEncode($mocks, $expect)
    {
        $table  = new \HUGnet\DummyTable();
        $driver = new \HUGnet\DummyBase("Driver");
        $table->resetMock($mocks);
        $obj = Config::factory($table, $driver);
        $ret = $obj->encode();
        $this->assertSame($expect, $ret);
    }
}
?>
