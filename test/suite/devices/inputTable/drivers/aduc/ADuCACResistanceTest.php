<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices\inputTable\drivers\aduc;
/** This is the base class */
require_once dirname(__FILE__)."/DriverTestBaseADuC.php";
/** This is a required class */
require_once CODE_BASE.'devices/inputTable/drivers/aduc/ADuCACResistance.php';
/** This is a required class */
require_once CODE_BASE.'devices/inputTable/tables/ADuCInputTable.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.8
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ADuCACResistanceTest extends DriverTestBaseADuC
{
    /** This is the class we are testing */
    protected $class = "ADuCACResistance";
    /** This is our sensor class */
    protected $sensor;
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
        $this->o = \HUGnet\devices\inputTable\DriverADuC::factory(
            "ADuCACResistance", $this->input, 0
        );
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        parent::tearDown();
    }
    /**
    * data provider for testType
    *
    * @return array
    */
    public static function dataArrayFieldType()
    {
        $ret = array();
        foreach (array("storageUnit", "unitType") as $field) {
            for ($i = 1; $i < 9; $i++) {
                $ret[] = array($field, $i, "string");
            }
        }
        return $ret;
    }
    /**
    * Check the variable type
    *
    * @param string $field  The field to check
    * @param int    $sensor The sensor number
    * @param string $type   The type it should be
    *
    * @return null
    *
    * @dataProvider dataArrayFieldType
    */
    public function testArrayFieldType($field, $sensor, $type)
    {
        $name = $this->o->get($field, $sensor);
        $this->assertInternalType($type, $name, "$field must be a $type");
    }
    /**
    * data provider for testType
    *
    * @return array
    */
    public static function dataArrayFieldTypeNull()
    {
        $ret = array(
            array("storageUnit", null, 0),
            array("unitType", null, 0),
        );
        return $ret;
    }
    /**
    * Check the variable type
    *
    * @param string $field  The field to check
    * @param int    $sensor The sensor number
    * @param int    $expect The sensor it will register as
    *
    * @return null
    *
    * @dataProvider dataArrayFieldTypeNull
    */
    public function testFieldTypeNull($field, $sensor, $expect)
    {
        $name = $this->o->get($field, $sensor);
        $exp = $this->o->get($field, $expect);
        $this->assertSame($exp, $name);
    }
    /**
    * Check the variable type
    *
    * @param string $field  The field to check
    * @param int    $sensor The sensor number
    * @param int    $expect The sensor it will register as
    *
    * @return null
    *
    * @dataProvider dataArrayFieldTypeNull
    */
    public function testArrayFieldTypeNull($field, $sensor, $expect)
    {
        $name = $this->o->toArray($sensor);
        $exp = $this->o->toArray($expect);
        $this->assertSame($exp, $name);
    }
    /**
    * Check the variable type
    *
    * @param string $field  The field to check
    * @param int    $sensor The sensor number
    * @param string $type   The type it should be
    *
    * @return null
    *
    * @dataProvider dataArrayFieldType
    */
    public function testArrayFieldTypeArray($field, $sensor, $type)
    {
        $sen = new \HUGnet\DummyBase("Sensor");
        $sen->resetMock(
            array(
                "Sensor" => array(
                    "id" => $sensor,
                ),
            )
        );
        $name = $this->o->get($field, $sensor);
        $array = $this->o->toArray($sensor);
        $this->assertSame(
            $name, $array[$field], "toArray is wrong for field $field"
        );
    }
    /**
    * data provider for testType
    *
    * @return array
    */
    public static function dataArrayFieldSize()
    {
        $ret = array();
        for ($i = 1; $i < 9; $i++) {
            $ret[] = array("storageUnit", $i, 1, 15);
            $ret[] = array("unitType", $i, 1, 20);
        }
        return $ret;
    }
    /**
    * Check the variable type
    *
    * @param string $field  The field to check
    * @param int    $sensor The sensor number
    * @param int    $min    The minimum size
    * @param int    $max    The maximum size
    *
    * @return null
    *
    * @dataProvider dataArrayFieldSize
    */
    public function testArrayFieldSizeMin($field, $sensor, $min, $max)
    {
        $name = $this->o->get($field, $sensor);
        $this->assertGreaterThanOrEqual(
            $min, strlen($name), "$field:$sensor must be at least $min characters"
        );
    }
    /**
    * Check the variable type
    *
    * @param string $field  The field to check
    * @param int    $sensor The sensor number
    * @param int    $min    The minimum size
    * @param int    $max    The maximum size
    *
    * @return null
    *
    * @dataProvider dataArrayFieldSize
    */
    public function testArrayFieldSizeMax($field, $sensor, $min, $max)
    {
        $name = $this->o->get($field, $sensor);
        $this->assertLessThanOrEqual(
            $max, strlen($name), "$field:$sensor must be at most $max characters"
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataChannels()
    {
        return array(
            array(
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 10,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "ADuCACResistance",
                array(
                    array(
                        "decimals" => 8,
                        "units" => 'V',
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => 'Voltage',
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                    ),
                    array(
                        "decimals" => 8,
                        "units" => 'Ohms',
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => 'Impedance',
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port8",
                    ),
                ),
            ),
            array(
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 6,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "ADuCACResistance",
                array(
                    array(
                        "decimals" => 8,
                        "units" => 'V',
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => 'Voltage',
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port2",
                    ),
                    array(
                        "decimals" => 8,
                        "units" => 'Ohms',
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => 'Impedance',
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                    ),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $mocks  The mocks to set
    * @param string $name   The name of the variable to test.
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataChannels
    */
    public function testChannels($mocks, $name, $expect)
    {
        $this->input->load($mocks);
        $this->assertSame($expect, $this->o->channels());
    }
    /**
     * Data provider for testGetReading
     *
     * testGetReading($sensor, $A, $deltaT, $data, $prev, $expect)
     *
     * @return array
     */
    public static function dataGetReading()
    {
        return array(
            array( // #0
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 4,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                null,
                1,
                array(),
                array(),
                null,
                0
            ),
            array( // #1
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                null,
                1,
                array(),
                array(),
                null,
                1
            ),
            array( // #2
                array(
                    "Sensor" => array(
                        "id" => 1,
                        "get" => array(
                            "sensor" => 2,
                            "extra" => array(),
                        ),
                    ),
                    "Entry" => array(
                        "enabled" => 1,
                        "gain" => 1,
                        "twosComplimentEnabled" => 1,
                        "immediateProcessRoutine" => 4,
                    ),
                ),
                null,
                1,
                array(),
                array(),
                null,
                2
            ),
            array( // #3
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 4,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                null,
                1,
                array(),
                array(),
                null,
                3
            ),
        );
    }
    /**
     * Data provider for testGetReading
     *
     * testGetReading($sensor, $A, $deltaT, $data, $prev, $expect)
     *
     * @return array
     */
    public static function dataDecodeData()
    {
        return array(
            array( // #0
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "40420F0040420F00",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => 0.07152557,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                        "raw"  => 1000000,
                    ),
                    array(
                        "value" => 0.06338254,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => 1000000,
                    ),
                ),
            ),
            array( // #1
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "FFFFFFFF00000000",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => -7.0E-8,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                         "port" => "Port1",
                        "raw"  => -1,
                    ),
                    array(
                        "value" => null,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => 0,
                    ),
                ),
            ),
            array( // #2
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "40420F00",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => 0.07152557,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                        "raw"  => 1000000,
                    ),
                    array(
                        "value" => null,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => null,
                    ),
                ),
            ),
            array( // #3
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => null,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                        "raw"  => null,
                    ),
                    array(
                        "value" => null,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => null,
                    ),
                ),
            ),
            array( // #4
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(1.2, 0, 100, 1, 1, 10),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "40420F0040420F00",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => 0.0,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                        "raw"  => 1000000,
                    ),
                    array(
                        "value" => 6.33825385,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => 1000000,
                    ),
                ),
            ),
            array( // #5
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "40420F00C0BDF0FF",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => 0.07152557,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                        "raw"  => 1000000,
                    ),
                    array(
                        "value" => 0.06338254,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => -1000000,
                    ),
                ),
            ),
            array( // #6
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "400200004048000012345678",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => 4.12E-5,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                        "raw"  => 576,
                    ),
                    array(
                        "value" => 0.00110366,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => 18496,
                    ),
                ),
                8  // THis makes sure it doesn't take too much of the string
            ),
            array( // #7
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "location" => "asdf",
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 4,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 7,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 3,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "4002000040480000",
                1,
                array(),
                array(),
                array(
                    array(
                        "value" => 4.12E-5,
                        "decimals" => 8,
                        "units" => "V",
                        "maxDecimals" => 8,
                        'storageUnit' => 'V',
                        "unitType" => "Voltage",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 0",
                        "index" => 0,
                        "epChannel" => true,
                        "port" => "Port1",
                        "raw"  => 576,
                    ),
                    array(
                        "value" => 0.00110366,
                        "decimals" => 8,
                        "units" => "Ohms",
                        "maxDecimals" => 8,
                        'storageUnit' => 'Ohms',
                        "unitType" => "Impedance",
                        "dataType" => \HUGnet\devices\datachan\Driver::TYPE_RAW,
                        "label" => "asdf 1",
                        "index" => 1,
                        "epChannel" => true,
                        "port" => "Port7 -,Port8 +",
                        "raw"  => 18496,
                    ),
                ),
            ),
        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @param array $sensor   The sensor data array
    * @param mixed $A        Data for the sensor to work on
    * @param float $deltaT   The time differenct
    * @param array $data     The data array being built
    * @param array $prev     The previous record
    * @param mixed $expect   The return data to expect
    * @param int   $leftover The channel to test
    *
    * @return null
    *
    * @dataProvider dataDecodeData()
    */
    public function testDecodeData(
        $sensor, $A, $deltaT, $data, $prev, $expect, $leftover = 0
    ) {
        $this->input->load($sensor);
        $chan = 0;
        $ret = $this->o->decodeData($A, $chan, $deltaT, $data, $prev);
        $this->assertEquals($expect, $ret, 0.00001);
        $this->assertEquals($leftover, strlen($A), "Too much removed from string");
    }
    /**
     * Data provider for testGetReading
     *
     * testGetReading($sensor, $A, $deltaT, $data, $prev, $expect, $channel)
     *
     * @return array
     */
    public static function dataEncodeDataPoint()
    {
        return array(
            array( // #0
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "87234300",
                1,
                array(),
                array(),
                0.314713,
                0,
            ),
            array( // #1
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 1,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 1,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                null,
                0,
            ),
            array( // #2
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(1.2, 0, 100, 1, 1, 10),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                14.448166,
                1,
            ),
            array( // #3
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                null,
                10,
            ),
            array( // #4
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(1 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "87234300",
                1,
                array(),
                array(),
                0.314713,
                0,
            ),
            array( // #5
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(1.2, 0, 100, 1, 1, 10),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                null,
                1,
            ),
            array( // #6
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                1606.818182,
                3,
            ),
            array( // #7
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(1 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                1606.818182,
                3,
            ),
            array( // #8
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                null,
                3,
            ),
            array( // #9
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                0.001308,
                2,
            ),
            array( // #10
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(1 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                0.001308,
                2,
            ),
            array( // #11
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(0 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                0.001308,
                2,
            ),
            array( // #12
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(5 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                null,
                2,
            ),
            array( // #13
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(3 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                0.001308,
                2,
            ),
            array( // #14
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(5 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                0.001308,
                2,
            ),
            array( // #15
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                1606.818182,
                3,
            ),
            array( // #16
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(5 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "",
                1,
                array(),
                array(),
                0.00118901,
                2,
            ),
            array( // #17
                array(
                    "id" => 1,
                    "input" => 2,
                    "extra" => array(5 => 0),
                    "tableEntry" => array(
                        'driver0' => 255,
                        'driver1' => 255,
                        'priority' => 255,
                        'process' => 0,
                        'process1' => 0,
                        'ADC0EN' => 1,
                        'ADC0DIAG' => 0,
                        'HIGHEXTREF0' => 0,
                        'AMP_CM' => 0,
                        'ADC0CODE' => 0,
                        'ADC0CH' => 3,
                        'ADC0REF' => 0,
                        'ADC0PGA' => 0,
                        'ADC1EN' => 1,
                        'ADC1DIAG' => 0,
                        'HIGHEXTREF1' => 0,
                        'ADC1CODE' => 0,
                        'ADC1CH' => 12,
                        'ADC1REF' => 0,
                        'BUF_BYPASS' => 0,
                        'ADC1PGA' => 0,
                        'CHOPEN' => 1,
                        'RAVG2' => 0,
                        'AF' => 0,
                        'NOTCH2' => 0,
                        'SF' => 9,
                    ),
                ),
                "00000000",
                1,
                array(),
                array(),
                1767.4982301,
                3,
            ),

        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @param array $sensor  The sensor data array
    * @param mixed $expect  Data for the sensor to work on
    * @param float $deltaT  The time differenct
    * @param array $data    The data array being built
    * @param array $prev    The previous record
    * @param mixed $A       The return data to expect
    * @param int   $channel The channel to test
    *
    * @return null
    *
    * @dataProvider dataEncodeDataPoint()
    */
    public function testEncodeDataPoint(
        $sensor, $expect, $deltaT, $data, $prev, $A, $channel = 0
    ) {
        $this->input->load($sensor);
        $ret = $this->o->encodeDataPoint($A, $channel, $deltaT, $prev, $data);
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                "ThisIsABadName",
                array(
                ),
                null,
            ),
            array(
                "storageUnit",
                array(
                    "Sensor" => array(
                        "id" => 5,
                    ),
                ),
                'unknown',
            ),
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataExtra()
    {
        return array(
            array(
                3,
                array(
                    "Sensor" => array(
                        "id" => 5,
                    ),
                ),
                1.2,
            ),
            array(
                3,
                array(
                    "Sensor" => array(
                        "id" => 1,
                    ),
                ),
                1.2,
            ),
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataEncode()
    {
        return array(
            array( // #0
                array(
                    "id" => 0xF9,
                    "extra" => array(4 => 0x15),
                    "location" => "asdf",
                    "tableEntry" => json_encode(
                        array(
                            "driver0" => 0x4A,
                        )
                    ),
                ),
                "15",
            ),
            array( // #0
                array(
                    "id" => 0xF9,
                    "extra" => array(4 => 0x01),
                    "location" => "asdf",
                    "tableEntry" => json_encode(
                        array(
                            "driver0" => 0x4A,
                        )
                    ),
                ),
                "01",
            ),
            array( // #0
                array(
                    "id" => 0xF9,
                    "extra" => array(4 => 0x101),
                    "location" => "asdf",
                    "tableEntry" => json_encode(
                        array(
                            "driver0" => 0x4A,
                        )
                    ),
                ),
                "01",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $mocks  The value to preload into the mocks
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataEncode
    */
    public function testEncode($mocks, $expect)
    {
        $this->input->load($mocks);
        $ret = $this->o->encode();
        $this->assertSame($expect, $ret);
    }
}
?>
