<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2013 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices\roles;
/** This is a required class */
require_once CODE_BASE.'devices/roles/Controller.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.11.0
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 * @since      0.11.0
 */
class RoleTestBase extends \PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->o = Controller::factory();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    final public static function dataInputs()
    {
        $obj = Controller::factory();
        $return = array();
        for ($i = 0; $i < 30; $i++) {
            $ret = $obj->input($i);
            if (!is_null($ret)) {
                $return[] = array($ret);
            }
        }
        if (empty($return)) {
            $return[] = array(null);
        }
        return $return;
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $input The intput data to test
    *
    * @return null
    *
    * @dataProvider dataInputs
    */
    final public function testInputs($input)
    {
        if (is_array($input)) {
            $this->assertInternalType("array", $input["data"]);
            $this->assertInternalType("array", $input["table"]);
        } else if (!is_null($input)) {
            $this->assertInternalType("array", $input);
        }
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataInput()
    {
        return array(
            array(
                0, null
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param int   $iid    The ID value to look for
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataInput
    */
    public function testInput($iid, $expect)
    {
        $ret = $this->o->input($iid);
        $this->assertEquals($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    final public static function dataProcesses()
    {
        $obj = Controller::factory();
        $return = array();
        for ($i = 0; $i < 30; $i++) {
            $ret = $obj->process($i);
            if (!is_null($ret)) {
                $return[] = array($ret);
            }
        }
        if (empty($return)) {
            $return[] = array(null);
        }
        return $return;
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $process The process data to test
    *
    * @return null
    *
    * @dataProvider dataProcesses
    */
    final public function testProcesses($process)
    {
        if (is_array($process)) {
            $this->assertInternalType("array", $process["data"]);
            $this->assertInternalType("array", $process["table"]);
        } else if (!is_null($process)) {
            $this->assertInternalType("array", $process);
        }
    }
    /**
    * data provider for testProcess
    *
    * @return array
    */
    public static function dataProcess()
    {
        return array(
            array(
                0, null
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param int   $pid    The ID value to look for
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataProcess
    */
    public function testProcess($pid, $expect)
    {
        $ret = $this->o->process($pid);
        $this->assertEquals($expect, $ret);
    }
    /**
    * data provider for testOutputs
    *
    * @return array
    */
    final public static function dataOutputs()
    {
        $obj = Controller::factory();
        $return = array();
        for ($i = 0; $i < 30; $i++) {
            $ret = $obj->output($i);
            if (!is_null($ret)) {
                $return[] = array($ret);
            }
        }
        if (empty($return)) {
            $return[] = array(null);
        }
        return $return;
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $output The outtput data to test
    *
    * @return null
    *
    * @dataProvider dataOutputs
    */
    final public function testOutputs($output)
    {
        if (is_array($output)) {
            $this->assertInternalType("array", $output["data"]);
            $this->assertInternalType("array", $output["table"]);
        } else if (!is_null($output)) {
            $this->assertInternalType("array", $output);
        }
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutput()
    {
        return array(
            array(
                0, null
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param int   $oid    The ID value to look for
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataOutput
    */
    public function testOutput($oid, $expect)
    {
        $ret = $this->o->output($oid);
        $this->assertEquals($expect, $ret);
    }
}

?>
