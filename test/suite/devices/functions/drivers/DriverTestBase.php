<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices\functions\drivers;
/** This is the base class */
require_once CODE_BASE."devices/functions/Driver.php";
/** This is a required class */
require_once TEST_CONFIG_BASE.'suite/devices/IOPDriverTestBase.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
abstract class DriverTestBase extends \HUGnet\devices\IOPDriverTestBase
{
    /** This is the class we are testing */
    protected $class = "";
    /** This is the object we are testing */
    protected $o = null;
    /** This is our system object */
    protected $system;
    /** This is our output object */
    protected $output;

    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
        $this->system = $this->getMock("\HUGnet\System", array("now"));
        $this->system->expects($this->any())
            ->method('now')
            ->will($this->returnValue(123456));
        $this->output = $this->system->device()->output(0);
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->system);
        unset($this->o);
        parent::tearDown();
    }

    /**
    * data provider for testType
    *
    * @return array
    */
    final public static function dataInternalType()
    {
        return array(
            array("longName", "string"),
            array("shortName", "string"),
        );
    }
    /**
    * data provider for testType
    *
    * @return array
    */
    final public static function dataStringSize()
    {
        return array(
            array("longName", 40, 10),
            array("shortName", 15, 1),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The name of the variable to test.
    * @param array  $mock   The mocks to set up
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet($name, $mock, $expect)
    {
        $this->output->table()->fromArray($mock);
        $this->assertSame($expect, $this->o->get($name));
    }
    /**
    * Check the extraText value size
    *
    * @return null
    */
    public function testExtraTextValueSize()
    {
    }
    /**
    * Check the number of entries in extraText
    *
    * @return null
    */
    public function testExtraTextCount()
    {
    }
    /**
    * Check the number of entries in extraText
    *
    * @return null
    */
    public function testExtraDescCount()
    {
    }
    /**
    * test the set routine when an extra class exists
    *
    * @return null
    */
    public function testExtraValuesElementTypes()
    {
    }
    /**
    * Check the number of entries in extraValues
    *
    * @return null
    */
    public function testExtraValuesCount()
    {
    }
    /**
    * Check the number of entries in extraValues
    *
    * @return null
    */
    public function testExtraNamesValues()
    {
    }
    /**
    * Check the number of entries in extraValues
    *
    * @return null
    */
    public function testExtraNamesNumeric()
    {
    }
    /**
    * Check the number of entries in extraValues
    *
    * @return null
    */
    public function testExtraNamesCase()
    {
    }
}
?>
