<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
/** This is the HUGnet namespace */
namespace HUGnet\devices\functions\drivers;
/** This is the base class */
require_once CODE_BASE."devices/functions/Driver.php";
/** This is the base class */
require_once CODE_BASE."system/Device.php";
/** This is the base class */
require_once CODE_BASE."system/System.php";
/** This is the base class */
require_once CODE_BASE."devices/Fcts.php";
/** This is the base class */
require_once CODE_BASE."devices/Fct.php";
/** This is a required class */
require_once TEST_CONFIG_BASE.'suite/devices/IOPDriverTestBase.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
abstract class DriverTestBase extends \HUGnet\devices\IOPDriverTestBase
{
    /** This is the class we are testing */
    protected $class = "";
    /** This is the object we are testing */
    protected $o = null;
    /** This is our system object */
    protected $system;
    /** This is our output object */
    protected $device;
    /** This is our output object */
    protected $fct;
    /** This is stuff for our get mock */
    protected $stuff = array(
        "device" => array(
            "arch" => "0039-37",
        ), 
        "system" => array(
        ), 
        "fct" => array(
        )
    );

    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
        $this->system = $this->getMockBuilder('\HUGnet\System')
            ->enableArgumentCloning()
            ->setMethods(array("get", "device", "now"))
            ->disableOriginalConstructor()
            ->getMock();
        $this->system->expects($this->any())
            ->method('now')
            ->will($this->returnValue(123456));
        $this->system->expects($this->any())
            ->method('get')
            ->will($this->returnCallback(array($this, "getSystem")));
        $this->system->config(
            array(
                "servers" => array(
                    array(
                        "driver" => "sqlite",
                        "file" => ":memory:",
                        "group" => "default",
                    ),
                ),
                "verbose" => 0,
            )
        );
            
        $this->device = $this->getMockBuilder('\HUGnet\Device')
            ->enableArgumentCloning()
            ->setMethods(array("get", "getParam", "system", "fct"))
            ->disableOriginalConstructor()
            ->getMock();
        $this->device->expects($this->any())
            ->method('get')
            ->will($this->returnCallback(array($this, "getDevice")));
        $this->device->expects($this->any())
            ->method('getParam')
            ->will($this->returnCallback(array($this, "getDevice")));

            
        $this->fct = $this->getMockBuilder('\HUGnet\devices\Fct')
            ->enableArgumentCloning()
            ->setMethods(array("get", "system", "device"))
            ->disableOriginalConstructor()
            ->getMock();
        $this->fct->expects($this->any())
            ->method('get')
            ->will($this->returnCallback(array($this, "getFct")));

        
        $this->system->expects($this->any())
            ->method('device')
            ->will($this->returnCallback(array($this, "device")));
        $this->device->expects($this->any())
            ->method('system')
            ->will($this->returnCallback(array($this, 'system')));
        $this->device->expects($this->any())
            ->method('fct')
            ->will($this->returnCallback(array($this, "fct")));
        $this->fct->expects($this->any())
            ->method('device')
            ->will($this->returnCallback(array($this, "device")));
        $this->fct->expects($this->any())
            ->method('system')
            ->will($this->returnCallback(array($this, "system")));
    }
    /**
    * Returns our mock system object
    *
    * @return null
    */
    public function &system()
    {
        return $this->system;
    }
    /**
    * Returns our mock device object
    *
    * @return null
    */
    public function &device()
    {
        return $this->device;
    }
    /**
    * Returns our mock device object
    *
    * @return null
    */
    public function &fct()
    {
        return $this->fct;
    }
    /**
    * Returns our mock device object
    *
    * @param string $name The name of the stuff to get
    * 
    * @return null
    */
    public function getDevice($name)
    {
        return $this->stuff["device"][$name];
    }
    /**
    * Returns our mock device object
    *
    * @param string $name The name of the stuff to get
    *
    * @return null
    */
    public function getSystem($name)
    {
        return $this->stuff["system"][$name];
    }
    /**
    * Returns our mock device object
    *
    * @param string $name The name of the stuff to get
    *
    * @return null
    */
    public function getFct($name)
    {
        return $this->stuff["fct"][$name];
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->system);
        unset($this->o);
        parent::tearDown();
    }

    /**
    * data provider for testType
    *
    * @return array
    */
    final public static function dataInternalType()
    {
        return array(
            array("longName", "string"),
            array("shortName", "string"),
            array("type", "string"),
        );
    }
    /**
    * data provider for testType
    *
    * @return array
    */
    final public static function dataStringSize()
    {
        return array(
            array("longName", 40, 10),
            array("shortName", 15, 1),
        );
    }
    /**
    * data provider for testType
    *
    * @return array
    */
    public static function dataValues()
    {
        return array(
            array("type", array("Simple", "Moderate", "Complex")),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The name of the variable to test.
    * @param array  $stuff  The mocks to set up
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet($name, $stuff, $expect)
    {
        if (!empty($stuff)) {
            $this->stuff = $stuff;
        }
        $this->assertSame($expect, $this->o->get($name));
    }
    /**
    * data provider for testType
    *
    * @return array
    */
    public static function dataExecute()
    {
        return array(
            array("a", array(), false),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The name of the variable to test.
    * @param array  $stuff  The mocks to set up
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataExecute
    */
    public function testExecute($name, $stuff, $expect)
    {
        if (!empty($stuff)) {
            $this->stuff = $stuff;
        }
        $this->assertSame($expect, $this->o->execute());
    }
}
?>
