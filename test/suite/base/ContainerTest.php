<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2012 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
namespace HUGnet\base;

/** This is a required class */
require_once CODE_BASE.'base/Container.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ContainerTest extends \PHPUnit_Framework_TestCase
{
    /** @var array Default config */
    protected $config;
    /** @var object System Class  */
    protected $system;
    /** @var object Object under test  */
    protected $o;

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->config = array(
            "System" => array(
                "get" => array(
                    "verbose" => 0,
                ),
            ),
        );
        $this->system = new \HUGnet\DummySystem("System");
        $this->system->resetMock($this->config);

        $this->o = &HUGnetContainerTestClass::factory(
            $this->system, array(), "HUGnetContainerTestClass"
        );
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("Attrib1", 16, 16),
            array("Attrib1", "16Test", 16),
            array("Attrib5", "Hello", null),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $attrib This is the attribute to set
    * @param mixed  $value  The value to set it to
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet(
        $attrib,
        $value,
        $expect
    ) {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, array(), "HUGnetContainerTestClass"
        );
        $obj->set($attrib, $value);
        $this->assertSame($expect, $obj->get($attrib));
    }

    /**
    * data provider for testGet
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array("var", 16, null),
            array("Hello", 16, 16),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $attrib This is the attribute to set
    * @param mixed  $value  The value to set it to
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet(
        $attrib,
        $value,
        $expect
    ) {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, array(), "HUGnetContainerTestClass3"
        );
        $obj->setFixed($attrib, $value);
        $this->assertSame($expect, $obj->get($attrib));
    }




    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataGetProperties()
    {
        return array(
            array(
                "HUGnetContainerTestClass",
                array(
                    "Attrib1", "Attrib2", "Attrib3", "Attrib4"
                ),
            ),
            array(
                "HUGnetContainerTestClass2",
                array(
                    "Attrib5", "Attrib6", "Attrib7", "Attrib8",
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $class  The class to build
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGetProperties
    */
    public function testGetProperties($class, $expect)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, array(), $class
        );
        $ret = $obj->getProperties();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataClearData()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "NotDefault",
                    "Attrib3" => "Data Where",
                    "Attrib4" => array("Hello There"),
                    "Attrib5" => "Full String",
                    "Attrib6" => array("Two Element"),
                    "Attrib7" => 1.00253,
                    "Attrib8" => 156.9153,
                ),
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hello"),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The expected return from extra
    * @param array $expect  The expected return from extra
    *
    * @return null
    *
    * @dataProvider dataClearData
    */
    public function testClearData(
        $preload,
        $expect
    ) {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, $preload, "HUGnetContainerTestClass"
        );
        $obj->clearData();
        $object = &$obj;
        $this->assertSame(
            $expect,
            $obj->toArray()
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSetDefault()
    {
        return array(
            array("Attrib1", 16, 0),
            array("Attrib1", "16Test", 0),
            array("Attrib5", "Hello", null),
            array("Attrib1", 16, 0),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $attrib This is the attribute to set
    * @param mixed  $value  The value to set it to
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSetDefault
    */
    public function testSetDefault(
        $attrib,
        $value,
        $expect
    ) {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, array(), "HUGnetContainerTestClass"
        );
        $obj->set($attrib, $value);
        $obj->setDefault($attrib);
        $this->assertSame(
            $expect, $obj->get($attrib), "$expect != ".$obj->get($attrib)
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToArray()
    {
        $system = new \HUGnet\DummySystem("System");
        return array(
            array(
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => HUGnetContainerTestClass::factory(
                        $system, array(), "HUGnetContainerTestClass2"
                    ),
                    "Attrib4" => array("Hello"),
                    "Attrib5" => "Blank String",
                    "Attrib6" => array("One Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4,
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        "Attrib5" => "Blank String",
                        "Attrib6" => array("One Element"=>array("Two Element")),
                        "Attrib7" => 1.0,
                        "Attrib8" => 4,
                    ),
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => HUGnetContainerTestClass::factory(
                        $system, array(), "HUGnetContainerTestClass2"
                    ),
                    "Attrib4" => array("Hello"),
                    "Attrib5" => "Blank String",
                    "Attrib6" => array("One Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4,
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        "Attrib5" => "Blank String",
                        "Attrib6" => array("One Element"=>array("Two Element")),
                        "Attrib7" => 1.0,
                        "Attrib8" => 4,
                    ),
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        HUGnetContainerTestClass::factory(
                            $system, array(), "HUGnetContainerTestClass2"
                        )
                    ),
                    "Attrib4" => array("Hello"),
                    "Attrib5" => "Blank String",
                    "Attrib6" => array("One Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4,
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        array(
                            "Attrib5" => "Blank String",
                            "Attrib6" => array("One Element"=>array("Two Element")),
                            "Attrib7" => 1.0,
                            "Attrib8" => 4,
                        ),
                    ),
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                "",
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                "",
                "HUGnetContainerTestClass",
                array(),
                false,
            ),
            array(
                array(
                    "Attrib4" => array("There"),
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib4" => array("There"),
                ),
                false,
            ),
            array(
                array(
                    "var" => 0,
                    "other" => array(
                        "first" => array(
                            "index" => 0,
                        ),
                    ),
                ),
                "HUGnetContainerTestClass3",
                array(
                    "var" => 0,
                    "other" => array(
                        "first" => array(
                            "index" => 0,
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload What to preload the object with
    * @param string $class   The test class to use
    * @param array  $expect  The expected return
    * @param bool   $default Whether to return the default items or not
    *
    * @return null
    *
    * @dataProvider dataToArray
    */
    public function testToArray($preload, $class, $expect, $default = true)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, $preload, $class
        );
        $ret = $obj->toArray($default);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
                array(
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4.321,
                ),
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
                null,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $array       The array to use to build it
    * @param array $expect      The expected return
    * @param array $expectExtra The expected return from extra
    *
    * @return null
    *
    * @dataProvider dataFromArray
    */
    public function testFromArray($array, $expect, $expectExtra)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, array(), "HUGnetContainerTestClass"
        );
        $obj->fromArray($array);
        foreach ((array)$expect as $key => $val) {
            $this->assertSame(
                $val,
                $obj->get($key),
                "$key is wrong"
            );
        }
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function data2String()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                json_encode(
                    array(
                        "Attrib1" => 10,
                        "Attrib2" => "Hello",
                        "Attrib3" => "Data",
                        "Attrib4" => array("Hi"),
                    )
                ),
            ),
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                json_encode(
                    array(
                        "Attrib1" => 10,
                        "Attrib2" => "Hello",
                        "Attrib3" => "Data",
                        "Attrib4" => array("Hi"),
                    )
                ),
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                json_encode(
                    array(
                        "Attrib1" => 100,
                        "Attrib2" => "Hello There",
                        "Attrib3" => "Some Data",
                        "Attrib4" => array("Hello Everyone"),
                    )
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testToString($preload, $expect)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, $preload, "HUGnetContainerTestClass"
        );
        $ret = $obj->toString();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataHash()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                "8d6c4f5be65833c0a48ba98dbafff5cd"
            ),
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                "8d6c4f5be65833c0a48ba98dbafff5cd",
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                "213a1a7b777472df269e077d96420f71",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataHash
    */
    public function testHash($preload, $expect)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, $preload, "HUGnetContainerTestClass"
        );
        $ret = $obj->hash();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testIsEmpty
    *
    * @return array
    */
    public static function dataIsEmpty()
    {
        return array(
            array(
                array(
                ),
                true,
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                false,
            ),
        );
    }
    /**
    * test the isEmpty method
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataIsEmpty
    */
    public function testIsEmpty($preload, $expect)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, $preload, "HUGnetContainerTestClass"
        );
        $ret = $obj->isEmpty();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testOverloadToString($preload, $expect)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, $preload, "HUGnetContainerTestClass"
        );
        $this->assertSame(
            $expect,
            (string)$obj
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromString()
    {
        return array(
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 100,
                            "Attrib2" => "Hello There",
                            "Attrib3" => "Some Data",
                            "Attrib4" => array("Hello Everyone"),
                            "Attrib5" => "NonBlank String",
                            "Attrib6" => array("Three Element"),
                            "Attrib7" => 1.15,
                            "Attrib8" => 9.95,
                        )
                    )
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
            array(
                json_encode(
                    array(
                        "Attrib1" => 10,
                        "Attrib2" => "Hello",
                        "Attrib4" => array("Hi"),
                        "Attrib5" => "Another string",
                        "Attrib6" => array("Two Element"),
                        "Attrib8" => 4.321,
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                json_encode(
                    array(
                        "Attrib1" => 10,
                        "Attrib2" => "Hello",
                        "Attrib4" => array("Hi"),
                        "Attrib5" => "Another string",
                        "Attrib6" => array("Two Element"),
                        "Attrib8" => 4.321,
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                json_encode(
                    array(
                        "Attrib1" => 100,
                        "Attrib2" => "Hello There",
                        "Attrib3" => "Some Data",
                        "Attrib4" => array("Hello Everyone"),
                        "Attrib5" => "NonBlank String",
                        "Attrib6" => array("Three Element"),
                        "Attrib7" => 1.15,
                        "Attrib8" => 9.95,
                    )
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $string The array to use to build it
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataFromString
    */
    public function testFromString($string, $expect)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, array(), "HUGnetContainerTestClass"
        );
        $obj->fromString($string);
        $this->assertSame(
            $expect,
            $obj->toArray()
        );
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructorData()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 100,
                            "Attrib2" => "Hello There",
                            "Attrib3" => "Some Data",
                            "Attrib4" => array("Hello Everyone"),
                            "Attrib5" => "NonBlank String",
                            "Attrib6" => array("Three Element"),
                            "Attrib7" => 1.15,
                            "Attrib8" => 9.95,
                        )
                    )
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $data   The data used to build the stuff
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructorData
    */
    public function testConstructorData($data, $expect)
    {
        $obj = &HUGnetContainerTestClass::factory(
            $this->system, $data, "HUGnetContainerTestClass"
        );
        $this->assertSame(
            $expect,
            $obj->toArray()
        );
    }

}
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerTestClass extends Container
{
    /** These are the endpoint information bits */
    /** @var array This is the default values for the data */
    protected $default = array(
        "Attrib1" => 0,
        "Attrib2" => "Default",
        "Attrib3" => "Data",
        "Attrib4" => array("Hello"),
    );
    /** @var array This is where the data is stored */
    protected $data = array();

    /** @var object We are going to put an object here */
    public $test = null;
    /** @var object We are going to put an object here */
    protected $atest = null;

    /**
    * Creates the object
    *
    * @param object &$system This is the system object
    * @param mixed  $data    The data to import into the class
    * @param string $class   The class or object to use
    *
    * @return null
    */
    public static function &factory(&$system, $data = array(), $class = null)
    {
        if (empty($class)) {
            $class = __CLASS__;
        }
        $class = "\\HUGnet\\base\\".$class;
        $obj = new $class($system, $data);
        return $obj;
    }
    /**
    * function to check Attrib1
    *
    * @param mixed $value The value to set it to
    *
    * @return null
    */
    protected function setAttrib1($value)
    {
        $this->data["Attrib1"] = (int) $value;
    }


}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerTestClass2 extends Container
{
    /** These are the endpoint information bits */
    /** @var array This is the default values for the data */
    protected $default = array(
        "Attrib5" => "Blank String",
        "Attrib6" => array("One Element" => array("Two Element")),
        "Attrib7" => 1.0,
        "Attrib8" => 4,
    );
    /** @var array This is where the data is stored */
    protected $data = array();
    /**
    * Creates the object
    *
    * @param object &$system This is the system object
    * @param mixed  $data    The data to import into the class
    * @param string $class   The class or object to use
    *
    * @return null
    */
    public static function &factory(&$system, $data = array(), $class = null)
    {
        if (empty($class)) {
            $class = __CLASS__;
        }
        $class = "\\HUGnet\\base\\".$class;
        $obj = new $class($system, $data);
        return $obj;
    }

    /**
    * function to check Attrib5
    *
    * @param mixed $value The value to set it to
    *
    * @return null
    */
    protected function setAttrib5($value)
    {
        $this->data["Attrib5"] = (string) $value;
    }

    /**
    * function to check Attrib5
    *
    * @return null
    */
    protected function args()
    {
        $ret = func_get_args();
        return $ret;
    }

}
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerTestClass3 extends Container
{
    /** These are the endpoint information bits */
    /** @var array This is the default values for the data */
    protected $default = array(
        "var" => null,
        "other" => array(
            "first" => array(
                "index" => null,
            ),
        ),
    );
    /**
    * Creates the object
    *
    * @param object &$system This is the system object
    * @param mixed  $data    The data to import into the class
    * @param string $class   The class or object to use
    *
    * @return null
    */
    public static function &factory(&$system, $data = array(), $class = null)
    {
        if (empty($class)) {
            $class = __CLASS__;
        }
        $class = "\\HUGnet\\base\\".$class;
        $obj = new $class($system, $data);
        return $obj;
    }
    /**
    * Set one of the fixed value
    *
    * @param string $name  The name of the value
    * @param mixed  $value The value to set
    *
    * @return null
    */
    public function setFixed($name, $value)
    {
        $this->fixed[$name] = $value;
    }

}
?>
