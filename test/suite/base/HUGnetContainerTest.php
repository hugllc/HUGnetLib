<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
/** This is a required class */
require_once CODE_BASE.'base/HUGnetContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->o = new HUGnetContainerTestClass();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("Attrib1", 16, 16),
            array("Attrib1", 16, 0, "Attrib1"),
            array("Attrib1", "16Test", 16),
            array("Attrib5", "Hello", null),
            array("Attrib1", 16, 16, ""),
            array("Attrib1", 16, 0, "Attrib1"),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $attrib This is the attribute to set
    * @param mixed  $value  The value to set it to
    * @param int    $expect The expected return
    * @param mixed  $lock   The spot to lock
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet(
        $attrib,
        $value,
        $expect,
        $lock = ""
    ) {
        $obj = new HUGnetContainerTestClass();
        $obj->lock($lock);
        $obj->$attrib = $value;
        $this->assertSame($expect, $obj->$attrib);
    }

    /**
    * data provider for testGet
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array("var", 16, null),
            array("Hello", 16, 16),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $attrib This is the attribute to set
    * @param mixed  $value  The value to set it to
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet(
        $attrib,
        $value,
        $expect
    ) {
        $obj = new HUGnetContainerTestClass3();
        $obj->setFixed($attrib, $value);
        $this->assertSame($expect, $obj->$attrib);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSetArray()
    {
        return array(
            array("There", 16, array("Hello", "There" => 16)),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $attrib This is the attribute to set
    * @param mixed  $value  The value to set it to
    * @param int    $expect The expected return
    * @param mixed  $lock   The spot to lock
    *
    * @return null
    *
    * @dataProvider dataSetArray
    */
    public function testSetArray(
        $attrib,
        $value,
        $expect,
        $lock = ""
    ) {
        $obj = new HUGnetContainerTestClass();
        $obj->lock($lock);
        $obj->clearData();
        $obj->Attrib4[$attrib] = $value;
        $this->assertSame($expect, $obj->Attrib4);

    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataRegister()
    {
        return array(
            array(
                new HUGnetContainerTestClass2(),
                "test",
                true,
                array(
                    "Attrib5", "Attrib6", "Attrib7", "Attrib8",
                ),
            ),
            array(
                null,
                "test",
                false,
                null,
            ),
            array(
                new HUGnetContainerTestClass2(),
                "atest",
                true,
                array(
                    "Attrib5", "Attrib6", "Attrib7", "Attrib8",
                ),
            ),
        );
    }

    /**
    * test the register function
    *
    * @param mixed  $obj        The class or object to use
    * @param string $var        The variable to register the object on
    * @param bool   $expect     The return expected
    * @param array  $properties The properties we should expect in the subclass
    *
    * @return null
    *
    * @dataProvider dataRegister
    */
    public function testRegister($obj, $var, $expect, $properties)
    {
        $object = new HUGnetContainerTestClass();
        $ret = $object->register($obj, $var);
        $this->assertSame($expect, $ret);
        if ($expect) {
            $this->assertSame(
                $obj,
                $this->readAttribute($object, $var)
            );
            // This will tell us if the class is registered
            $this->assertSame(
                $properties,
                $obj->getProperties()
            );
        } else {
            $this->assertNull(
                $this->readAttribute($object, $var)
            );
        }
    }

    /**
    * data provider for testOutputFactory
    *
    * @return array
    */
    public static function dataOutputFactory()
    {
        return array(
            array(
                "HUGnetContainerTestClass",
                array(
                    "type" => "hello",
                ),
                array(
                    "type" => "hello",
                    "iterate" => true,
                ),
            ),
        );
    }

    /**
    * test the register function
    *
    * @param string $class      The class or object to use
    * @param array  $data       The data to feed to the outputcontainer class
    * @param array  $expectData The data to expect in the outputcontainer class
    *
    * @return null
    *
    * @dataProvider dataOutputFactory
    */
    public function testOutputFactory($class, $data, $expectData)
    {
        $obj = new $class();
        $ret = &$obj->outputFactory($data);
        $this->assertSame("OutputContainer", get_class($ret), "Class is wrong");
        $this->assertAttributeSame($obj, "container", $ret, "Container is wrong");
        $this->assertAttributeSame($expectData, "data", $ret, "Data is wrong");
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFactory()
    {
        return array(
            array(
                "HUGnetContainerTestClass2",
                array(),
                array(
                    "Attrib5" => "Blank String",
                    "Attrib6" => array("One Element"=>array("Two Element")),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4,
                ),
            ),
            array(
                "HUGnetContainerTestClass2",
                array(
                    "Attrib5" => "String",
                    "Attrib6" => array("Two Element"),
                    "Attrib7" => 2.0,
                    "Attrib8" => 4.5,
                ),
                array(
                    "Attrib5" => "String",
                    "Attrib6" => array("Two Element"),
                    "Attrib7" => 2.0,
                    "Attrib8" => 4.5,
                ),
            ),
            array(
                "BadClass",
                array(
                ),
                array(
                ),
            ),
            array(
                "",
                array(
                ),
                array(
                ),
            ),
        );
    }

    /**
    * test the register function
    *
    * @param mixed  $class  The class to use
    * @param string $data   The data to send to the object
    * @param mixed  $expect The return expected
    *
    * @return null
    *
    * @dataProvider dataFactory
    */
    public function testFactory($class, $data, $expect)
    {
        $ret = &HUGnetContainerTestClass::factory($data, $class);
        if (is_object($ret)) {
            $this->assertSame($class, get_class($ret));
            $this->assertSame(
                $expect,
                $ret->toArray()
            );
        } else {
            $this->assertNull(
                $ret
            );
        }
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataGetProperties()
    {
        return array(
            array(
                "HUGnetContainerTestClass",
                array(
                    "Attrib1", "Attrib2", "Attrib3", "Attrib4"
                ),
            ),
            array(
                "HUGnetContainerTestClass2",
                array(
                    "Attrib5", "Attrib6", "Attrib7", "Attrib8",
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $class  The class to build
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGetProperties
    */
    public function testGetProperties($class, $expect)
    {
        $obj = new $class();
        $ret = $obj->getProperties();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataUnset()
    {
        return array(
            array(
                "Attrib1",
                null,
            ),
            array(
                "Attrib7",
                null,
                true
            ),
            array(
                "Attrib1",
                null,
            ),
            array(
                "Attrib7",
                null,
            ),
            array(
                "Attrib1",
                0,
                "Attrib1",
            ),
            array(
                "Attrib1",
                0,
                "Attrib1",
            ),
            array(
                "Attrib7",
                null,
                "Attrib7",
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The attribute name to get
    * @param int    $expect The expected return
    * @param mixed  $lock   The attribute to lock
    *
    * @return null
    *
    * @dataProvider dataUnset
    */
    public function testUnset($name, $expect, $lock = "")
    {
        $obj = new HUGnetContainerTestClass();
        $obj->lock($lock);
        unset($obj->$name);
        $this->assertSame($expect, $obj->$name);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataIsset()
    {
        return array(
            array(
                "Attrib1",
                true,
            ),
            array(
                "Attrib9",
                false,
            ),
            array(
                "Attrib1",
                true,
            ),
            array(
                "Attrib7",
                false,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $name   The attribute name to get
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataIsset
    */
    public function testIsset($name, $expect)
    {
        $obj = new HUGnetContainerTestClass();
        $ret = isset($obj->$name);
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataClearData()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "NotDefault",
                    "Attrib3" => "Data Where",
                    "Attrib4" => array("Hello There"),
                    "Attrib5" => "Full String",
                    "Attrib6" => array("Two Element"),
                    "Attrib7" => 1.00253,
                    "Attrib8" => 156.9153,
                ),
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hello"),
                ),
                array(),
            ),
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "NotDefault",
                    "Attrib3" => "Data Where",
                    "Attrib4" => array("Hello There"),
                    "Attrib5" => "Full String",
                    "Attrib6" => array("Two Element"),
                    "Attrib7" => 1.00253,
                    "Attrib8" => 156.9153,
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Default",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hello"),
                ),
                array("Attrib1", "Attrib6"),
            ),
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "No longer the Default",
                    "Attrib3" => "Data Here",
                    "Attrib4" => array("Hello There"),
                ),
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "No longer the Default",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hello"),
                ),
                "Attrib2",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The expected return from extra
    * @param array $expect  The expected return from extra
    * @param mixed $lock    The stuff to lock
    *
    * @return null
    *
    * @dataProvider dataClearData
    */
    public function testClearData(
        $preload,
        $expect,
        $lock
    ) {
        $obj = new HUGnetContainerTestClass($preload);
        $obj->lock($lock);
        $obj->clearData();
        $object = &$obj;
        $this->assertSame(
            $expect,
            $obj->toArray()
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSetDefault()
    {
        return array(
            array("Attrib1", 16, "", 0),
            array("Attrib1", "16Test", "", 0),
            array("Attrib5", "Hello", "", null),
            array("Attrib1", 16, "", 0),
            array("Attrib1", 16, "Attrib5", 0),
            array("Attrib5", "Hello", "Attrib5", null),
            array("Attrib1", 16, "Attrib1", 16),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $attrib This is the attribute to set
    * @param mixed  $value  The value to set it to
    * @param mixed  $lock   The attribute to lock
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSetDefault
    */
    public function testSetDefault(
        $attrib,
        $value,
        $lock,
        $expect
    ) {
        $obj = new HUGnetContainerTestClass();
        $obj->$attrib = $value;
        $obj->lock($lock);
        $obj->setDefault($attrib);
        $this->assertSame($expect, $obj->$attrib, "$expect != ".$obj->$attrib);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataLock()
    {
        return array(
            array(
                array("asfd", "Attrib1", "fdscdd", "Attrib4"),
                array("Attrib1", "Attrib4"),
            ),
            array(
                "Attrib1",
                array("Attrib1"),
            ),
            array(
                array("asfd", "Attrib1", "fdscdd", "Attrib4", "Attrib5", "Attrib8"),
                array("Attrib1", "Attrib4"),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $lock   The stuff to lock
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataLock
    */
    public function testLock(
        $lock,
        $expect
    ) {
        $obj = new HUGnetContainerTestClass();
        $obj->lock($lock);
        $this->assertSame($expect, $obj->locked());
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataUnlock()
    {
        return array(
            array(
                array("asfd", "Attrib1", "fdscdd", "Attrib4"),
                array("Attrib1"),
                array("Attrib4"),
            ),
            array(
                array("asfd", "Attrib1", "fdscdd", "Attrib4"),
                "Attrib4",
                array("Attrib1"),
            ),
            array(
                array("asfd", "Attrib1", "fdscdd", "Attrib4"),
                "Attrib8",
                array("Attrib1", "Attrib4"),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $lock   The stuff to lock
    * @param array $unlock The stuff to unlock
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataUnlock
    */
    public function testUnlock(
        $lock,
        $unlock,
        $expect
    ) {
        $obj = new HUGnetContainerTestClass("");
        $obj->lock($lock);
        $obj->unlock($unlock);
        $this->assertSame($expect, $obj->locked());
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataLocked()
    {
        return array(
            array(
                array("Attrib1", "Attrib4", "Attrib5"),
                "Attrib2",
                false,
            ),
            array(
                array("Attrib1", "Attrib4", "Attrib5"),
                "Attrib5",
                false,
            ),
            array(
                array("Attrib1", "Attrib4", "Attrib5"),
                null,
                array("Attrib1", "Attrib4"),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $lock   The stuff to lock
    * @param string $check  The stuff to unlock
    * @param bool   $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataLocked
    */
    public function testLocked(
        $lock,
        $check,
        $expect
    ) {
        $obj = new HUGnetContainerTestClass("");
        $obj->lock($lock);
        $ret = $obj->locked($check);
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToArray()
    {
        return array(
            array(
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => new HUGnetContainerTestClass2(),
                    "Attrib4" => array("Hello"),
                    "Attrib5" => "Blank String",
                    "Attrib6" => array("One Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4,
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        "Attrib5" => "Blank String",
                        "Attrib6" => array("One Element"=>array("Two Element")),
                        "Attrib7" => 1.0,
                        "Attrib8" => 4,
                    ),
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => new HUGnetContainerTestClass2(),
                    "Attrib4" => array("Hello"),
                    "Attrib5" => "Blank String",
                    "Attrib6" => array("One Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4,
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        "Attrib5" => "Blank String",
                        "Attrib6" => array("One Element"=>array("Two Element")),
                        "Attrib7" => 1.0,
                        "Attrib8" => 4,
                    ),
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        new HUGnetContainerTestClass2()
                    ),
                    "Attrib4" => array("Hello"),
                    "Attrib5" => "Blank String",
                    "Attrib6" => array("One Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4,
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => array(
                        array(
                            "Attrib5" => "Blank String",
                            "Attrib6" => array("One Element"=>array("Two Element")),
                            "Attrib7" => 1.0,
                            "Attrib8" => 4,
                        ),
                    ),
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                "",
                "HUGnetContainerTestClass",
                array(
                    "Attrib1" => 0,
                    "Attrib2" => "Default",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hello"),
                ),
            ),
            array(
                "",
                "HUGnetContainerTestClass",
                array(),
                false,
            ),
            array(
                array(
                    "Attrib4" => array("There"),
                ),
                "HUGnetContainerTestClass",
                array(
                    "Attrib4" => array("There"),
                ),
                false,
            ),
            array(
                array(
                    "var" => 0,
                    "other" => array(
                        "first" => array(
                            "index" => 0,
                        ),
                    ),
                ),
                "HUGnetContainerTestClass3",
                array(
                    "var" => 0,
                    "other" => array(
                        "first" => array(
                            "index" => 0,
                        ),
                    ),
                ),
                false,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload What to preload the object with
    * @param string $class   The test class to use
    * @param array  $expect  The expected return
    * @param bool   $default Whether to return the default items or not
    *
    * @return null
    *
    * @dataProvider dataToArray
    */
    public function testToArray($preload, $class, $expect, $default = true)
    {
        $obj = new $class($preload);
        $ret = $obj->toArray($default);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
                array(
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib7" => 1.0,
                    "Attrib8" => 4.321,
                ),
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
                null,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $array       The array to use to build it
    * @param array $expect      The expected return
    * @param array $expectExtra The expected return from extra
    *
    * @return null
    *
    * @dataProvider dataFromArray
    */
    public function testFromArray($array, $expect, $expectExtra)
    {
        $obj = new HUGnetContainerTestClass();
        $obj->fromArray($array);
        foreach ((array)$expect as $key => $val) {
            $this->assertSame(
                $val,
                $obj->$key,
                "$key is wrong"
            );
        }
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function data2String()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib3" => "Data",
                            "Attrib4" => array("Hi"),
                        )
                    )
                ),
            ),
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib3" => "Data",
                            "Attrib4" => array("Hi"),
                        )
                    )
                ),
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 100,
                            "Attrib2" => "Hello There",
                            "Attrib3" => "Some Data",
                            "Attrib4" => array("Hello Everyone"),
                        )
                    )
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testToString($preload, $expect)
    {
        $obj = new HUGnetContainerTestClass($preload);
        $ret = $obj->toString();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataHash()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                "a04a8ebc79e7c01d0e5cf18aa1673102"
            ),
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                "a04a8ebc79e7c01d0e5cf18aa1673102",
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                "fbcaed74fc7dd6ad1c9994fe098758a9",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataHash
    */
    public function testHash($preload, $expect)
    {
        $obj = new HUGnetContainerTestClass($preload);
        $ret = $obj->hash();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testIsEmpty
    *
    * @return array
    */
    public static function dataIsEmpty()
    {
        return array(
            array(
                array(
                ),
                true,
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                false,
            ),
        );
    }
    /**
    * test the isEmpty method
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataIsEmpty
    */
    public function testIsEmpty($preload, $expect)
    {
        $obj = new HUGnetContainerTestClass($preload);
        $ret = $obj->isEmpty();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testOverloadToString($preload, $expect)
    {
        $obj = new HUGnetContainerTestClass($preload);
        $this->assertSame(
            $expect,
            (string)$obj
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromString()
    {
        return array(
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 100,
                            "Attrib2" => "Hello There",
                            "Attrib3" => "Some Data",
                            "Attrib4" => array("Hello Everyone"),
                            "Attrib5" => "NonBlank String",
                            "Attrib6" => array("Three Element"),
                            "Attrib7" => 1.15,
                            "Attrib8" => 9.95,
                        )
                    )
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $string The array to use to build it
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataFromString
    */
    public function testFromString($string, $expect)
    {
        $obj = new HUGnetContainerTestClass();
        $obj->fromString($string);
        $this->assertSame(
            $expect,
            $obj->toArray()
        );
    }

    /**
    * data provider for testFromZip
    *
    * @return array
    */
    public static function dataFromZip()
    {
        return array(
            array(
                gzcompress(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                gzcompress(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                gzcompress(
                    serialize(
                        array(
                            "Attrib1" => 100,
                            "Attrib2" => "Hello There",
                            "Attrib3" => "Some Data",
                            "Attrib4" => array("Hello Everyone"),
                            "Attrib5" => "NonBlank String",
                            "Attrib6" => array("Three Element"),
                            "Attrib7" => 1.15,
                            "Attrib8" => 9.95,
                        )
                    )
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $string The array to use to build it
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataFromZip
    */
    public function testFromZip($string, $expect)
    {
        $this->o->fromZip($string);
        $this->assertSame(
            $expect,
            $this->o->toArray()
        );
    }
    /**
    * data provider for testToZip
    *
    * @return array
    */
    public static function dataToZip()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                gzcompress(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib3" => "Data",
                            "Attrib4" => array("Hi"),
                        )
                    )
                ),
            ),
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                gzcompress(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib3" => "Data",
                            "Attrib4" => array("Hi"),
                        )
                    )
                ),
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                gzcompress(
                    serialize(
                        array(
                            "Attrib1" => 100,
                            "Attrib2" => "Hello There",
                            "Attrib3" => "Some Data",
                            "Attrib4" => array("Hello Everyone"),
                        )
                    )
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToZip
    */
    public function testToZip($preload, $expect)
    {
        $obj = new HUGnetContainerTestClass($preload);
        $ret = $obj->toZip();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructorData()
    {
        return array(
            array(
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib4" => array("Hi"),
                    "Attrib5" => "Another string",
                    "Attrib6" => array("Two Element"),
                    "Attrib8" => 4.321,
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                    "Attrib5" => "NonBlank String",
                    "Attrib6" => array("Three Element"),
                    "Attrib7" => 1.15,
                    "Attrib8" => 9.95,
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                gzcompress(
                    serialize(
                        array(
                            "Attrib1" => 10,
                            "Attrib2" => "Hello",
                            "Attrib4" => array("Hi"),
                            "Attrib5" => "Another string",
                            "Attrib6" => array("Two Element"),
                            "Attrib8" => 4.321,
                        )
                    )
                ),
                array(
                    "Attrib1" => 10,
                    "Attrib2" => "Hello",
                    "Attrib3" => "Data",
                    "Attrib4" => array("Hi"),
                ),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            "Attrib1" => 100,
                            "Attrib2" => "Hello There",
                            "Attrib3" => "Some Data",
                            "Attrib4" => array("Hello Everyone"),
                            "Attrib5" => "NonBlank String",
                            "Attrib6" => array("Three Element"),
                            "Attrib7" => 1.15,
                            "Attrib8" => 9.95,
                        )
                    )
                ),
                array(
                    "Attrib1" => 100,
                    "Attrib2" => "Hello There",
                    "Attrib3" => "Some Data",
                    "Attrib4" => array("Hello Everyone"),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $data   The data used to build the stuff
    * @param array $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructorData
    */
    public function testConstructorData($data, $expect)
    {
        $obj = new HUGnetContainerTestClass($data);
        $this->assertSame(
            $expect,
            $obj->toArray()
        );
        $this->assertSame(
            "ConfigContainer",
            get_class($this->readAttribute($obj, "myConfig"))
        );
    }

}
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerTestClass extends HUGnetContainer
{
    /** These are the endpoint information bits */
    /** @var array This is the default values for the data */
    protected $default = array(
        "Attrib1" => 0,
        "Attrib2" => "Default",
        "Attrib3" => "Data",
        "Attrib4" => array("Hello"),
    );
    /** @var array This is where the data is stored */
    protected $data = array();

    /** @var object We are going to put an object here */
    public $test = null;
    /** @var object We are going to put an object here */
    protected $atest = null;

    /**
    * This is the constructor
    *
    * @param mixed $data This is an array or string to create the object from
    */
    function __construct($data="")
    {
        parent::__construct($data);
        $this->getConfig();
    }
    /**
    * function to check Attrib1
    *
    * @param mixed $value The value to set it to
    *
    * @return null
    */
    protected function setAttrib1($value)
    {
        $this->data["Attrib1"] = (int) $value;
    }


}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerTestClass2 extends HUGnetContainer
{
    /** These are the endpoint information bits */
    /** @var array This is the default values for the data */
    protected $default = array(
        "Attrib5" => "Blank String",
        "Attrib6" => array("One Element" => array("Two Element")),
        "Attrib7" => 1.0,
        "Attrib8" => 4,
    );
    /** @var array This is where the data is stored */
    protected $data = array();

    /**
    * function to check Attrib5
    *
    * @param mixed $value The value to set it to
    *
    * @return null
    */
    protected function setAttrib5($value)
    {
        $this->data["Attrib5"] = (string) $value;
    }

    /**
    * function to check Attrib5
    *
    * @return null
    */
    protected function args()
    {
        $ret = func_get_args();
        return $ret;
    }

}
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerTestClass3 extends HUGnetContainer
{
    /** These are the endpoint information bits */
    /** @var array This is the default values for the data */
    protected $default = array(
        "var" => null,
        "other" => array(
            "first" => array(
                "index" => null,
            ),
        ),
    );
    /**
    * Set one of the fixed value
    *
    * @param string $name  The name of the value
    * @param mixed  $value The value to set
    *
    * @return null
    */
    public function setFixed($name, $value)
    {
        $this->fixed[$name] = $value;
    }

}
?>
