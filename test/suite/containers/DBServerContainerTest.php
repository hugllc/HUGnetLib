<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteContainers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** This is a required class */
require_once CODE_BASE.'containers/DBServerContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteContainers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DBServerContainerTest extends PHPUnit_Framework_TestCase
{

    /** @var array We store our files here so they can be deleted */
    protected $files = array();   // We store our files here so they can be deleted
    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        foreach ((array)$this->files as $file) {
            unlink($file);
        }
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataGetDSN()
    {
        return array(
            array(
                array(),
                "sqlite::memory:",
            ),
            array(
                array(
                    "file" => "",
                ),
                "sqlite::memory:",
            ),
            array(
                array(
                    "file" => "FunkyFileName",
                ),
                "sqlite:FunkyFileName",
            ),
            array(
                array(
                    "driver" => "mysql"
                ),
                "mysql:host=localhost;port=3306;dbname=HUGnet",
            ),
            array(
                array(
                    "driver" => "mysql",
                    "socket" => "/tmp/mysql.sock",
                ),
                "mysql:unix_socket=/tmp/mysql.sock;dbname=HUGnet",
            ),
            array(
                array(
                    "driver" => "MySqL",
                    "host" => "hello",
                    "db" => "there",
                ),
                "mysql:host=hello;port=3306;dbname=there",
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload This is the attribute to set
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataGetDSN
    */
    public function testGetDSN($preload, $expect)
    {
        $obj = new DBServerContainer($preload);
        $ret = $obj->getDSN();
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataPostConnect()
    {
        return array(
            array(
                array(
                    "file" => sys_get_temp_dir()."/FunkyFileName",
                    "filePerm" => 0777,
                ),
                0777,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload This is the attribute to set
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataPostCOnnect
    */
    public function testPostConnect($preload, $expect)
    {
        $obj = new DBServerContainer($preload);
        $this->files[] = $preload["file"];
        $f = fopen($preload["file"], "w");
        fwrite($f, "Hello");
        fclose($f);
        $ret = $obj->postConnect();
        $perms = fileperms($preload["file"]) & 0777;
        $this->assertSame($expect, $perms);
    }

}

?>
