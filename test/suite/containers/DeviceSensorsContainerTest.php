<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once CODE_BASE.'base/UnitsBase.php';
require_once CODE_BASE.'containers/DeviceSensorsContainer.php';
require_once CODE_BASE.'containers/DeviceParamsContainer.php';
require_once CODE_BASE.'containers/ConfigContainer.php';
require_once TEST_CONFIG_BASE.'stubs/DummyDeviceContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceSensorsContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "sockets" => array(
                array(
                    "dummy" => true,
                ),
            ),
            "plugins" => array(
                "dir" => realpath(TEST_CONFIG_BASE."files/plugins/"),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->d = new DeviceContainer();
        $this->o = new DeviceSensorsContainer($data, $this->d);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }


    /**
    * data provider for testConstructor
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(),
                array(
                    "RawCalibration" => "",
                    "Sensors" => 0,
                    "ActiveSensors" => 0,
                    "PhysicalSensors" => 0,
                    "VirtualSensors" => 0,
                    "forceSensors" => false,
                ),
            ),
            array(
                array(
                    "RawCalibration" => "Hello There",
                    "Sensors" => 10,
                ),
                array(
                    "RawCalibration" => "Hello There",
                    "Sensors" => 10,
                    "ActiveSensors" => 0,
                    "PhysicalSensors" => 0,
                    "VirtualSensors" => 0,
                    "forceSensors" => false,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload The stuff to give to the constructor
    * @param string $expect  The expected data
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $obj = new DeviceSensorsContainer($preload, $this->d);
        $this->assertAttributeSame($expect, "data", $obj, "Wrong data in class");
        $config = $this->readAttribute($obj, "myConfig");
        $this->assertSame(
            "ConfigContainer", get_class($config), "Wrong config class"
        );
        $device = $this->readAttribute($obj, "myDevice");
        $this->assertSame(
            get_class($this->d), get_class($device), "Wrong device class"
        );
    }
    /**
    * data provider for testConstructor
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
            array(
                array(
                    0 => array("id" => 0),
                    1 => array("id" => 2),
                ),
                array(
                    "ActiveSensors" => 2,
                    "DriverInfo" => array(
                        "PhysicalSensors" => 2,
                        "VirtualSensors" => 0,
                    ),
                    "params" => array(
                        "sensorType" => array("Test1Sensor", "a"),
                        "dType" => array("raw", "diff"),
                        "Loc" => array("Here", "There"),
                        "Extra" => array(array(1,2), array(3,4)),
                    )
                ),
                array(
                    "Sensors" => 2,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 2,
                    array(
                        "id" => 0,
                        "type" => "Test1Sensor",
                        "location" => "Here",
                        "extra" => array(1,2),
                    ),
                    array(
                        "id" => 2,
                        "type" => "a",
                        "location" => "There",
                        "extra" => array(3,4),
                    ),
                ),
                array(
                    "Test1Sensor",
                    "Test2Sensor",
                ),
            ),
            array(
                array(
                    "Sensors" => 2,
                    0 => array("id" => 0),
                    1 => array("id" => 2),
                ),
                array(
                    "DriverInfo" => array(
                        "PhysicalSensors" => 3,
                        "VirtualSensors" => 0,
                    ),
                    "ActiveSensors" => 3,
                    "params" => array(
                        "sensorType" => array("Test1Sensor", "a"),
                        "dType" => array("raw", "diff"),
                        "Loc" => array("Here", "There"),
                        "Extra" => array(array(1,2), array(3,4)),
                    )
                ),
                array(
                    "Sensors" => 3,
                    "ActiveSensors" => 3,
                    "PhysicalSensors" => 3,
                    array(
                        "id" => 0,
                        "type" => "Test1Sensor",
                        "location" => "Here",
                        "extra" => array(1,2),
                    ),
                    array(
                        "id" => 2,
                        "type" => "a",
                        "location" => "There",
                        "extra" => array(3,4),
                    ),
                    array(
                        "id" => 0,
                        "type" => "",
                    ),
                ),
                array(
                    "Test1Sensor",
                    "Test2Sensor",
                    "Test1Sensor",
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $preload    The stuff to give to the constructor
    * @param mixed $devPreload The device preload
    * @param array $expect     The expected data
    * @param array $sensors    The expected sensor data
    *
    * @return null
    *
    * @dataProvider dataFromArray
    */
    public function testFromArray(
        $preload, $devPreload, $expect, $sensors
    ) {
        $this->d->clearData();
        $this->d->fromArray($devPreload);
        $this->o->clearData();
        $this->o->fromArray($preload);
        $sensor = $this->readAttribute($this->o, "sensor");
        foreach (array_keys((array)$sensor) as $k) {
            $this->assertSame(
                $sensors[$k], get_class($sensor[$k]), "Sensor $k wrong"
            );
        }
        $this->assertSame($expect, $this->o->toArray());
    }
    /**
    * data provider for testConstructor
    *
    * @return array
    */
    public static function dataToArray()
    {
        return array(
            array(
                array(
                    "RawCalibration" => "",
                    "Sensors" => 2,
                    0 => array(
                        "id" => 0,
                        "type" => "",
                        "location" => "",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                        "units" => "testUnit",
                    ),
                    1 => array(
                        "id" => 0,
                        "type" => "",
                        "location" => "",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                        "units" => "testUnit",
                    ),
                ),
                2,
                true,
                array(
                    "RawCalibration" => "",
                    "Sensors" => 2,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 2,
                    "VirtualSensors" => 0,
                    "forceSensors" => false,
                    0 => array(
                        "id" => 0,
                        "type" => "",
                        "location" => "",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                        "units" => "testUnit",
                        "decimals" => 2,
                        "bound" => false,
                        "filter" => array(),
                    ),
                    1 => array(
                        "id" => 0,
                        "type" => "",
                        "location" => "",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                        "units" => "testUnit",
                        "decimals" => 2,
                        "bound" => false,
                        "filter" => array(),
                    ),
                ),

            ),
            array(
                array(
                    "RawCalibration" => "abcd",
                    "Sensors" => 2,
                    0 => array(
                        "id" => 0,
                        "type" => "resistive",
                        "location" => "Here and there",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                        "units" => "testUnit",
                    ),
                    1 => array(
                        "id" => 8,
                        "type" => "",
                        "location" => "",
                        "dataType" => "diff",
                        "extra" => array("Here"),
                        "rawCalibration" => "12345",
                        "units" => "testUnit",
                    ),
                ),
                2,
                true,
                array(
                    "RawCalibration" => "abcd",
                    "Sensors" => 2,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 2,
                    "VirtualSensors" => 0,
                    "forceSensors" => false,
                    0 => array(
                        "id" => 0,
                        "type" => "resistive",
                        "location" => "Here and there",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                        "units" => "testUnit",
                        "decimals" => 2,
                        "bound" => false,
                        "filter" => array(),
                    ),
                    1 => array(
                        "id" => 8,
                        "type" => "",
                        "location" => "",
                        "dataType" => "diff",
                        "extra" => array("Here"),
                        "rawCalibration" => "12345",
                        "units" => "testUnit",
                        "decimals" => 2,
                        "bound" => false,
                        "filter" => array(),
                    ),
                ),
            ),
            array(
                array(
                    "RawCalibration" => "",
                    "Sensors" => 2,
                    0 => array(
                        "id" => 0,
                        "type" => "",
                        "location" => "",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                    ),
                    1 => array(
                        "id" => 0,
                        "type" => "",
                        "location" => "",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "",
                    ),
                ),
                2,
                false,
                array(
                    "Sensors" => 2,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 2,
                    array(
                        "id" => 0,
                        "type" => "",
                    ),
                    array(
                        "id" => 0,
                        "type" => "",
                    ),
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $preload      The stuff to give to the constructor
    * @param int   $TotalSensors The total number of sensors
    * @param bool  $default      Whether to give default stuff
    * @param array $expect       The expected data
    *
    * @return null
    *
    * @dataProvider dataToArray
    */
    public function testToArray($preload, $TotalSensors, $default, $expect)
    {
        $this->d->DriverInfo["PhysicalSensors"] = $TotalSensors;
        $this->d->DriverInfo["VirtualSensors"] = 0;
        $this->d->ActiveSensors = $TotalSensors;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->assertSame($expect, $this->o->toArray($default));
    }

    /**
    * data provider for testToDevHistArray
    *
    * @return array
    */
    public static function dataToDevHistArray()
    {
        return array(
            array(
                array(
                    "RawCalibration" => "",
                    "Sensors" => 2,
                    0 => array(
                        "id" => 0,
                        "type" => "here",
                        "location" => "There",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "cal",
                        "units" => "testUnit",
                    ),
                    1 => array(
                        "id" => 0,
                        "type" => "5",
                        "location" => "hello",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "called",
                        "units" => "testUnit",
                    ),
                    2 => array(
                        "id" => 0xFE,
                        "type" => "vt",
                        "location" => "virtual",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "noCalHere",
                        "units" => "testUnit",
                    ),
                ),
                2,
                1,
                array(
                    "RawCalibration" => "",
                    "Sensors" => 3,
                    "ActiveSensors" => 3,
                    "PhysicalSensors" => 2,
                    "VirtualSensors" => 1,
                    "forceSensors" => false,
                    0 => array(
                        "id" => 0,
                        "type" => "here",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "cal",
                    ),
                    1 => array(
                        "id" => 0,
                        "type" => "5",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "called",
                    ),
                    2 => array(
                        "id" => 0xFE,
                        "type" => "Virtual",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "noCalHere",
                    ),
                ),

            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $preload         The stuff to give to the constructor
    * @param int   $PhysicalSensors The total number of physical sensors
    * @param int   $VirtualSensors  The total number of virtual sensors
    * @param array $expect          The expected data
    *
    * @return null
    *
    * @dataProvider dataToDevHistArray
    */
    public function testToDevHistArray(
        $preload, $PhysicalSensors, $VirtualSensors, $expect
    ) {
        $this->d->DriverInfo["PhysicalSensors"] = $PhysicalSensors;
        $this->d->DriverInfo["VirtualSensors"] = $VirtualSensors;
        $this->d->ActiveSensors = $PhysicalSensors + $VirtualSensors;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->assertSame($expect, $this->o->toDevHistArray());
    }
    /**
    * data provider for testToDevHistString
    *
    * @return array
    */
    public static function dataToDevHistString()
    {
        return array(
            array(
                array(
                    "RawCalibration" => "",
                    "Sensors" => 2,
                    0 => array(
                        "id" => 0,
                        "type" => "here",
                        "location" => "There",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "cal",
                        "units" => "testUnit",
                    ),
                    1 => array(
                        "id" => 0,
                        "type" => "5",
                        "location" => "hello",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "called",
                        "units" => "testUnit",
                    ),
                    2 => array(
                        "id" => 0xFE,
                        "type" => "vt",
                        "location" => "virtual",
                        "dataType" => "raw",
                        "extra" => array(),
                        "rawCalibration" => "noCalHere",
                        "units" => "testUnit",
                    ),
                ),
                2,
                1,
                "YTo5OntzOjE0OiJSYXdDYWxpYnJhdGlvbiI7czowOiIiO3M6NzoiU2Vuc29ycyI"
                    ."7aTozO3M6MTM6IkFjdGl2ZVNlbnNvcnMiO2k6MztzOjE1OiJQaHlzaWNhb"
                    ."FNlbnNvcnMiO2k6MjtzOjE0OiJWaXJ0dWFsU2Vuc29ycyI7aToxO3M6MTI"
                    ."6ImZvcmNlU2Vuc29ycyI7YjowO2k6MDthOjU6e3M6MjoiaWQiO2k6MDtzO"
                    ."jQ6InR5cGUiO3M6NDoiaGVyZSI7czo4OiJkYXRhVHlwZSI7czozOiJyYXc"
                    ."iO3M6NToiZXh0cmEiO2E6MDp7fXM6MTQ6InJhd0NhbGlicmF0aW9uIjtzO"
                    ."jM6ImNhbCI7fWk6MTthOjU6e3M6MjoiaWQiO2k6MDtzOjQ6InR5cGUiO3M"
                    ."6MToiNSI7czo4OiJkYXRhVHlwZSI7czozOiJyYXciO3M6NToiZXh0cmEiO"
                    ."2E6MDp7fXM6MTQ6InJhd0NhbGlicmF0aW9uIjtzOjY6ImNhbGxlZCI7fWk"
                    ."6MjthOjU6e3M6MjoiaWQiO2k6MjU0O3M6NDoidHlwZSI7czo3OiJWaXJ0d"
                    ."WFsIjtzOjg6ImRhdGFUeXBlIjtzOjM6InJhdyI7czo1OiJleHRyYSI7YTo"
                    ."wOnt9czoxNDoicmF3Q2FsaWJyYXRpb24iO3M6OToibm9DYWxIZXJlIjt9f"
                    ."Q==",
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $preload         The stuff to give to the constructor
    * @param int   $PhysicalSensors The total number of physical sensors
    * @param int   $VirtualSensors  The total number of virtual sensors
    * @param array $expect          The expected data
    *
    * @return null
    *
    * @dataProvider dataToDevHistString
    */
    public function testToDevHistString(
        $preload, $PhysicalSensors, $VirtualSensors, $expect
    ) {
        $this->d->DriverInfo["PhysicalSensors"] = $PhysicalSensors;
        $this->d->DriverInfo["VirtualSensors"] = $VirtualSensors;
        $this->d->ActiveSensors = $PhysicalSensors + $VirtualSensors;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->assertSame($expect, $this->o->toDevHistString());
    }
    /**
    * data provider for testConstructor
    *
    * @return array
    */
    public static function dataFromTypeString()
    {
        return array(
            array(
                array(
                    0 => array("id" => 3, "type" => "Hello"),
                    1 => array("id" => 8),
                ),
                "00020102",
                2,
                0,
                2,
                array(
                    "Sensors" => 2,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 2,
                    array(
                        "id" => 0,
                        "type" => "Hello",
                        "dataType" => UnitsBase::TYPE_DIFF,
                    ),
                    array(
                        "id" => 2,
                        "type" => "",
                        "dataType" => UnitsBase::TYPE_RAW,
                        "units" => "firstUnit",
                    ),
                ),
                array(
                    "Test1Sensor",
                    "Test2Sensor",
                ),
                array(0, 2),
            ),
            array(
                array(
                    0 => array("id" => 3, "type" => "Hello", "location" => "here"),
                    1 => array("id" => 8),
                    2 => array("id" => 4),
                    3 => array("id" => 5),
                ),
                "10020102",
                4,
                0,
                3,
                array(
                    "Sensors" => 4,
                    "ActiveSensors" => 3,
                    "PhysicalSensors" => 4,
                    array(
                        "id" => 0x10,
                        "type" => "multiInput",
                        "location" => "here",
                        "dataType" => UnitsBase::TYPE_DIFF,
                        "units" => "anotherUnit",
                    ),
                    array(
                        "id" => 0xFF,
                        "type" => "",
                        "location" => "here",
                    ),
                    array(
                        "id" => 0xFF,
                        "type" => "",
                        "location" => "here",
                    ),
                    array(
                        "id" => 2,
                        "type" => "",
                        "dataType" => UnitsBase::TYPE_IGNORE,
                    ),
                ),
                array(
                    "Test3Sensor",
                    "Test1Sensor",
                    "Test1Sensor",
                    "Test2Sensor",
                ),
                array(0x10, 0xFF, 0xFF, 2),
            ),
            array(
                array(
                    0 => array("id" => 3, "type" => "Hello"),
                    1 => array("id" => 8),
                    2 => array("id" => 4),
                ),
                false,
                3,
                1,
                3,
                array(
                    "Sensors" => 4,
                    "ActiveSensors" => 3,
                    "PhysicalSensors" => 3,
                    "VirtualSensors" => 1,
                    array(
                        "id" => 3,
                        "type" => "Hello",
                    ),
                    array(
                        "id" => 8,
                        "type" => "",
                    ),
                    array(
                        "id" => 4,
                        "type" => "",
                    ),
                    array(
                        "id" => 0xFE,
                        "type" => "Virtual",
                    ),
                ),
                array(
                    "Test2Sensor",
                    "Test1Sensor",
                    "Test2Sensor",
                    "TestVirtualSensor",
                ),
                array(3, 8, 4, 0xFE),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload         The stuff to give to the constructor
    * @param string $string          The string to use for the input
    * @param int    $PhysicalSensors The total number of physical sensors
    * @param int    $VirtualSensors  The total number of virtual sensors
    * @param int    $ActiveSensors   The total number of active sensors
    * @param array  $expect          The expected data
    * @param array  $sensors         The expected sensor data
    * @param array  $types           The types to expect
    *
    * @return null
    *
    * @dataProvider dataFromTypeString
    */
    public function testFromTypeString(
        $preload, $string, $PhysicalSensors, $VirtualSensors, $ActiveSensors,
        $expect, $sensors, $types
    ) {
        $this->d->DriverInfo["PhysicalSensors"] = $PhysicalSensors;
        $this->d->DriverInfo["VirtualSensors"] = $VirtualSensors;
        $this->d->ActiveSensors = $ActiveSensors;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->o->fromTypeString($string);
        $this->assertSame($expect, $this->o->toArray());
        $sensor = $this->readAttribute($this->o, "sensor");
        foreach (array_keys((array)$sensor) as $k) {
            $this->assertSame(
                $types[$k],
                $sensor[$k]->id,
                "Sensor $k id is wrong ".$types[$k]." != ".$sensor[$k]->id
            );
            $this->assertSame(
                $sensors[$k],
                get_class($sensor[$k]),
                "Sensor $k class is wrong ".$sensors[$k]." != "
                .get_class($sensor[$k])
            );
        }

    }

    /**
    * data provider for testConstructor
    *
    * @return array
    */
    public static function dataFromTypeArray()
    {
        return array(
            array(
                array(
                    0 => array("id" => 2, "type" => "Hello", ),
                    1 => array("id" => 2, "rawCalibration" => "abcd"),
                ),
                array(
                    0 => array("id" => 0),
                    1 => array("id" => 3, "type" => "Hello"),
                ),
                2,
                0,
                2,
                array(
                    "Sensors" => 2,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 2,
                    array(
                        "id" => 0,
                        "type" => "Hello",
                        "dataType" => UnitsBase::TYPE_DIFF,
                    ),
                    array(
                        "id" => 3,
                        "type" => "Hello",
                        "rawCalibration" => "abcd"
                    ),
                ),
                array(
                    "Test1Sensor",
                    "Test2Sensor",
                ),
                array(0, 3),
            ),
            array(
                array(
                    0 => array("id" => 2, "type" => "Hello", ),
                    1 => array("id" => 2, "rawCalibration" => "abcd"),
                ),
                array(
                    0 => 0,
                    1 => "03",
                ),
                3,
                1,
                2,
                array(
                    "Sensors" => 4,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 3,
                    "VirtualSensors" => 1,
                    array(
                        "id" => 0,
                        "type" => "Hello",
                        "dataType" => UnitsBase::TYPE_DIFF,
                    ),
                    array(
                        "id" => 3,
                        "type" => "",
                        "dataType" => UnitsBase::TYPE_DIFF,
                        "rawCalibration" => "abcd",
                    ),
                    array(
                        "id" => 0,
                        "type" => "",
                        "dataType" => UnitsBase::TYPE_IGNORE,
                    ),
                    array(
                        "id" => 0xFE,
                        "type" => "Virtual",
                    ),
                ),
                array(
                    "Test1Sensor",
                    "Test1Sensor",
                    "Test1Sensor",
                    "TestVirtualSensor",
                ),
                array(0, 3, 0, 0xFE),
            ),
            array(
                array(
                    0 => array("id" => 2, "type" => "Hello", ),
                    1 => array("id" => 2, "rawCalibration" => "abcd"),
                ),
                "This is not an array",
                2,
                0,
                2,
                array(
                    "Sensors" => 2,
                    "ActiveSensors" => 2,
                    "PhysicalSensors" => 2,
                    0 => array("id" => 2, "type" => "Hello", ),
                    1 => array("id" => 2, "type" => "", "rawCalibration" => "abcd"),
                ),
                array(
                    "Test2Sensor",
                    "Test2Sensor",
                ),
                array(2, 2),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $preload         The stuff to give to the constructor
    * @param array $array           The array to use for the input
    * @param int   $PhysicalSensors The total number of physical sensors
    * @param int   $VirtualSensors  The total number of virtual sensors
    * @param int   $ActiveSensors   The total number of active sensors
    * @param array $expect          The expected data
    * @param array $sensors         The expected sensor data
    * @param array $types           The types to expect
    *
    * @return null
    *
    * @dataProvider dataFromTypeArray
    */
    public function testFromTypeArray(
        $preload, $array, $PhysicalSensors, $VirtualSensors, $ActiveSensors,
        $expect, $sensors, $types
    ) {
        $this->d->DriverInfo["PhysicalSensors"] = $PhysicalSensors;
        $this->d->DriverInfo["VirtualSensors"] = $VirtualSensors;
        $this->d->ActiveSensors = $ActiveSensors;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->o->fromTypeArray($array);
        $this->assertSame($expect, $this->o->toArray());
        $sensor = $this->readAttribute($this->o, "sensor");
        foreach (array_keys((array)$sensor) as $k) {
            $this->assertSame(
                $types[$k],
                $sensor[$k]->id,
                "Sensor $k id is wrong ".$types[$k]." != ".$sensor[$k]->id
            );
            $this->assertSame(
                $sensors[$k],
                get_class($sensor[$k]),
                "Sensor $k class is wrong ".$sensors[$k]." != "
                .get_class($sensor[$k])
            );
        }

    }

    /**
    * data provider for testSensor
    *
    * @return array
    */
    public static function dataSensor()
    {
        return array(
            array(
                array(
                    0 => array("id" => 3, "type" => "Hello"),
                    1 => array("id" => 2),
                    2 => array("id" => 8),
                ),
                0,
                3,
                0,
                3,
                "Test2Sensor",
            ),
            array(
                array(
                    0 => array("id" => 3),
                    1 => array("id" => 2),
                    2 => array("id" => 8),
                ),
                0,
                3,
                0,
                3,
                "Test1Sensor",
            ),
            array(
                array(
                    0 => array("id" => 3),
                    1 => array("id" => 2),
                    2 => array("id" => 8),
                ),
                8,
                3,
                0,
                3,
                "Test1Sensor",
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload         The stuff to give to the constructor
    * @param string $num             The string to use for the input
    * @param int    $PhysicalSensors The total number of physical sensors
    * @param int    $VirtualSensors  The total number of virtual sensors
    * @param int    $ActiveSensors   The total number of active sensors
    * @param array  $expect          The expected data
    *
    * @return null
    *
    * @dataProvider dataSensor
    */
    public function testSensor(
        $preload, $num, $PhysicalSensors, $VirtualSensors, $ActiveSensors, $expect
    ) {
        $this->d->DriverInfo["PhysicalSensors"] = $PhysicalSensors;
        $this->d->DriverInfo["VirtualSensors"] = $VirtualSensors;
        $this->d->ActiveSensors = $ActiveSensors;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->assertSame($expect, get_class($this->o->sensor($num)));
    }

    /**
    * data provider for testSensor
    *
    * @return array
    */
    public static function dataSensorFromString()
    {
        return array(
            array(
                base64_encode(
                    serialize(
                        array(
                            0 => array("id" => 3, "type" => "Hello"),
                            1 => array("id" => 2),
                            2 => array("id" => 8),
                        )
                    )
                ),
                0,
                array("id" => 3, "type" => "Hello"),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            0 => array("id" => 3, "type" => "Hello"),
                            1 => array("id" => 2),
                            2 => array("id" => 8),
                        )
                    )
                ),
                5,
                array("id" => null, "type" => ""),
            ),
            array(
                base64_encode(
                    serialize(
                        array(
                            0 => array(
                                "id" => 0xFE,
                                "type" => "physicalpoint",
                                "doppelganger" => 1,
                            ),
                            1 => array("id" => 2),
                            2 => array("id" => 8),
                        )
                    )
                ),
                0,
                array("id" => 0xFE, "type" => "Virtual"),
            ),
            array(
                "",
                0,
                array("id" => null, "type" => ""),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $string The string with the sensor in it
    * @param int    $sensor The sensor number
    * @param mixed  $expect The expected data
    *
    * @return null
    *
    * @dataProvider dataSensorFromString
    */
    public function testSensorFromString($string, $sensor, $expect)
    {
        $this->assertSame(
            $expect,
            $this->o->sensorFromString($string, $sensor)->toArray(false)
        );
    }

    /**
    * data provider for testFromCalString
    *
    * @return array
    */
    public static function dataFromCalString()
    {
        return array(
            array(
                array(
                    0 => array("id" => 3, "type" => "Hello"),
                    1 => array("id" => 2),
                    2 => array("id" => 8),
                ),
                "",
                3,
                null,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload The stuff to give to the constructor
    * @param string $string  The string to use for the input
    * @param int    $sensors The total number of sensors
    * @param array  $expect  The expected data
    *
    * @return null
    *
    * @dataProvider dataFromCalString
    */
    public function testFromCalString($preload, $string, $sensors, $expect)
    {
        $this->d->DriverInfo["PhysicalSensors"] = $sensors;
        $this->d->DriverInfo["VirtualSensors"] = 0;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->assertSame($expect, $this->o->fromCalString($string));
    }

    /**
    * data provider for testUpdateSensor
    *
    * @return array
    */
    public static function dataUpdateSensor()
    {
        return array(
            array(
                array(
                    "Sensors" => 3,
                    0 => array("id" => 3, "type" => "Hello"),
                    1 => array("id" => 2, "filter" => array('type' => 'hello')),
                    2 => array("id" => 8),
                ),
                array(
                    "id" => 2,
                ),
                array(
                    "PhysicalSensors" => 3,
                    "VirtualSensors" => 1,
                ),
                0,
                2,
                array(
                    0 => array("id" => 3, "type" => "Hello"),
                    1 => array(
                        "id" => 2,
                        "type" => "",
                        "filter" => array('type' => 'hello'),
                    ),
                    2 => array(
                        "id" => 2,
                        "type" => "",
                        "dataType" => UnitsBase::TYPE_RAW,
                        "units" => "firstUnit",
                    ),
                    3 => array("id" => 0xFE, "type" => "Virtual"),
                ),
                2,
                array(
                    "Test2Sensor",
                    "Test2Sensor",
                    "Test2Sensor",
                    "TestVirtualSensor",
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $preload       The stuff to give to the constructor
    * @param array $data          The data to use for the sensor
    * @param array $driverInfo    The driver info for the device
    * @param int   $ActiveSensors The total number of active sensors
    * @param int   $key           The key to put the sensor in
    * @param array $expect        The expected data
    * @param int   $expectKey     The expected key returned
    * @param array $classes       The classes our sensors should be
    *
    * @return null
    *
    * @dataProvider dataUpdateSensor
    */
    public function testUpdateSensor(
        $preload, $data, $driverInfo, $ActiveSensors, $key,
        $expect, $expectKey, $classes
    ) {
        $this->d->DriverInfo = $driverInfo;
        $this->d->ActiveSensors = $ActiveSensors;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $this->o->updateSensor($data, $key);
        $sensors = $this->readAttribute($this->o, "sensor");
        $ret = array();
        foreach (array_keys($sensors) as $k) {
            $this->assertSame(
                $classes[$k],
                get_class($sensors[$k]),
                "Sensor $k has the wrong class"
            );
            $ret[$k] = $sensors[$k]->toArray(false);
        }
        $this->assertSame(
            $expect, $ret, "Sensors are wrong"
        );
        $this->assertSame($expectKey, $key, "The key returned is wrong");
    }

    /**
    * data provider for testSensor
    *
    * @return array
    */
    public static function dataDecodeSensorData()
    {
        return array(
            array(
                array(
                    "Sensors" => 3,
                    0 => array("id" => 3),
                    1 => array("id" => 2),
                    2 => array("id" => 8),
                ),
                array(
                    "PhysicalSensors" => 3,
                    "VirtualSensors" => 0,
                ),
                array(
                    "deltaT" => 1,
                    0 => 10,
                    1 => 20,
                    2 => 30,
                ),
                array(
                    null, 10, null, null
                ),
                array(
                    "deltaT" => 1,
                    0 => array(
                        "value" => 5,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => UnitsBase::TYPE_RAW,
                    ),
                    1 => array(
                        "value" => 20,
                        "raw" => 20,
                        "units" => "anotherUnit",
                        "unitType" => "secondUnit",
                        "dataType" => UnitsBase::TYPE_DIFF,
                    ),
                    2 => array(
                        "value" => 15,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => UnitsBase::TYPE_RAW,
                    ),
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload    The stuff to give to the constructor
    * @param array  $driverInfo The driver info for the device
    * @param string $data       The data to use
    * @param array  $prev       The previous reading
    * @param array  $expect     The expected data
    *
    * @return null
    *
    * @dataProvider dataDecodeSensorData
    */
    public function testDecodeSensorData(
        $preload, $driverInfo, $data, $prev, $expect
    ) {
        $this->d->DriverInfo = $driverInfo;
        $this->o->clearData();
        $this->o->fromArray($preload);
        $data = $this->o->decodeSensorData($data, $prev);
        $this->assertSame($expect, $data);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToOutput()
    {
        return array(
            array(
                array(),
                null,
                array(
                    "id" => null,
                    "type" => "",
                    "longName" => "Unknown Sensor",
                    "unitType" => "firstUnit",
                    "storageUnit" => "testUnit",
                    "storageType" => "raw",
                    "extraText" => array(),
                    "extraDefault" => array(),
                    "maxDecimals" => 2,
                    "location" => "",
                    "dataType" => "raw",
                    "extra" => array(),
                    "rawCalibration" => "",
                    "units" => "firstUnit",
                    "decimals" => 2,
                    "bound" => false,
                    "filter" => array(),
                    "num" => 0,
                ),
            ),
            array(
                array(),
                array(),
                array(
                    "id" => null,
                    "type" => "",
                    "longName" => "Unknown Sensor",
                    "unitType" => "firstUnit",
                    "storageUnit" => "testUnit",
                    "storageType" => "raw",
                    "extraText" => array(),
                    "extraDefault" => array(),
                    "maxDecimals" => 2,
                    "location" => "",
                    "dataType" => "raw",
                    "extra" => array(),
                    "rawCalibration" => "",
                    "units" => "firstUnit",
                    "decimals" => 2,
                    "bound" => false,
                    "filter" => array(),
                    "num" => 0,
                ),
            ),
            array(
                array(),
                array("dataType", "decimals", "type", "units"),
                array(
                    "id" => null,
                    "type" => "",
                    "longName" => "Unknown Sensor",
                    "unitType" => "firstUnit",
                    "storageUnit" => "testUnit",
                    "storageType" => "raw",
                    "extraText" => array(),
                    "extraDefault" => array(),
                    "maxDecimals" => 2,
                    "location" => "",
                    "dataType" => "raw",
                    "extra" => array(),
                    "rawCalibration" => "",
                    "units" => "firstUnit",
                    "decimals" => 2,
                    "bound" => false,
                    "filter" => array(),
                    "num" => 0,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToOutput
    */
    public function testToOutput($preload, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->toOutput($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToOutputHeader()
    {
        return array(
            array(
                array(),
                null,
                array(
                    "num" => "#",
                    "location" => "Location",
                    "type" => "Type",
                    "dataType" => "Data Type",
                    "units" => "Units",
                    "decimals" => "Decimal Places",
                ),
            ),
            array(
                array(),
                array(),
                array(
                    "num" => "#",
                    "location" => "Location",
                    "type" => "Type",
                    "dataType" => "Data Type",
                    "units" => "Units",
                    "decimals" => "Decimal Places",
                ),
            ),
            array(
                array(),
                array("action", "dataType", "decimals", "type", "units"),
                array(
                    "action" => "action",
                    "dataType" => "Data Type",
                    "decimals" => "Decimal Places",
                    "type" => "Type",
                    "units" => "Units",
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToOutputHeader
    */
    public function testToOutputHeader($preload, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->toOutputHeader($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutputParams()
    {
        return array(
            array(
                array(),
                null,
                array(
                ),
                array(),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param string $type    The output type
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataOutputParams
    */
    public function testOutputParams($preload, $type, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->outputParams($type, $cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutputFilters()
    {
        return array(
            array(
                array(),
                array(
                ),
                array(),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataOutputFilters
    */
    public function testOutputFilters($preload, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->outputFilters($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }

    /**
    * data provider for testNextInto
    *
    * @return array
    */
    public static function dataNextInto()
    {
        return array(
            array(
                array(
                    "Sensors" => 2,
                ),
                2
            ),
            array(
                array(
                    "Sensors" => 20,
                ),
                20
            ),
            array(
                array(
                    "Sensors" => 0,
                ),
                1
            ),
            array(
                array(
                    "Sensors" => 1,
                ),
                1
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param int    $expect  The number of runs to expect
    *
    * @return null
    *
    * @dataProvider dataNextInto
    */
    public function testNextInto($preload, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $count = 1; // There is always the first record to start with
        while ($this->o->nextInto()) {
            $count++;
            // Just in case we have an infinite loop
            if ($count > 100) {
                break;
            }
        }
        $this->assertSame(
            $expect,
            $count,
            "Count is wrong"
        );
        $this->assertAttributeSame(
            $expect,
            "_sensorIndex", $this->o,
            "sensorIndex is wrong"
        );
    }
}

?>
