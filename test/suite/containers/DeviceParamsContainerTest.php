<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteContainers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


/** This is a required class */
require_once CODE_BASE.'containers/DeviceParamsContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteContainers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2012 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceParamsContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->o = new DeviceParamsContainer();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("dType", array(5,3,2), array(5,3,2)),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->$var = $value;
        $this->assertSame($expect, $this->o->$var);
    }
    /**
    * data provider for testToString
    *
    * @return array
    */
    public static function data2String()
    {
        return array(
            array(array(), "YTowOnt9"),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload The data to preload into the class
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testToString($preload, $expect)
    {
        $this->o->fromAny($preload);
        $this->assertSame($expect, $this->o->toString());
    }
    /**
    * data provider for testToString
    *
    * @return array
    */
    public static function dataToArray()
    {
        return array(
            array(array(), array()),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $preload The data to preload into the class
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToArray
    */
    public function testToArray($preload, $expect)
    {
        $this->o->fromAny($preload);
        $this->assertSame($expect, $this->o->toArray());
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToOutput()
    {
        return array(
            array(
                array(
                    "LastContact" => 1234,
                    "LastModified" => 4321,
                    "LastModifiedBy" => "Me",
                    "DriverInfo" => array(
                        "Test" => "one",
                        "Test2" => "two",
                    ),
                    "ProcessInfo" => array(
                        "PTest" => "one",
                        "PTest2" => "two",
                    ),
                ),
                null,
                array(
                    "PTest" => "one",
                    "PTest2" => "two",
                    "Test" => "one",
                    "Test2" => "two",
                    "LastContact" => 1234,
                    "LastModified" => 4321,
                    "LastModifiedBy" => "Me",
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToOutput
    */
    public function testToOutput($preload, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->toOutput($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToOutputHeader()
    {
        return array(
            array(
                array(),
                null,
                array(
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToOutputHeader
    */
    public function testToOutputHeader($preload, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->toOutputHeader($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutputParams()
    {
        return array(
            array(
                array(),
                null,
                array(
                ),
                array(),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param string $type    The output type
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataOutputParams
    */
    public function testOutputParams($preload, $type, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->outputParams($type, $cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutputFilters()
    {
        return array(
            array(
                array(),
                array(
                ),
                array(),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $preload The data to preload into the class
    * @param array  $cols    The columns to use
    * @param int    $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataOutputFilters
    */
    public function testOutputFilters($preload, $cols, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->outputFilters($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }

}

?>
