<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteContainers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** This is a required class */
require_once CODE_BASE.'containers/OutputContainer.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'files/containers/TestOutputContainer.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'files/containers/TestOutputContainer2.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'files/containers/TestOutputContainer3.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteContainers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.9.7
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class OutputContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "plugins" => array(
                "dir" => realpath(TEST_CONFIG_BASE."files/plugins/"),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->cont = new TestOutputContainer();
        $this->o = new OutputContainer(array(), $this->cont);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataParams()
    {
        return array(
            array(
                array(),
                array(),
                array("test" => array("a" => "5", "b" => "6")),
                array("test" => array("a" => "6", "c" => "9")),
                array("test" => array("a" => "6", "b" => "6", "c" => "9")),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload   Data to preload
    * @param array $container The container data to use
    * @param array $params    Array of parameter arrays
    * @param array $params2   Array of parameter arrays
    * @param array $expect    The function to call
    *
    * @return null
    *
    * @dataProvider dataParams
    */
    public function testParams($preload, $container, $params, $params2, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->cont->clearData();
        $this->cont->loadData($container);
        foreach ((array)$params as $k => $p) {
            $this->o->params($k, $p);
        }
        foreach ((array)$params2 as $k => $p) {
            $this->o->params($k, $p);
        }
        $this->assertAttributeSame(
            $expect, "paramsOut", $this->o
        );
    }
    /**
    * data provider for testFilters
    *
    * @return array
    */
    public static function dataFilters()
    {
        return array(
            array(
                array(),
                array("a" => 1),
                array("a" => "6", "c" => "9"),
                array("a" => "6", "c" => "9"),
            ),
            array(
                array(),
                null,
                array("a" => "6", "c" => "9"),
                array(),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload   Data to preload
    * @param array $container The container data to use
    * @param array $filters   Array of filter iformation
    * @param array $expect    The function to call
    *
    * @return null
    *
    * @dataProvider dataFilters
    */
    public function testFilters($preload, $container, $filters, $expect)
    {
        if (!is_null($container)) {
            $cont = new TestOutputContainer($container);
        }
        $obj = new OutputContainer($preload, $cont);
        $obj->filters($filters);
        $this->assertAttributeSame(
            $expect, "filters", $obj
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @return null
    *
    */
    public function testParams2()
    {
        $obj = new OutputContainer(array());
        $obj->params("type", array());
        $this->assertAttributeSame(
            array(), "paramsOut", $this->o
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataHeader()
    {
        return array(
            array(
                array(),
                array(),
                array(
                    array("a" => "5", "b" => "6"),
                    array("c" => "5", "d" => "6"),
                ),
                false,
                array("a" => "5", "b" => "6"),
            ),
            array(
                array(),
                array(),
                array(
                    array("a" => "5", "b" => "6"),
                    array("c" => "5", "d" => "6"),
                ),
                true,
                array("c" => "5", "d" => "6"),
            ),
            array(
                array(),
                array(),
                array(
                    null,
                    array("c" => "5", "d" => "6"),
                ),
                false,
                array(
                    "a" => "First Column",
                    "c" => "Third",
                    "d" => "Another Column",
                ),
            ),
            array(
                array(),
                array(),
                array(
                    null,
                    array("c" => "5", "d" => "6"),
                ),
                true,
                array("c" => "5", "d" => "6"),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload   Data to preload
    * @param array $container The container data to use
    * @param array $headers   Array of header arrays
    * @param bool  $force     Whether to force our new header
    * @param array $expect    The function to call
    *
    * @return null
    *
    * @dataProvider dataHeader
    */
    public function testHeader($preload, $container, $headers, $force, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->cont->clearData();
        $this->cont->loadData($container);
        foreach ((array)$headers as $h) {
            $this->o->header($h, $force);
        }
        $this->assertAttributeSame(
            $expect, "headerOut", $this->o
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @return null
    *
    */
    public function testHeader2()
    {
        $obj = new OutputContainer(array());
        $obj->header();
        $this->assertAttributeSame(
            array(), "headerOut", $this->o
        );
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function data2String()
    {
        return array(
            array( // #0
                array(),
                "TestOutputContainer2",
                array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
post"
            ),
            array( // #1
                array(),
                "TestOutputContainer",
                array("a" => 3, "c" => 8, "d" => 9),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 3
    [c] => 8
    [d] => 9
)
post"
            ),
            array( // #2
                array(
                ),
                "TestOutputContainer2",
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
Array
(
    [a] => 3
    [c] => 8
    [d] => 9
)
post"
            ),
            array( // #3
                array(
                ),
                "TestOutputContainer",
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
post"
            ),
            array( // #4
                array(
                    "iterate" => false,
                ),
                "TestOutputContainer2",
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
post"
            ),
            array( // #5
                array(
                    "iterate" => false,
                ),
                "TestOutputContainer3",
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                "Container doesn't implement OutputInterface"
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload   Data to preload
    * @param array  $class     The container class to use
    * @param array  $container The container data to use
    * @param string $expect    The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testToString($preload, $class, $container, $expect)
    {
        $this->cont = new $class();
        $this->cont->loadData($container);
        $this->o = new OutputContainer($preload, $this->cont);
        $ret = $this->o->toString();
        $this->assertSame(
            $expect,
            $ret
        );
    }

    /**
    * data provider for testGetOutput
    *
    * @return array
    */
    public static function dataGetOutput()
    {
        return array(
            array( // #0
                array(
                ),
                "TestOutputContainer",
                array(),
                array(),
                array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                array("DEFAULT"),
                array(),
                array(
                    "a" => array("type" => "anotherType"),
                ),
                array(),
                array(
                    "DEFAULT" => "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1_TestOutputFilter2
    [c] => 3
    [d] => 4
)
post"
                ),
            ),
            array( // #1
                array(),
                "TestOutputContainer",
                array(),
                array(),
                array("a" => 3, "c" => 8, "d" => 9),
                array("DEFAULT"),
                array(),
                array(),
                array(),
                array(
                    "DEFAULT" => "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 3
    [c] => 8
    [d] => 9
)
post"
                ),
            ),
            array( // #2
                array(
                ),
                "TestOutputContainer2",
                array(
                    "a" => "outputContainerTestAddFunction1",
                ),
                array(
                    "a" => "HTMLList",
                ),
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                array("DEFAULT"),
                array(),
                array(
                    "a" => array("type" => "anotherType"),
                ),
                array(),
                array(
                    "DEFAULT" => "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1_TestOutputFilter2
    [c] => 3
    [d] => 4
)
Array
(
    [a] => 3_TestOutputFilter2
    [c] => 8
    [d] => 9
)
post"
                ),
            ),
            array( // #3
                array(
                ),
                "TestOutputContainer",
                array(),
                array(),
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                array("DEFAULT"),
                array(),
                array(),
                array(),
                array(
                    "DEFAULT" => "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
post"
                ),
            ),
            array( // #4
                array(
                    "iterate" => false,
                ),
                "TestOutputContainer",
                array(
                    "a" => "outputContainerTestAddFunction1",
                    "q" => "outputContainerTestAddFunction2",
                ),
                array(),
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                array("DEFAULT"),
                array(),
                array(),
                array(),
                array(
                    "DEFAULT" => "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1_a_TestOutputContainer
    [c] => 3
    [d] => 4
)
post"
                ),
            ),
            array( // #5
                array(
                    "iterate" => false,
                ),
                "TestOutputContainer",
                array(
                    "a" => array(new TestOutputContainer, "testAddFunction1"),
                    "b" => array(new TestOutputContainer, "SomeBadFunctionName"),
                    "c" => "anotherBadFunctionThatDoesntExist",
                    "q" => array("TestOutputContainer", "testAddFunction2"),
                ),
                array(
                    "q" => "DEFAULT",
                ),
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                array("DEFAULT"),
                array(),
                array(),
                array("a" => "Name Here", "c" => null, "d" => "", "q" => "Quality"),
                array(
                    "DEFAULT" => "preArray
(
    [a] => Name Here
    [c] => Third
    [d] => Another Column
    [q] => Quality
)
Array
(
    [a] => a_1_TestOutputContainer_TestOutputContainer
    [c] => 3
    [d] => 4
    [q] => _q_TestOutputContainer_static
)
post"
                ),
            ),
            array( // #6
                array(
                ),
                "TestOutputContainer3",
                array(),
                array(),
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                array("DEFAULT"),
                array(),
                array(),
                array(),
                array(
                    "DEFAULT" => "Container doesn't implement OutputInterface"
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload   Data to preload
    * @param array  $class     The container class to use
    * @param array  $functions The functions to call
    * @param arrray $types     The types for the above functions
    * @param array  $container The container data to use
    * @param array  $type      array of strings: The type of output
    * @param array  $params    an array of the params to use
    * @param array  $filters   The filters to use
    * @param array  $cols      Array of columns in the form $field => $name
    * @param string $expect    The expected return
    *
    * @return null
    *
    * @dataProvider dataGetOutput
    */
    public function testGetOutput(
        $preload, $class, $functions, $types, $container,
        $type, $params, $filters, $cols, $expect
    ) {
        $this->cont = new $class();
        $this->cont->outputParams["filters"] = $filters;
        $this->cont->loadData($container);
        $this->o = new OutputContainer($preload, $this->cont);
        foreach (array_keys((array)$functions) as $field) {
            $this->o->AddFunction($field, $functions[$field], $types[$field]);
        }
        foreach ((array)$type as $t) {
            $ret = $this->o->getOutput($t, $params[$t], $cols);
            $this->assertSame(
                $expect[$t],
                $ret,
                "type $t didn't work"
            );
        }
    }
    /**
    * test the set routine when an extra class exists
    *
    * @return null
    *
    */
    public function testToString2()
    {
        $obj = new OutputContainer(array());
        $ret = $obj->toString();
        $this->assertSame(
            "Container doesn't implement OutputInterface",
            $ret
        );
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataAddFunction()
    {
        return array(
            array(
                array(),
                "asdf",
                "outputContainerTestAddFunction1",
                null,
                array(
                    "Fields" => array("asdf" => "outputContainerTestAddFunction1"),
                ),
                true,
            ),
            array(
                array(),
                "asdf",
                "outputContainerTestAddFunction1",
                null,
                array(
                    "Fields" => array("asdf" => "outputContainerTestAddFunction1"),
                ),
                true,
            ),
            array(
                array(),
                "asdf",
                "SomeBadFunctionNameThatDoesntExist",
                null,
                array(),
                false,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload  Data to preload
    * @param string $field    The field to use
    * @param mixed  $function The function to call
    * @param string $type     The type of plugin to use
    * @param array  $expect   The expected callbacks array
    * @param bool   $return   The expected return value
    *
    * @return null
    *
    * @dataProvider dataAddFunction
    */
    public function testAddFunction(
        $preload, $field, $function, $type, $expect, $return
    ) {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->AddFunction($field, $function, $type);
        $this->assertSame($return, $ret, "Return Wrong");
        $this->assertAttributeSame(
            $expect, "callbacks", $this->o, "Callbacks Wrong"
        );
    }

    /**
    * data provider for testFilterFactory
    *
    * @return array
    */
    public static function dataFilterFactory()
    {
        return array(
            array(
                array(),
                array(
                    array("test" => "hello"),
                    array("test" => "there"),
                    array("test" => "world"),
                ),
                "TestOutputFilter1",
                array(
                    array("test" => "hello"),
                    array("test" => "there"),
                    array("test" => "world"),
                ),
            ),
            array(
                array(
                    "type" => "anotherType",
                ),
                array(
                    array("test" => "hello"),
                    array("test" => "there"),
                    array("test" => "world"),
                ),
                "TestOutputFilter2",
                array(
                    array("test" => "hello"),
                    array("test" => "there"),
                    array("test" => "world"),
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $setup  The setup array to use for the filter class
    * @param array $data   The data to use
    * @param array $class  The expected class
    * @param array $expect The expected data array
    *
    * @return null
    *
    * @dataProvider dataFilterFactory
    */
    public function testFilterFactory($setup, $data, $class, $expect)
    {
        $ret = &OutputContainer::filterFactory($setup, $data);
        $this->assertSame($class, get_class($ret), "Class Wrong");
        $this->assertAttributeSame(
            $expect, "data", $ret, "Data Wrong"
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @expectedException Exception
    *
    * @return null
    */
    public function testFilterFactoryException()
    {
        $config = array(
            "plugins" => array(
                "dir" => realpath(TEST_CONFIG_BASE."files/badPluginDir/"),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $ret = &OutputContainer::filterFactory($setup, $data);
    }
    /**
    * data provider for testGetAllFilterTypes
    *
    * @return array
    */
    public static function dataGetAllFilterTypes()
    {
        return array(
            array(
                array(
                ),
                array(
                    "DEFAULT" => "TestOutputFilter1",
                    "anotherType" => "TestOutputFilter2",
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload The stuff to give to the constructor
    * @param string $expect  The expected data
    *
    * @return null
    *
    * @dataProvider dataGetAllFilterTypes
    */
    public function testGetAllFiterTypes($preload, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->assertSame(
            $expect,
            $this->o->getAllFilterTypes()
        );
    }

}

/**
* test the set routine when an extra class exists
*
* @param string $field The field to use
* @param string $data  Data to preload
* @param object $obj   The field to use
*
* @return string
*
* @dataProvider dataAddFunction
*/
function outputContainerTestAddFunction1($field, $data, $obj)
{
    return $data."_".$field."_".get_class($obj);
}

/**
* test the set routine when an extra class exists
*
* @param string $field The field to use
* @param string $data  Data to preload
* @param object $obj   The field to use
*
* @return string
*
* @dataProvider dataAddFunction
*/
function outputContainerTestAddFunction2($field, $data, $obj)
{
    return $field."_".$data."_".get_class($obj);
}

?>
