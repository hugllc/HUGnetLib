<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteTables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
namespace HUGnet\db;
/** This is a required class */
require_once CODE_BASE.'db/Table.php';
/** This is a required class */
require_once CODE_BASE.'db/Connection.php';
/** This is a required class */
require_once CODE_BASE.'db/Average.php';
/** This is a required class */
require_once CODE_BASE.'db/Table.php';
/** This is a required class */
require_once TEST_BASE."db/tables/TableTestBase.php";
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'system/Device.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is a required class */
require_once TEST_CONFIG_BASE."files/mocks/AverageMock.php";
/** This is a required class */
require_once TEST_CONFIG_BASE."files/mocks/HistoryMock.php";
/** This is a required class */
require_once CODE_BASE.'interfaces/DBTable.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteTables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.8
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class AverageTest extends tables\TableTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->config = array(
            "System" => array(
                "get" => array(
                    "servers" => array(
                        array(
                            "driver" => "sqlite",
                            "file" => ":memory:",
                            "group" => "default",
                        ),
                    ),
                    "verbose" => 0,
                    "NoAverages" => 0,
                ),
            ),
        );
        $this->system = new \HUGnet\DummySystem("System");
        $this->system->resetMock($this->config);
        $this->connect = \HUGnet\db\Connection::factory($this->system);
        $this->pdo = &$this->connect->getDBO("default");
        $data = array(
        );
        $this->o = \HUGnet\db\Table::factory(
            $this->system, $data, "AverageTestStub", $this->connect
        );
        parent::Setup();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            TEST_CONFIG_BASE.'files/AverageTableBaseTest.xml'
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataColumns()
    {
        $system = new \HUGnet\DummySystem("System");
        $connect = \HUGnet\db\Connection::factory($system);
        $obj = \HUGnet\db\Table::factory(
            $system, $data, "AverageTestStub", $connect
        );
        return tables\TableTestBase::splitObject($obj, "sqlColumns");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataIndexes()
    {
        $system = new \HUGnet\DummySystem("System");
        $connect = \HUGnet\db\Connection::factory($system);
        $obj = \HUGnet\db\Table::factory(
            $system, $data, "AverageTestStub", $connect
        );
        return tables\TableTestBase::splitObject($obj, "sqlIndexes");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataVars()
    {
        $system = new \HUGnet\DummySystem("System");
        $connect = \HUGnet\db\Connection::factory($system);
        return array(
            array(
                \HUGnet\db\Table::factory(
                    $system, $data, "AverageTestStub", $connect
                )
            ),
        );
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                    "id"  => 41,
                    "Date"   => "2003-02-28 01:59:00",
                    "TestID" => 1,
                    "Type"  => Average::AVERAGE_15MIN,
                    "Data0"  => 0,
                    "Data1"  => 1,
                    "Data2"  => 2,
                    "Data3"  => 3,
                    "Data4"  => 4,
                    "Data5"  => 5,
                    "Data6"  => 6,
                    "Data7"  => 7,
                    "Data8"  => 8,
                    "Data9"  => 9,
                    "Data10"  => 10,
                    "Data11"  => 11,
                    "Data12"  => 12,
                    "Data13"  => 13,
                    "Data14"  => 14,
                ),
                array(
                    "group" => "default",
                    "raw" => array(),
                    "id"  => 41,
                    "Date"   => 1046397540,
                    "TestID" => 1,
                    "Type"  => Average::AVERAGE_15MIN,
                    "Data0"  => 0,
                    "Data1"  => 1,
                    "Data2"  => 2,
                    "Data3"  => 3,
                    "Data4"  => 4,
                    "Data5"  => 5,
                    "Data6"  => 6,
                    "Data7"  => 7,
                    "Data8"  => 8,
                    "Data9"  => 9,
                    "Data10"  => 10,
                    "Data11"  => 11,
                    "Data12"  => 12,
                    "Data13"  => 13,
                    "Data14"  => 14,
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $obj = \HUGnet\db\Table::factory(
            $this->system, $preload, "AverageTestStub", $this->connect
        );
        $this->assertEquals($expect, $obj->toArray());
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromDataArray()
    {
        return array(
            array(
                array(
                    "deltaT" => 1,
                    0 => array(
                        "value" => 1,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    1 => array(
                        "value" => 2,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    2 => array(
                        "value" => 4,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    3 => array(
                        "value" => 8,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "diff",
                        "raw" => 1834,
                    ),
                    4 => array(
                        "value" => 16,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "diff",
                        "raw" => 4842,
                    ),
                    5 => array(
                        "value" => 32,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    "DataIndex" => 127,
                    "timeConstant" => 5,
                ),
                array(
                    "group" => "default",
                    "raw" => array(
                        3  => 1834,
                        4  => 4842,
                    ),
                    "id"  => 0,
                    "Date"   => 0,
                    "TestID" => null,
                    "Type"  => Average::AVERAGE_15MIN,
                    "Data0"  => 1,
                    "Data1"  => 2,
                    "Data2"  => 4,
                    "Data3"  => 8,
                    "Data4"  => 16,
                    "Data5"  => 32,
                    "Data6"  => null,
                    "Data7"  => null,
                    "Data8"  => null,
                    "Data9"  => null,
                    "Data10"  => null,
                    "Data11"  => null,
                    "Data12"  => null,
                    "Data13"  => null,
                    "Data14"  => null,
                ),
            ),
            array(
                array(
                    "id" => 21,
                    "Date" => 1234,
                    "deltaT" => 1,
                    0 => array(
                        "value" => 1,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    1 => array(
                        "value" => 2,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    2 => array(
                        "value" => 4,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    3 => array(
                        "value" => 8,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    4 => array(
                        "value" => 16,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    5 => array(
                        "value" => 32,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    "DataIndex" => 127,
                    "timeConstant" => 5,
                ),
                array(
                    "group" => "default",
                    "raw" => array(
                    ),
                    "id"  => 21,
                    "Date"   => 1234,
                    "TestID" => null,
                    "Type"  => Average::AVERAGE_15MIN,
                    "Data0"  => 1,
                    "Data1"  => 2,
                    "Data2"  => 4,
                    "Data3"  => 8,
                    "Data4"  => 16,
                    "Data5"  => 32,
                    "Data6"  => null,
                    "Data7"  => null,
                    "Data8"  => null,
                    "Data9"  => null,
                    "Data10"  => null,
                    "Data11"  => null,
                    "Data12"  => null,
                    "Data13"  => null,
                    "Data14"  => null,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromDataArray
    */
    public function testFromDataArray($preload, $expect)
    {
        $this->o->fromDataArray($preload);
        $this->assertSame($expect, $this->o->toArray());
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromAny()
    {
        return array(
            array(
                array(
                    "deltaT" => 1,
                    0 => array(
                        "value" => 1,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    1 => array(
                        "value" => 2,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    2 => array(
                        "value" => 4,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    3 => array(
                        "value" => 8,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    4 => array(
                        "value" => 16,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    5 => array(
                        "value" => 32,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => "raw",
                    ),
                    "DataIndex" => 127,
                    "timeConstant" => 5,
                ),
                array(
                    "group" => "default",
                    "raw" => array(),
                    "id"  => 0,
                    "Date"   => 0,
                    "TestID" => null,
                    "Type"  => Average::AVERAGE_15MIN,
                    "Data0"  => 1,
                    "Data1"  => 2,
                    "Data2"  => 4,
                    "Data3"  => 8,
                    "Data4"  => 16,
                    "Data5"  => 32,
                    "Data6"  => null,
                    "Data7"  => null,
                    "Data8"  => null,
                    "Data9"  => null,
                    "Data10"  => null,
                    "Data11"  => null,
                    "Data12"  => null,
                    "Data13"  => null,
                    "Data14"  => null,
                ),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => "2003-02-28 01:59:00",
                    "deltaT"  => 5.2,
                    "Data0"  => 0,
                    "Data1"  => 1,
                    "Data2"  => 2,
                    "Data3"  => 3,
                    "Data4"  => 4,
                    "Data5"  => 5,
                    "Data6"  => 6,
                    "Data7"  => 7,
                    "Data8"  => 8,
                    "Data9"  => 9,
                    "Data10"  => 10,
                    "Data11"  => 11,
                    "Data12"  => 12,
                    "Data13"  => 13,
                    "Data14"  => 14,
                ),
                array(
                    "group" => "default",
                    "raw" => array(),
                    "id"  => 41,
                    "Date"   => 1046397540,
                    "TestID" => null,
                    "Type"  => Average::AVERAGE_15MIN,
                    "Data0"  => 0,
                    "Data1"  => 1,
                    "Data2"  => 2,
                    "Data3"  => 3,
                    "Data4"  => 4,
                    "Data5"  => 5,
                    "Data6"  => 6,
                    "Data7"  => 7,
                    "Data8"  => 8,
                    "Data9"  => 9,
                    "Data10"  => 10,
                    "Data11"  => 11,
                    "Data12"  => 12,
                    "Data13"  => 13,
                    "Data14"  => 14,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromAny
    */
    public function testFromAny($preload, $expect)
    {
        $this->o->fromAny($preload);
        $this->assertAttributeSame($expect, "data", $this->o);
    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("Date", "2010-04-25 13:42:23", 1272202943),
            array("Date", "2010-04-25", 1272153600),
            array("Date", "Sun, 25 April 2010, 1:42:23pm", 1272202943),
            array("Date", 1234567890, 1234567890),
            array("Date", "This is not a date", 0),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->set($var, $value);
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $data[$var]);
    }
    /**
    * Data provider for testGetPeriod
    *
    * @return array
    */
    public static function dataGetPeriod()
    {
        return array(
            array(
                array(
                ),
                1292648500,
                1292648600,
                2,
                Average::AVERAGE_15MIN,
                array(
                    array(
                        "group" => "default",
                        "raw" => array(),
                        "id"  => 2,
                        "Date"   => 1292648600,
                        "TestID" => null,
                        "Type"  => Average::AVERAGE_15MIN,
                        "Data0"  => "1.0",
                        "Data1"  => "2.0",
                        "Data2"  => "3.0",
                        "Data3"  => "4.0",
                        "Data4"  => "5.0",
                        "Data5"  => "6.0",
                        "Data6"  => "7.0",
                        "Data7"  => "8.0",
                        "Data8"  => "9.0",
                        "Data9"  => "10.0",
                        "Data10"  => "11.0",
                        "Data11"  => "12.0",
                        "Data12"  => "13.0",
                        "Data13"  => "14.0",
                        "Data14"  => "15.0",
                    ),
                    array(
                        "group" => "default",
                        "raw" => array(),
                        "id"  => 2,
                        "Date"   => 1292648500,
                        "TestID" => null,
                        "Type"  => Average::AVERAGE_15MIN,
                        "Data0"  => "1.0",
                        "Data1"  => "2.0",
                        "Data2"  => "3.0",
                        "Data3"  => "4.0",
                        "Data4"  => "5.0",
                        "Data5"  => "6.0",
                        "Data6"  => "7.0",
                        "Data7"  => "8.0",
                        "Data8"  => "9.0",
                        "Data9"  => "10.0",
                        "Data10"  => "11.0",
                        "Data11"  => "12.0",
                        "Data12"  => "13.0",
                        "Data13"  => "14.0",
                        "Data14"  => "15.0",
                    ),
                ),
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array  $preload The array to preload into the class
    * @param int    $start   The first date
    * @param int    $end     The last date
    * @param mixed  $key     The key to use
    * @param string $type    The type to use
    * @param array  $expect  The expected return
    *
    * @dataProvider dataGetPeriod
    *
    * @return null
    */
    public function testGetPeriod(
        $preload,
        $start,
        $end,
        $key,
        $type,
        $expect
    ) {
        $ret = $this->o->getPeriod($start, $end, $key, $type);
        if ($ret !== false) {
            $ret = array();
            do {
                $ret[] = $this->o->toArray();
            } while ($this->o->nextInto());
        }
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testCalcAverage
    *
    * @return array
    */
    public static function dataCalc15MinAverage()
    {
        return array(
            array(  // #0 basic input.  All the same.
                array(
                ),
                array(
                    array(
                        "id" => 15,
                        "Date" => gmmktime(10, 01, 12, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 1.0,
                        "Data2" => 1.0,
                    ),
                    array(
                        "id" => 15,
                        "Date" => gmmktime(10, 06, 12, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 1.0,
                        "Data2" => 1.0,
                    ),
                    array(
                        "id" => 15,
                        "Date" => gmmktime(10, 11, 12, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 1.0,
                        "Data2" => 1.0,
                    ),
                    array(
                        "id" => 15,
                        "Date" => gmmktime(10, 16, 12, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 1.0,
                        "Data2" => 1.0,
                    ),
                ),
                "\HUGnet\db\HistoryMock",
                array(
                    "Device" => array(
                        "id" => 15,
                        "get" => array(
                            "id" => 15,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                            "total" => false,
                            "maxDecimals" => 2,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                            "total" => false,
                            "maxDecimals" => 2,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                            "total" => true,
                            "maxDecimals" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 15,
                    "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                    "Data0" => 1.0,
                    "Data1" => 1.0,
                    "Data2" => 3.76,
                ),
                true,
            ),
            array(  // #1 basic input.  Everything present
                array(
                ),
                array(
                    array(
                        "id" => 18,
                        "Date" => gmmktime(10, 20, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 18,
                        "Date" => gmmktime(10, 25, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 18,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 18,
                        "Date" => gmmktime(10, 33, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                array(
                    "Device" => array(
                        "id" => 18,
                        "get" => array(
                            "id" => 18,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 18,
                    "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                    "Data2" => 15.0,
                ),
                true,
            ),
            array(  // #2 basic input. missing bits
                array(
                ),
                array(
                    array(
                        "id" => 21,
                        "Date" => gmmktime(10, 20, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 1.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 21,
                        "Date" => gmmktime(10, 25, 00, 1, 22, 2009),
                        "Data0" => 4.0,
                        "Data1" => null,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 21,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => null,
                        "Data1" => 7.0,
                        "Data2" => 2.0,
                    ),
                    array(
                        "id" => 21,
                        "Date" => gmmktime(10, 33, 12, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                array(
                    "Device" => array(
                        "id" => 21,
                        "get" => array(
                            "id" => 21,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                            "total" => false,
                            "maxDecimals" => 2,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 21,
                    "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                    "Data0" => 4.0,
                    "Data1" => 5.0,
                    "Data2" => 6.0,
                ),
                true,
            ),
            array(  // #3 basic input. missing bits
                array(
                ),
                array(
                    array(
                        "id" => 22,
                        "Date" => gmmktime(10, 35, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 1.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 22,
                        "Date" => gmmktime(10, 40, 00, 1, 22, 2009),
                        "Data0" => 4.0,
                        "Data1" => null,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 22,
                        "Date" => gmmktime(10, 46, 00, 1, 22, 2009),
                        "Data0" => null,
                        "Data1" => 7.0,
                        "Data2" => 2.0,
                    ),
                    array(
                        "id" => 22,
                        "Date" => gmmktime(10, 51, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                array(
                    "Device" => array(
                        "id" => 22,
                        "get" => array(
                            "id" => 22,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 3,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 22,
                    "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                    "Data0" => 3.0,
                    "Data1" => 5.0,
                    "Data2" => 5.667,
                ),
                true,
            ),
            array(  // #4 basic input. missing bits.  Next record too old
                array(
                ),
                array(
                    array(
                        "id" => 23,
                        "Date" => gmmktime(10, 50, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 1.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 23,
                        "Date" => gmmktime(10, 55, 00, 1, 22, 2009),
                        "Data0" => 4.0,
                        "Data1" => null,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 23,
                        "Date" => gmmktime(11, 17, 00, 1, 22, 2009),
                        "Data0" => null,
                        "Data1" => 7.0,
                        "Data2" => 2.0,
                    ),
                    array(
                        "id" => 23,
                        "Date" => gmmktime(11, 21, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                array(
                    "Device" => array(
                        "id" => 23,
                        "get" => array(
                            "id" => 23,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 23,
                    "Date" => gmmktime(10, 45, 00, 1, 22, 2009),
                    "Data0" => 3.0,
                    "Data1" => 1.0,
                    "Data2" => 4.0,
                ),
                true,
            ),
            array(  // #5 basic input.  One column has no data
                array(
                ),
                array(
                    array(
                        "id" => 24,
                        "Date" => gmmktime(10, 20, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 24,
                        "Date" => gmmktime(10, 25, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 24,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 24,
                        "Date" => gmmktime(10, 33, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => null,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                array(
                    "Device" => array(
                        "id" => 24,
                        "get" => array(
                            "id" => 24,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 24,
                    "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                ),
                true,
            ),
            array(  // #6 basic input. missing bits.  Next record too old
                    // The time in "Date" doesn't make a difference.
                array(
                    "id" => 23,
                    "Type" => Average::AVERAGE_15MIN,
                    "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                    "Data0" => 1.0,
                    "Data1" => 3.0,
                    "Data2" => 6.0,
                ),
                array(
                    array(
                        "id" => 23,
                        "Date" => gmmktime(10, 50, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 1.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 23,
                        "Date" => gmmktime(10, 55, 00, 1, 22, 2009),
                        "Data0" => 4.0,
                        "Data1" => 1.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 23,
                        "Date" => gmmktime(11, 17, 00, 1, 22, 2009),
                        "Data0" => 5.0,
                        "Data1" => 7.0,
                        "Data2" => 2.0,
                    ),
                    array(
                        "id" => 23,
                        "Date" => gmmktime(11, 21, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                array(
                    "Device" => array(
                        "id" => 23,
                        "get" => array(
                            "id" => 23,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 23,
                    "Date" => gmmktime(10, 45, 00, 1, 22, 2009),
                    "Data0" => 3.0,
                    "Data1" => 1.0,
                    "Data2" => 7.0,
                ),
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload     The data to preload into the object
    * @param mixed  $preloadData The data to feed the data object
    * @param string $class       The class of the data object
    * @param array  $device      The device to do the averages with
    * @param array  $expect      The expected average (from toArray())
    * @param array  $expectRet   The expected return value from calcAverage
    *
    * @return null
    *
    * @dataProvider dataCalc15MinAverage
    */
    public function testCalc15MinAverage(
        $preload, $preloadData, $class, $device, $expect, $expectRet
    ) {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->o->device = new \HUGnet\DummyBase("Device");
        $this->o->device->resetMock($device);
        $data = new $class($this->system, $preloadData, $this->connect);
        $ret = $this->o->calc15MinAverage($data);
        $this->assertSame($expectRet, $ret, "Return Wrong");
        $this->assertSame($expect, $this->o->toArray(false));
    }
    /**
    * data provider for testCalcAverage
    *
    * @return array
    */
    public static function dataCalcAverage()
    {
        return array(
            array(   // #0 No input
                array(
                ),
                array(
                ),
                "\HUGnet\db\HistoryMock",
                Average::AVERAGE_MONTHLY,
                array(
                ),
                array(
                ),
                false,
            ),
            array(   // #1 No input
                array(
                ),
                array(
                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_MONTHLY,
                array(
                ),
                array(
                ),
                false,
            ),
            array(  // #2 basic input.  Everything present
                array(
                ),
                array(
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 20, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 25, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 33, 12, 1, 22, 2009),
                        "Data0" => 12.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                Average::AVERAGE_15MIN,
                array(
                    "Device" => array(
                        "id" => 25,
                        "get" => array(
                            "id" => 25,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 25,
                    "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                    "Data2" => 15.0,
                ),
                true,
            ),
            array(  // #3 basic input.  15MIN average
                array(
                ),
                array(
                    array(
                        "id" => 26,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 26,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 26,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 26,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 45, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_HOURLY,
                array(
                    "Device" => array(
                        "id" => 26,
                        "get" => array(
                            "id" => 26,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 26,
                    "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                    "Type" => Average::AVERAGE_HOURLY,
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                    "Data2" => 20.0,
                ),
                true,
            ),
            array(  // #4 basic input.  HOURLY average.  Extra 15MIN average here
                array(
                ),
                array(
                    array(
                        "id" => 27,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 27,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(11, 00, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 27,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(12, 00, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 27,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(12, 15, 00, 1, 22, 2009),
                        "Data0" => 16.0,
                        "Data1" => 17.0,
                        "Data2" => 18.0,
                    ),
                    array(
                        "id" => 27,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(13, 00, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_DAILY,
                array(
                    "Device" => array(
                        "id" => 27,
                        "get" => array(
                            "id" => 27,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 27,
                    "Date" => gmmktime(0, 00, 00, 1, 22, 2009),
                    "Type" => Average::AVERAGE_DAILY,
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                    "Data2" => 20.0,
                ),
                true,
            ),
            array(  // #5 basic input.  HOURLY average.  Extra 15MIN average here
                array(
                ),
                array(
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 12, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 18, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 23, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 31, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_MONTHLY,
                array(
                    "Device" => array(
                        "id" => 28,
                        "get" => array(
                            "id" => 28,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 28,
                    "Date" => gmmktime(0, 00, 00, 1, 1, 2009),
                    "Type" => Average::AVERAGE_MONTHLY,
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                    "Data2" => 20.0,
                ),
                true,
            ),
            array(  // #6 basic input.  HOURLY average.  Extra 15MIN average here
                array(
                ),
                array(
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 4, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 5, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 6, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 10, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 28,
                        "Type" => Average::AVERAGE_DAILY,
                        "Date" => gmmktime(00, 00, 00, 1, 11, 2009),
                        "Data0" => 13.0,
                        "Data1" => 14.0,
                        "Data2" => 15.0,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_WEEKLY,
                array(
                    "Device" => array(
                        "id" => 28,
                        "get" => array(
                            "id" => 28,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 28,
                    "Date" => gmmktime(0, 00, 00, 1, 4, 2009),
                    "Type" => Average::AVERAGE_WEEKLY,
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                    "Data2" => 20.0,
                ),
                true,
            ),
            array(  // #7 basic input.  HOURLY average.  Extra 15MIN average here
                array(
                ),
                array(
                    array(
                        "id" => 29,
                        "Type" => Average::AVERAGE_MONTHLY,
                        "Date" => gmmktime(00, 00, 00, 1, 1, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 29,
                        "Type" => Average::AVERAGE_MONTHLY,
                        "Date" => gmmktime(00, 00, 00, 2, 1, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 29,
                        "Type" => Average::AVERAGE_MONTHLY,
                        "Date" => gmmktime(00, 00, 00, 8, 1, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 29,
                        "Type" => Average::AVERAGE_MONTHLY,
                        "Date" => gmmktime(00, 00, 00, 11, 1, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_YEARLY,
                array(
                    "Device" => array(
                        "id" => 29,
                        "get" => array(
                            "id" => 29,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 29,
                    "Date" => gmmktime(0, 00, 00, 1, 1, 2009),
                    "Type" => Average::AVERAGE_YEARLY,
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                    "Data2" => 20.0,
                ),
                true,
            ),
            array(  // #8 basic input.  15MIN average. Stuff missing
                array(
                ),
                array(
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 1.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => null,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 45, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => null,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_HOURLY,
                array(
                    "Device" => array(
                        "id" => 31,
                        "get" => array(
                            "id" => 31,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 31,
                    "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                    "Type" => Average::AVERAGE_HOURLY,
                    "Data0" => 3.0,
                    "Data1" => 4.0,
                ),
                true,
            ),
            array(  // #9 basic input.  Bad type
                array(
                ),
                array(
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 1.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => null,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => null,
                    ),
                    array(
                        "id" => 31,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(10, 45, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => null,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                "BadType",
                array(
                    "Device" => array(
                        "id" => 31,
                        "get" => array(
                            "id" => 31,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                ),
                false,
            ),
            array(  // #10 basic input.  Everything present, 5 records
                array(
                ),
                array(
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 18, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 21, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 24, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 27, 00, 1, 22, 2009),
                        "Data0" => 12.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 14.0,
                        "Data1" => 15.0,
                        "Data2" => 16.0,
                    ),
                    array(
                        "id" => 25,
                        "Date" => gmmktime(10, 33, 12, 1, 22, 2009),
                        "Data0" => 14.0,
                        "Data1" => 15.0,
                        "Data2" => 16.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                Average::AVERAGE_15MIN,
                array(
                    "Device" => array(
                        "id" => 25,
                        "get" => array(
                            "id" => 25,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => true,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    "id" => 25,
                    "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                    "Data0" => 7.0,
                    "Data1" => 7.8,
                    "Data2" => 44.0,
                ),
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload     The data to preload into the object
    * @param mixed  $preloadData The data to feed the data object
    * @param string $class       The class of the data object
    * @param string $type        The type of array to calculate
    * @param array  $device      The device to do the averages with
    * @param array  $expect      The expected average (from toArray())
    * @param array  $expectRet   The expected return value from calcAverage
    *
    * @return null
    *
    * @dataProvider dataCalcAverage
    */
    public function testCalcAverage(
        $preload, $preloadData, $class, $type, $device, $expect, $expectRet
    ) {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->o->device = new \HUGnet\DummyBase("Device");
        $this->o->device->resetMock($device);
        $data = new $class($this->system, $preloadData, $this->connect);
        $ret = $this->o->calcAverage($data, $type);
        $this->assertSame($expectRet, $ret, "Return Wrong");
        $this->assertSame($expect, $this->o->toArray(false));
    }
    /**
    * data provider for testCalcAverage
    *
    * @return array
    */
    public static function dataCalcAverageMulti()
    {
        return array(
            array(   // #0 No input
                array(
                ),
                array(
                ),
                "\HUGnet\db\HistoryMock",
                Average::AVERAGE_15MIN,
                array(
                ),
                array(
                ),
                false,
            ),
            array(  // #1 basic input.  Everything present
                array(
                ),
                array(
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 20, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 25, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 33, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                Average::AVERAGE_15MIN,
                array(
                    "Device" => array(
                        "id" => 32,
                        "get" => array(
                            "id" => 32,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),
                ),
            ),
            array(  // #2 basic input.  HOURLY average.  Extra 15MIN average here
                array(
                ),
                array(
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(10, 00, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(11, 00, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(12, 00, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(13, 00, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(14, 00, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(15, 00, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(16, 00, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(17, 00, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(0, 00, 00, 1, 23, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(1, 00, 00, 1, 23, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(2, 00, 00, 1, 23, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(3, 00, 00, 1, 23, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_15MIN,
                        "Date" => gmmktime(0, 15, 00, 1, 24, 2009),
                        "Data0" => 16.0,
                        "Data1" => 17.0,
                        "Data2" => 18.0,
                    ),
                    array(
                        "id" => 33,
                        "Type" => Average::AVERAGE_HOURLY,
                        "Date" => gmmktime(1, 00, 00, 1, 24, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),

                ),
                "\HUGnet\db\AverageMock",
                Average::AVERAGE_DAILY,
                array(
                    "Device" => array(
                        "id" => 33,
                        "get" => array(
                            "id" => 33,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => 33,
                        "Date" => gmmktime(0, 00, 00, 1, 22, 2009),
                        "Type" => Average::AVERAGE_DAILY,
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 33,
                        "Date" => gmmktime(0, 00, 00, 1, 23, 2009),
                        "Type" => Average::AVERAGE_DAILY,
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 33,
                        "Date" => gmmktime(0, 00, 00, 1, 24, 2009),
                        "Type" => Average::AVERAGE_DAILY,
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                ),
                true,
            ),
            array(  // #3 basic input.  Everything present.  Skipped a record
                array(
                ),
                array(
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 20, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 25, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 51, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 58, 12, 1, 22, 2009),
                        "Data0" => 13.0,
                        "Data1" => 14.0,
                        "Data2" => 15.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                Average::AVERAGE_15MIN,
                array(
                    "Device" => array(
                        "id" => 32,
                        "get" => array(
                            "id" => 32,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 30, 00, 1, 22, 2009),
                        "Data0" => 3.0,
                        "Data1" => 4.0,
                        "Data2" => 5.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 45, 00, 1, 22, 2009),
                        "Data0" => 12.06,
                        "Data1" => 13.06,
                        "Data2" => 14.06,
                    ),
                ),
            ),
            array(  // #4 basic input.  Everything present.  Skipped 2 records
                array(
                ),
                array(
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 20, 00, 1, 22, 2009),
                        "Data0" => 1.0,
                        "Data1" => 2.0,
                        "Data2" => 3.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 25, 00, 1, 22, 2009),
                        "Data0" => 2.0,
                        "Data1" => 3.0,
                        "Data2" => 4.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 29, 00, 1, 22, 2009),
                        "Data0" => 6.0,
                        "Data1" => 7.0,
                        "Data2" => 8.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(11, 01, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(11, 08, 12, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),

                ),
                "\HUGnet\db\HistoryMock",
                Average::AVERAGE_15MIN,
                array(
                    "Device" => array(
                        "id" => 32,
                        "get" => array(
                            "id" => 32,
                        ),
                        "input" => array(
                            "0" => new \HUGnet\DummyBase("Sensor0"),
                            "1" => new \HUGnet\DummyBase("Sensor1"),
                            "2" => new \HUGnet\DummyBase("Sensor2"),
                            "3" => new \HUGnet\DummyBase("Sensor"),
                            "4" => new \HUGnet\DummyBase("Sensor"),
                            "5" => new \HUGnet\DummyBase("Sensor"),
                            "6" => new \HUGnet\DummyBase("Sensor"),
                            "7" => new \HUGnet\DummyBase("Sensor"),
                            "8" => new \HUGnet\DummyBase("Sensor"),
                            "9" => new \HUGnet\DummyBase("Sensor"),
                            "10" => new \HUGnet\DummyBase("Sensor"),
                            "11" => new \HUGnet\DummyBase("Sensor"),
                            "12" => new \HUGnet\DummyBase("Sensor"),
                            "13" => new \HUGnet\DummyBase("Sensor"),
                            "14" => new \HUGnet\DummyBase("Sensor"),
                        ),
                        "dataChannels" => new \HUGnet\DummyBase("DataChannels"),
                    ),
                    "Sensor" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor0" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor1" => array(
                        "id" => 0,
                        "get" => array(
                            "id" => 0,
                        ),
                    ),
                    "Sensor2" => array(
                        "id" => 2,
                        "get" => array(
                            "id" => 2,
                        ),
                    ),
                    "DataChannels" => array(
                        "toArray" => array(
                            0 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            1 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            2 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            3 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            4 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            5 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            6 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            7 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            8 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            9 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            10 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            11 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            12 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            13 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                            14 => array(
                                "total" => false,
                                "maxDecimals" => 2,
                            ),
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => 32,
                        "Date" => gmmktime(10, 15, 00, 1, 22, 2009),
                        "Data0" => 2.79,
                        "Data1" => 3.79,
                        "Data2" => 4.79,
                    ),
                    array(
                        "id" => 32,
                        "Date" => gmmktime(11, 00, 00, 1, 22, 2009),
                        "Data0" => 11.0,
                        "Data1" => 12.0,
                        "Data2" => 13.0,
                    ),
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload     The data to preload into the object
    * @param mixed  $preloadData The data to feed the data object
    * @param string $class       The class of the data object
    * @param string $type        The type of average to calculate
    * @param array  $device      The device to do the averages with
    * @param array  $expect      The expected average (from toArray())
    *
    * @return null
    *
    * @dataProvider dataCalcAverageMulti
    */
    public function testCalcAverageMulti(
        $preload, $preloadData, $class, $type, $device, $expect
    ) {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->o->device = new \HUGnet\DummyBase("Device");
        $this->o->device->resetMock($device);
        $data = new $class($this->system, $preloadData, $this->connect);
        $ret = array();
        while ($this->o->calcAverage($data, $type)) {
            $ret[] = $this->o->toArray(false);
        }
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testCalcAverage
    *
    * @return array
    */
    public static function dataOutputDate()
    {
        return array(
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 1, 1, 2010),
                    "Type"  => Average::AVERAGE_15MIN,
                ),
                "Date",
                gmmktime(0, 0, 0, 1, 1, 2010),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 1, 1, 2010),
                    "Type"  => Average::AVERAGE_HOURLY,
                ),
                "Date",
                gmmktime(0, 0, 0, 1, 1, 2010),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 1, 1, 2010),
                    "Type"  => Average::AVERAGE_DAILY,
                ),
                "Date",
                gmmktime(0, 0, 0, 1, 1, 2010),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 1, 1, 2010),
                    "Type"  => Average::AVERAGE_WEEKLY,
                ),
                "Date",
                gmmktime(0, 0, 0, 1, 1, 2010),
            ),
            array( // Note the use of gmmktime instead of mktime
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 1, 1, 2010),
                    "Type"  => Average::AVERAGE_MONTHLY,
                ),
                "Date",
                mktime(0, 0, 0, 1, 1, 2010),
            ),
            array( // Note the use of gmmktime instead of mktime
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 1, 1, 2010),
                    "Type"  => Average::AVERAGE_YEARLY,
                ),
                "Date",
                mktime(0, 0, 0, 1, 1, 2010),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 6, 1, 2010),
                    "Type"  => Average::AVERAGE_15MIN,
                ),
                "Date",
                gmmktime(0, 0, 0, 6, 1, 2010),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 6, 1, 2010),
                    "Type"  => Average::AVERAGE_HOURLY,
                ),
                "Date",
                gmmktime(0, 0, 0, 6, 1, 2010),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 6, 1, 2010),
                    "Type"  => Average::AVERAGE_DAILY,
                ),
                "Date",
                gmmktime(0, 0, 0, 6, 1, 2010),
            ),
            array(
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 6, 1, 2010),
                    "Type"  => Average::AVERAGE_WEEKLY,
                ),
                "Date",
                gmmktime(0, 0, 0, 6, 1, 2010),
            ),
            array( // Note the use of gmmktime instead of mktime
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 6, 1, 2010),
                    "Type"  => Average::AVERAGE_MONTHLY,
                ),
                "Date",
                mktime(0, 0, 0, 6, 1, 2010),
            ),
            array( // Note the use of gmmktime instead of mktime
                array(
                    "id"  => 41,
                    "Date"   => gmmktime(0, 0, 0, 6, 1, 2010),
                    "Type"  => Average::AVERAGE_YEARLY,
                ),
                "Date",
                mktime(0, 0, 0, 6, 1, 2010),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $preload The data to preload into the object
    * @param string $field   The field to choose
    * @param string $expect  The expected average (from toArray())
    *
    * @return null
    *
    * @dataProvider dataOutputDate
    */
    public function testOutputDate($preload, $field, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->assertSame($expect, $this->o->outputDate($field));
    }
    /**
    * Test that averageTypes is an array
    *
    * @return null
    */
    public function testAverageTypesIsAnArray()
    {
        $ret = $this->o->averageTypes();
        $this->assertInternalType("array", $ret, "Return must be an array");
        $this->assertGreaterThan(0, count($ret), "Return must not be empty");
    }
     /**
    * Test that averageTypes is an array
    *
    * @return null
    */
    public function testAverageTypesNoAverages()
    {
        $this->config = array(
            "System" => array(
                "get" => array(
                    "servers" => array(
                        array(
                            "driver" => "sqlite",
                            "file" => ":memory:",
                            "group" => "default",
                        ),
                    ),
                    "verbose" => 0,
                    "NoAverages" => 1,
                ),
            ),
        );
        $this->system->resetMock($this->config);
        $ret = $this->o->averageTypes();
        $this->assertInternalType("array", $ret, "Return must be an array");
        $this->assertEquals(array(), $ret, "Return must be empty");
    }
    /**
    * test the set routine when an extra class exists
    *
    * @return null
    */
    public function testBaseType()
    {
        $obj = \HUGnet\db\Table::factory(
            $this->system, $preload, "AverageTestStub", $this->connect
        );
        $this->assertEquals(Average::AVERAGE_15MIN, $obj->baseType());
    }

}
namespace HUGnet\db\tables;
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteTables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class AverageTestStub extends \HUGnet\db\Average
    implements \HUGnet\interfaces\DBTable
{
    /** @var string This is the table we should use */
    public $sqlTable = "Average";
    /**
    * This calculates the averages
    *
    * It will return once for each average that it calculates.  The average will be
    * stored in the instance this is called from.  If this is fed history table
    * then it will calculate 15 minute averages.
    *
    * @param History &$data This is the data to use to calculate the average
    *
    * @return float The number to multiply by for the weighted average.
    */
    public function calc15MinAverage(\HUGnet\db\History &$data)
    {
        return parent::calc15MinAverage($data);
    }
    /**
    * By default it outputs the date in the format specified in myConfig
    *
    * @param string $field The field to output
    *
    * @return string The date as a formatted string
    */
    public function outputDate($field)
    {
        return parent::outputDate($field);
    }
}
?>
