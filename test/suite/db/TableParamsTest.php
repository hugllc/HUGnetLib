<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteTables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
namespace HUGnet\db;
/** This is a required class */
require_once CODE_BASE.'db/TableParams.php';
/** This is a required class */
require_once CODE_BASE.'db/Connection.php';
/** This is a required class */
require_once TEST_BASE."db/tables/TableTestBase.php";
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once CODE_BASE.'system/Device.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is a required class */
require_once CODE_BASE.'interfaces/DBTable.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteTables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class TableParamsTest extends  \PHPUnit_Extensions_Database_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->config = array(
            "System" => array(
                "get" => array(
                    "servers" => array(
                        array(
                            "driver" => "sqlite",
                            "file" => ":memory:",
                            "group" => "default",
                        ),
                    ),
                    "verbose" => 0,
                ),
            ),
        );
        $this->system = new \HUGnet\DummySystem("System");
        $this->system->resetMock($this->config);
        $this->connect = \HUGnet\db\Connection::factory($this->system);
        $this->pdo = &$this->connect->getDBO("default");
        $this->pdo->query("DROP TABLE IF EXISTS `myTable`");
        $this->pdo->query(
            "CREATE TABLE `myTable` ("
            ." `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,"
            ." `name` varchar(32) NOT NULL,"
            ." `value` float NULL"
            ." )"
        );
        $data = array(
        );
        $this->o = \HUGnet\db\Table::factory(
            $this->system, $data, "TableParamsTestStub", $this->connect
        );
        parent::Setup();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            TEST_CONFIG_BASE.'files/TableParamsTableTest.xml'
        );
    }

    /**
    * This sets up our database connection
    *
    * @return null
    */
    protected function getConnection()
    {
        return $this->createDefaultDBConnection($this->pdo, "sqlite");
    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("params", "asdfasdfasdfasdf", "asdfasdfasdfasdf"),
            array("params", array(1,2,3,4), "[1,2,3,4]"),
            array("extra", array(1,2,3,4), array(1,2,3,4)),
            array("extra", array(1,"","",4), array(0 => 1, 3 => 4)),
            array("min", 5, 5),
            array("NotAValidParam", 5, null),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->set($var, $value);
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $this->o->get($var));
    }
    /**
    * Data provider for testFromArray
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
            array(
                array(
                    "dev" => 156,
                    "sensor" => 23,
                    "id" => 1,
                    "type" => "asdf",
                    "location" => "HERE",
                    "units" => "&deg;C",
                    "decimals" => 4,
                    "storageUnits" => "&deg;C",
                    "unitType" => "Temperature",
                    "driver" => "asdf",
                    "min" => 5,
                    "max" => 15,
                    "extra" => array(),
                ),
                array(
                    "min",
                    "max",
                    "extra",
                ),
                array(
                    "group" => 'default',
                    "id" => 1,
                    "params" => json_encode(
                        array("min" => 5, "max" => 15, "extra" => array())
                    ),
                    "fluff" => 'nStuff',
                    'other' => 'things',
                    'name' => 'Name',
                    'value' => 12.0,
                ),
            ),
            array(
                array(
                    "dev" => 156,
                    "sensor" => 23,
                    "id" => 1,
                    "type" => "asdf",
                    "location" => "HERE",
                    "units" => "&deg;C",
                    "decimals" => 4,
                    "params" => '{"storageUnits":"&deg;C","unitType":"Temperature"}',
                ),
                array(
                    "min",
                    "max",
                    "extra",
                ),
                array(
                    "group" => 'default',
                    "id" => 1,
                    "params" => '{"storageUnits":"&deg;C","unitType":"Temperature"}',
                    "fluff" => 'nStuff',
                    'other' => 'things',
                    'name' => 'Name',
                    'value' => 12.0,
                ),
            ),
            array(
                array(
                    "dev" => 156,
                    "sensor" => 23,
                    "id" => 1,
                    "type" => "asdf",
                    "location" => "HERE",
                    "units" => "&deg;C",
                    "decimals" => 4,
                    "storageUnits" => "&deg;C",
                    "unitType" => "Temperature",
                    "params" => array(1,2,3,4, "extra" => array(1,2,3,4)),
                ),
                array(
                    "min",
                    "max",
                    "extra",
                ),
                array(
                    "group" => 'default',
                    "id" => 1,
                    "params" => '{"extra":[1,2,3,4]}',
                    "fluff" => 'nStuff',
                    'other' => 'things',
                    'name' => 'Name',
                    'value' => 12.0,
                ),
            ),
            array(
                array(
                    "dev" => 156,
                    "sensor" => 23,
                    "id" => 1,
                    "type" => "asdf",
                    "location" => "HERE",
                    "units" => "&deg;C",
                    "decimals" => 4,
                    "storageUnits" => "&deg;C",
                    "unitType" => "Temperature",
                    "params" => array("extra" => array(1,2,3,4)),
                ),
                array(
                ),
                array(
                    "group" => 'default',
                    "id" => 1,
                    "params" => '{"extra":[1,2,3,4],"dev":156,"sensor":23,'
                        .'"type":"asdf","location":"HERE","units":"&deg;C",'
                        .'"decimals":4,"storageUnits":"&deg;C",'
                        .'"unitType":"Temperature"}',
                    "fluff" => 'nStuff',
                    'other' => 'things',
                    'name' => 'Name',
                    'value' => 12.0,
                ),
            ),
        );
    }
    /**
    * Tests the insert of a DeviceID
    *
    * @param mixed $data      The data to use
    * @param array $setParams The params to set in the class
    * @param array $expect    The expected return
    *
    * @dataProvider dataFromArray
    *
    * @return null
    */
    public function testFromArray($data, $setParams, $expect)
    {
        $this->o->clearData();
        $this->o->setParams = $setParams;
        $this->o->fromArray($data);
        $data = $this->readAttribute($this->o, "data");
        $this->assertEquals($expect, $data);
    }
    /**
    * Data provider for testFromArray
    *
    * @return array
    */
    public static function data2Array()
    {
        return array(
            array(
                array(
                    "id" => 1,
                    "params" => '{"storageUnits":"&deg;C","unitType":"Temperature"}',
                ),
                true,
                array(
                    "group" => 'default',
                    "id" => 1,
                    "storageUnits" => "&deg;C",
                    "unitType" => "Temperature",
                    "fluff" => 'nStuff',
                    'other' => 'things',
                    'name' => 'Name',
                    'value' => 12.0,
                ),
            ),
        );
    }
    /**
    * Tests the insert of a DeviceID
    *
    * @param mixed $data    The data to use
    * @param bool  $default Whether to return default items
    * @param array $expect  The expected return
    *
    * @dataProvider data2Array
    *
    * @return null
    */
    public function test2Array($data, $default, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($data);
        $this->assertEquals($expect, $this->o->toArray($default));
    }
}
namespace HUGnet\db\tables;
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class TableParamsTestStub extends \HUGnet\db\TableParams
    implements \HUGnet\interfaces\DBTable
{
    /** @var string This is the table we should use */
    public $sqlTable = "myTable";
    /** @var string This is the primary key of the table.  Leave blank if none  */
    public $sqlId = "id";
    /** @var string This is the date field of the table.  Leave blank if none  */
    public $dateField = "myOtherDate";
    /**
    * @var array This is the definition of the columns
    *
    * This should consist of the following structure:
    * array(
    *   "name" => array(
    *       "Name"          => string The name of the column
    *       "Type"          => string The type of the column
    *       "Default"       => mixed  The default value for the column
    *       "Null"          => bool   true if null is allowed, false otherwise
    *       "AutoIncrement" => bool   true if the column is auto_increment
    *       "CharSet"       => string the character set if the column is text or char
    *       "Collate"       => string colation if the table is text or char
    *       "Primary"       => bool   If we are a primary Key.
    *       "Unique"        => bool   If we are a unique column.
    *   ),
    *   "name2" => array(
    *   .
    *   .
    *   .
    * );
    *
    * Not all fields have to be filled in.  Name and Type are the only required
    * fields.  The index of the base array should be the same as the "Name" field.
    */
    public $sqlColumns = array(
        "id" => array(
            "Name" => "id",
            "Type" => "INTEGER",
            "Default" => 0,
            "AutoIncrement" => true,
        ),
        "name" => array("Name" => "name", "Type" => "varchar", "Default" => "Name"),
        "value" => array("Name" => "value", "Type" => "float", "Default" => 12.0),
        "params" => array(
            "Name" => "params",
            "Type" => "longtext",
            "Default" => "",
        ),
    );
    /**
    * @var array This is the definition of the indexes
    *
    *   array(
    *       "Name" => array (
    *           "Name"    => string The name of the index
    *           "Unique"  => bool   Create a Unique index
    *           "Columns" => array  Array of column names
    *       ),
    *       "name2" => array(
    *       .
    *       .
    *   ),
    */
    public $sqlIndexes = array(
        "stuff" => array(
            "Name" => "stuff",
            "Unique" => true,
            "Columns" => array("id", "value"),
        ),
    );

    /** @var array This is the default values for the data */
    protected $default = array(
        "group" => "default",
        "fluff" => "nStuff",
        "other" => "things",
        "id" => 5,
    );
    /** @var array These are the params that will be set */
    public $setParams = array(
        "min",
        "max",
        "extra",
    );
}
?>
