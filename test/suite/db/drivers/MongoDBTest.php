<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2013 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
namespace HUGnet\db\drivers;
/** This is a required class */
require_once CODE_BASE.'db/drivers/MongoDB.php';
/** This is a required class */
require_once CODE_BASE.'db/Table.php';
/** This is a required class */
require_once CODE_BASE.'db/Connection.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is a required class */
require_once 'PHPUnit/Extensions/Database/TestCase.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2013 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.10.2
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class MongoDBTest extends \PHPUnit_Framework_TestCase
{
    /** @var object This is our database object */
    protected $dbo;
    /** @var array Default config */
    protected $config;
    /** @var object System Class  */
    protected $system;
    /** @var object Table Class  */
    protected $table;
    /** @var object Object under test  */
    protected $o;
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        if (!class_exists("\MongoClient")) {
            $this->markTestSkipped("No MongoDB server available");
        }
        $this->config = array(
            "System" => array(
                "get" => array(
                    "servers" => array(
                        array(
                            "driver" => "mongodb",
                            "group" => "default",
                            "db" => "test",
                        ),
                    ),
                    "verbose" => 0,
                ),
            ),
            "Table" => array(
                "get" => array(
                    "group" => "default",
                ),
                "factory" => new \HUGnet\DummyTable("FactoryTable"),
            ),
        );
        $this->system = new \HUGnet\DummySystem("System");
        $this->system->resetMock($this->config);
        $this->connect = \HUGnet\db\Connection::factory($this->system);
        $this->dbo = $this->connect->getDBO("default");
        parent::setUp();
        $this->table = new \HUGnet\DummyTable();
        $this->table->sqlId = "id";
        $this->table->sqlColumns = array(
            "id" => array(
                "Name" => "id",
                "Type" => "INTEGER",
                "AutoIncrement" => true,
                "Primary" => true,
            ),
            "name" => array(
                "Name" => "name",
                "Type" => "varchar(128)",
                "Default" => '',
            ),
            "value" => array(
                "Name" => "value",
                "Type" => "varchar(128)",
                "Default" => '',
            )
            
        );
        $this->o = MongoDB::factory(
            $this->system, $this->table, $this->connect, "MongoDB"
        );
        $this->o->createTable();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        $this->dbo->myTable->drop();
        unset($this->o);
        unset($this->dbo);
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function getAllRows()
    {
        $stmt = $this->dbo->myTable->find();
        $rows = array();
        while ($stmt->hasNext()) {
            $row = $stmt->getNext();
            if ($row["_id"] != "id") {
                unset($row["_id"]);
                $rows[] = $row;
            }
        }
        return $rows;
    }
    
    
    /**
    * Tests for exceptions
    *
    * @expectedException InvalidArgumentException
    *
    * @return null
    */
    public function testConstructTableExec()
    {
        $obj = MongoDB::factory($empty, $this->table);
    }
    /**
    * Tests for exceptions
    *
    * @expectedException RuntimeException
    *
    * @return null
    */
    public function testConstructTableExec2()
    {
        $system = \HUGnet\System::factory();
        $obj = MongoDB::factory($system, $empty);
    }

    /**
    * Data provider for testFactory
    *
    * @return array
    */
    public static function dataFactory()
    {
        return array(
            array("mongodb", "HUGnet\\db\\drivers\\MongoDB"),
            array("VeryBadDriver", "HUGnet\\db\\drivers\\MongoDB"),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param int $driver The driver to use
    * @param int $expect The expected return
    *
    * @dataProvider dataFactory
    *
    * @return null
    */
    public function testFactory($driver, $expect)
    {
        $this->config["System"]["get"]["verbose"] = $verbose;
        $this->system->resetMock($this->config);
        $empty = null;
        $obj = MongoDB::factory(
            $this->system, $this->table, $empty, $driver
        );;
        $this->assertSame($expect, get_class($obj));
    }

    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataGetNextID()
    {
        return array(
            array(
                array(
                    array(
                        "id" => 532,
                        "name" => "",
                        "value" => 32,
                    ),
                ),
                null,
                533
            ),
            array(
                array(
                    array(
                        "id" => 532,
                        "name" => "",
                        "value" => 32,
                    ),
                    array(
                        "id" => 832,
                        "name" => "",
                        "value" => 32,
                    ),
                ),
                array("id" => array('$lt' => 800)),
                533
            ),
        );
    }
    /**
    * test
    *
    * @param string $preload SQL query preload
    * @param string $where   The where data to use
    * @param string $expect  The query created
    *
    * @return null
    *
    * @dataProvider dataGetNextID
    */
    public function testGetNextID($preload, $where, $expect)
    {
        $this->dbo->myTable->batchinsert($preload);
        $ret = $this->o->getNextID($where);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataGetPrevID()
    {
        return array(
            array(
                array(
                    array(
                        "id" => -10,
                        "name" => "",
                        "value" => 32,
                    ),
                ),
                null,
                -11
            ),
            array(
                array(
                    array(
                        "id" => -10,
                        "name" => "",
                        "value" => 32,
                    ),
                    array(
                        "id" => -20,
                        "name" => "",
                        "value" => 32,
                    ),
                ),
                array("id" => array('$gt' => -19)),
                -11
            ),
        );
    }
    /**
    * test
    *
    * @param string $preload SQL query preload
    * @param string $where   The where data to use
    * @param string $expect  The query created
    *
    * @return null
    *
    * @dataProvider dataGetPrevID
    */
    public function testGetPrevID($preload, $where, $expect)
    {
        $this->dbo->myTable->batchinsert($preload);
        $ret = $this->o->getPrevID($where);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataDeleteWhere()
    {
        return array(
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array(),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                false,
            ),
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                "1",
                array(),
                true,
            ),
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 2),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => array('$gt' => 0)),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ),
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload The data to load into the database
    * @param string $where   The where clause
    * @param string $expect  The query created
    * @param bool   $ret     The expected return value
    *
    * @return null
    *
    * @dataProvider dataDeleteWhere
    */
    public function testDeleteWhere($preload, $where, $expect, $ret)
    {
        $this->dbo->myTable->batchinsert($preload);
        $res = $this->o->deleteWhere($where);
        $this->assertSame($ret, $res);
        $this->assertEquals($expect, $this->getAllRows());
    }
    /**
    * Data provider for testInsert
    *
    * @return array
    */
    public static function dataInsert()
    {
        return array(
            array(  // #0
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array(),
                array(),
                true,
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            array(  // #1
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array(
                    "name" => "hello",
                    "value" => 2.3,
                ),
                null,
                false,
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 33,
                        "name" => "hello",
                        "value" => 2.3,
                    ),
                ),
                true,
                true,
            ),
            array(  // #2
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 3, "name" => "a name", "value" => 10),
                array(),
                true,
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 3,
                        "name" => "a name",
                        "value" => 10,
                    ),
                ),
                true,
                true,
            ),
            array(  // #3
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 3, "name" => "a name", "value" => 10),
                array("id", "name"),
                false,
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 3,
                        "name" => "a name",
                    ),
                ),
                true,
                true,
            ),
            array(  // #4
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 2, "name" => "a name", "value" => 10),
                array("id", "name"),
                false,
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                false,
                true,
            ),
            array(  // #5
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 2, "name" => "a name", "value" => 10),
                array("ex", "not a column"),
                true,
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload The data to preload into the database
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret     The expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testInsertOnce($preload, $data, $keys, $replace, $expect, $ret)
    {
        $this->dbo->myTable->batchinsert($preload);
        if (is_null($keys)) {
            $keys = $this->o->autoIncrement();
        }
        $res = $this->o->insertOnce($data, $keys, $replace);
        $this->assertSame($ret, $res);
        $this->assertEquals($expect, $this->getAllRows());
    }
    /**
    * test
    *
    * @param array  $preload The data to preload into the database
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret2    The expected return value
    * @param bool   $ret     The second expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testInsert($preload, $data, $keys, $replace, $expect, $ret2, $ret)
    {
        $this->dbo->myTable->batchinsert($preload);
        if (is_null($keys)) {
            $keys = $this->o->autoIncrement();
        }
        $res = $this->o->insert(array(), $keys, $replace);
        $this->assertSame($ret, $res);
        $res = $this->o->insert($data, $keys, $replace);
        $this->assertSame($ret2, $res);
        $this->assertEquals($expect, $this->getAllRows());
    }

    /**
    * test
    *
    * @param array  $preload The data to preload into the database
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret2    The expected return value
    * @param bool   $ret     The second expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testReplace($preload, $data, $keys, $replace, $expect, $ret2, $ret)
    {
        if ($replace) {
            $this->dbo->myTable->batchinsert($preload);
            $res = $this->o->replace(array(), $keys);
            $this->assertSame($ret, $res);
            $res = $this->o->replace($data, $keys);
            $this->assertSame($ret, $res);
            $this->assertEquals($expect, $this->getAllRows());
        } else {
            $this->assertFalse($replace);
        }
    }
    /**
    * test
    *
    * @param array  $preload The data to preload into the database
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret     The expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testReplaceOnce($preload, $data, $keys, $replace, $expect, $ret)
    {
        if ($replace) {
            $this->dbo->myTable->batchinsert($preload);
            $res = $this->o->replaceOnce($data, $keys);
            $this->assertSame($ret, $res);
            $this->assertEquals($expect, $this->getAllRows());
        } else {
            $this->assertFalse($replace);
        }
    }
    /**
    * Data provider for testUpdate
    *
    * @return array
    */
    public static function dataUpdate()
    {
        return array(
            // This one would just set the query up
            array( // #0
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array(),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Normal update
            array( // #1
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 2, "name" => "a name", "value" => 10),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "a name",
                        "value" => 10,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Normal update
            array( // #2
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 2, "name" => "a name", "value" => 10),
                "id = ?",
                array(2),
                array(),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "a name",
                        "value" => 10,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Update on a nonexistant record
            array( // #3
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 3, "name" => "a name", "value" => 10),
                "",
                array(),
                array("id", "name"),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            // Update using the index columns instead of the id
            array( // #4
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                array("id" => 2, "name" => "a name", "value" => 22.0),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "a name",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
                "",
                array(
                    "things" => array(
                        "Name" => "things",
                        "Columns" => array("name", "value"),
                    ),
                    "stuff" => array(
                        "Name" => "stuff",
                        "Unique" => true,
                        "Columns" => array("id", "value"),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload   The data to preload into the database
    * @param array  $data      The data to use.  It just sets up the query if this is
    *                          empty.
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param bool   $ret       The expected return value
    * @param bool   $ret2      The expected return value of the second call
    * @param string $sqlId     The id column to use
    * @param array  $indexes   The indexes array to use
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    public function testUpdateOnce(
        $preload,
        $data,
        $where,
        $whereData,
        $keys,
        $expect,
        $ret,
        $ret2 = true,
        $sqlId = "id",
        $indexes = array()
    ) {
        $this->dbo->myTable->batchinsert($preload);
        $this->table->sqlId = $sqlId;
        $this->table->sqlIndexes = $indexes;
        $res = $this->o->updateOnce($data, $where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $this->assertSame($expect, $this->getAllRows());
    }
    /**
    * test
    *
    * @param array  $preload   The data to preload into the database
    * @param array  $data      The data to use.  It just sets up the query if this is
    *                          empty.
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param bool   $ret       The expected return value
    * @param bool   $ret2      The expected return value of the second call
    * @param string $sqlId     The id column to use
    * @param array  $indexes   The indexes array to use
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    public function testUpdate(
        $preload,
        $data,
        $where,
        $whereData,
        $keys,
        $expect,
        $ret,
        $ret2 = true,
        $sqlId = "id",
        $indexes = array()
    ) {
        $this->dbo->myTable->batchinsert($preload);
        $this->table->sqlId = $sqlId;
        $this->table->sqlIndexes = $indexes;
        $res = $this->o->update(array(), $where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $res = $this->o->update($data);
        $this->assertSame($ret2, $res);
        $this->assertSame($expect, $this->getAllRows());
    }
    /**
    * Data provider for testSelectWhere
    *
    * @return array
    */
    public static function dataSelectWhere()
    {
        return array(
            // #0  Selects everything
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                "",  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value ASC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #1 Selects everything, returns 1 value
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                "",  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "", // Orderby
                    "sqlLimit" => 1, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #2 Selects only one
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                array("id" => 32),  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #3 Selects only one that is not there
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                array("idasd" => 6472),  // where
                array(), // data
                array("id", "value"), // keys
                null, // expect
                array(
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                false,
            ),
            // #4 Selects only one using the 'idwhere'
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                array("id" => 32),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #5 Selects only one using the 'idwhere'
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                array("id" => 32, "value" => 23.0),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #6 Selects two using the 'idwhere'
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                array("id" => 32, "value" => 23.0),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                        "stuff" => array(
                            "Name" => "stuff",
                            "Unique" => true,
                            "Columns" => array("id", "value"),
                        ),
                        "stuff2" => array(
                            "Name" => "stuff2",
                            "Unique" => true,
                            "Columns" => array("value"),
                        ),
                    ),
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #7 Sort Order asc
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 21.0,
                    ),
                ), // preload
                array(),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 21.0,
                    ),
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value ASC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #8 Sort Order desc
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 21.0,
                    ),
                ), // preload
                array(),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 21.0,
                    ),
                    
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #9 Sort Order two columns
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 25.0,
                    ),
                ), // preload
                array(),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 22.0,
                    ),
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value DESC, id ASC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #10 bad order
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 21.0,
                    ),
                ), // preload
                array(),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 23.0,
                    ),
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 21.0,
                    ),
                    
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value DESC, ", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #11  Selects everything, starts at record 2
            array(
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // preload
                "",  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value ASC", // Orderby
                    "sqlLimit" => 1, // limit
                    "sqlStart" => 2, // start
                ),
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload   The data to preload into the database
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param array  $setup     Setup information for the dummy class
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhere(
        $preload,
        $where,
        $whereData,
        $keys,
        $expect,
        $setup,
        $ret
    ) {
        $this->dbo->myTable->batchinsert($preload);
        foreach ((array)$setup as $key => $value) {
            $this->table->$key = $value;
        }
        $res = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $res);
        // This is necessary because the other methods return null, while FETCH_ASSOC
        // returns an array
        if (is_null($expect)) {
            $expect = array();
        }
        $rows = $this->o->fetchAll(\PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param array  $preload   The data to preload into the database
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param array  $setup     Setup information for the dummy class
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhereObj(
        $preload,
        $where,
        $whereData,
        $keys,
        $expect,
        $setup,
        $ret
    ) {
        $this->dbo->myTable->batchinsert($preload);
        foreach ((array)$setup as $key => $value) {
            $this->table->$key = $value;
        }
        $res = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $ret = array();
        $res = $this->o->fetchAll();
        $table = $this->table->retrieve();
        foreach ((array)$expect as $key => $e) {
            $table = $this->table->retrieve();
            $this->assertSame($e, $table["Table"]["duplicate"][$key][0]);
        }
        //$this->assertSame($expect, $table["Table"]["factory"][0]);
    }
    /**
    * test
    *
    * @param array  $preload   The data to preload into the database
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param array  $setup     Setup information for the dummy class
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhereInto(
        $preload,
        $where,
        $whereData,
        $keys,
        $expect,
        $setup,
        $ret
    ) {
        $this->dbo->myTable->batchinsert($preload);
        foreach ((array)$setup as $key => $value) {
            $this->table->$key = $value;
        }
        $res = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $rows = array();
        $index = 0;
        foreach ((array)$expect as $e) {
            $ret = $this->o->fetchInto();
            $this->assertTrue($ret);
            $table = $this->table->retrieve();
            $this->assertSame($e, $table["Table"]["fromArray"][$index++][0]);
        }
        $this->assertFalse($this->o->fetchInto());
    }
    /**
    * Data provider for testCountWhere
    *
    * @return array
    */
    public static function dataCountWhere()
    {
        return array(
            // Selects everything
            array(  // #0
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 25.0,
                    ),
                ), // preload
                "",  // where
                array(), // data
                "", // keys
                4, // expect
            ),
            // Selects everything, key specified
            array(  // #1
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 25.0,
                    ),
                ), // preload
                "",  // where
                array(), // data
                "id", // keys
                4, // expect
            ),
            // Selects only one that is not there
            array(  // #2
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 25.0,
                    ),
                ), // preload
                array("idasd" => 6472),  // where
                array(), // data
                "id", // keys
                false, // expect
            ),
            // Selects only one using the 'idwhere'
            array(  // #3
                array(
                    array(
                        "id" => -5,
                        "name" => "Something Negative",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 2,
                        "name" => "Another THing",
                        "value" => 25.0,
                    ),
                    array(
                        "id" => 32,
                        "name" => "A way up here thing",
                        "value" => 22.0,
                    ),
                    array(
                        "id" => 1,
                        "name" => "Something Here",
                        "value" => 25.0,
                    ),
                ), // preload
                array("id" => 32),  // where
                array(), // data
                "", // keys
                1, // expect
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload   The data to preload into the database
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $column    The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    *
    * @return null
    *
    * @dataProvider dataCountWhere
    */
    public function testCountWhere(
        $preload,
        $where,
        $whereData,
        $column,
        $expect
    ) {
        $this->dbo->myTable->batchinsert($preload);
        $res = $this->o->countWhere($where, $whereData, $column);
        $this->assertSame($expect, $res);
    }
    /**
    * Data provider for testFindUnit
    *
    * @return array
    */
    public static function dataColumns()
    {
        return array(
            array(
                array(),
                array(
                ),
            ),
        );
    }
    /**
     * Tests galtol
     *
     * @param string $preload The query to preload the database with
     * @param array  $expect  The expeced return array
     *
     * @return null
     *
     * @dataProvider dataColumns
     */
    public function testColumns($preload, $expect)
    {
        if (!empty($preload)) {
            $this->dbo->myTable->batchinsert($preload);
        }
        $cols = $this->o->columns();
        $this->assertSame($expect, $cols);
    }
    /**
    * test the lock routine.
    *
    * @return null
    */
    public function testLock()
    {
        $this->assertTrue($this->o->lock());
        $this->o->unlock;
    }
    /**
    * test the unlock routine.
    *
    * @return null
    */
    public function testUnlock()
    {
        $this->assertTrue($this->o->unlock());
    }
    /**
    * test the check routine.
    *
    * @return null
    */
    public function testCheck()
    {
        $this->assertTrue($this->o->check());
    }
    /**
    * test the check routine.
    *
    * @return null
    */
    public function testAddColumn()
    {
        $this->assertNull($this->o->addColumn(array()));
    }
    /**
    * test the check routine.
    *
    * @return null
    */
    public function testTables()
    {
        $this->assertSame(array("myTable" => "myTable"), $this->o->tables());
    }
    /**
    * Data provider for testTableExists
    *
    * @return array
    */
    public static function dataTableExists()
    {
        return array(
            array(
                array(),
                true,
            ),
        );
    }
    /**
     * Tests galtol
     *
     * @param array  $preload The query to preload the database with
     * @param array  $expect  The expeced return array
     *
     * @return null
     *
     * @dataProvider dataTableExists
     */
    public function testTableExists($preload, $expect)
    {
        if (!empty($preload)) {
            $this->dbo->myTable->batchinsert($preload);
        }
        $cols = $this->o->tableExists();
        $this->assertSame($expect, $cols);
    }

}
?>
