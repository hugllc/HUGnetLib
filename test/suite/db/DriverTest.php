<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2014 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
namespace HUGnet\db;
/** This is a required class */
require_once CODE_BASE.'db/Driver.php';
/** This is a required class */
require_once CODE_BASE.'db/Table.php';
/** This is a required class */
require_once CODE_BASE.'system/System.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummyTable.php';
/** This is a required class */
require_once TEST_CONFIG_BASE.'stubs/DummySystem.php';
/** This is a required class */
require_once 'PHPUnit/Extensions/Database/TestCase.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    Release: 0.14.3
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DriverTest extends \PHPUnit_Extensions_Database_TestCase
{
    /** @var object This is our database object */
    protected $pdo;
    /** @var array Default config */
    protected $config;
    /** @var object System Class  */
    protected $system;
    /** @var object Table Class  */
    protected $table;
    /** @var object Object under test  */
    protected $o;
    /** @var boolean This will cause some tests to be skipped  */
    protected $skipPDOTests = true;
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->skipPDOTests = true;
        $this->config = array(
            "System" => array(
                "get" => array(
                    "servers" => array(
                        array(
                            "driver" => "sqlite",
                            "file" => ":memory:",
                            "group" => "default",
                        ),
                    ),
                    "verbose" => 0,
                ),
            ),
            "Table" => array(
                "get" => array(
                    "group" => "default",
                ),
                "factory" => new \HUGnet\DummyTable("FactoryTable"),
            ),
        );
        $this->system = new \HUGnet\DummySystem("System");
        $this->system->resetMock($this->config);
        $this->connect = Connection::factory($this->system);
        $this->pdo = &$this->connect->getDBO("default");
        $this->pdo->query("DROP TABLE IF EXISTS `myTable`");
        $this->pdo->query(
            "CREATE TABLE `myTable` ("
            ." `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,"
            ." `name` varchar(32) NOT NULL,"
            ." `value` float NULL"
            ." )"
        );
        parent::setUp();
        $this->table = new \HUGnet\DummyTable("Table");
        $this->o = Driver::factory(
            $this->system, $this->table, $this->connect, "HUGnetDBDriverTestStub"
        );
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        if (is_a($this->pdo, "PDO")) {
            $this->pdo->query("DROP TABLE IF EXISTS `myTable`");
        }
        unset($this->o);
        unset($this->pdo);
    }

    /**
    * This sets up our database connection
    *
    * @return null
    */
    protected function getConnection()
    {
        return $this->createDefaultDBConnection($this->pdo, "sqlite");
    }

    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            TEST_CONFIG_BASE.'files/HUGnetDBDriverTest.xml'
        );
    }

    /**
    * Tests for exceptions
    *
    * @expectedException InvalidArgumentException
    *
    * @return null
    */
    public function testConstructTableExec()
    {
        $obj = Driver::factory($empty, $this->table);
    }
    /**
    * Tests for exceptions
    *
    * @expectedException RuntimeException
    *
    * @return null
    */
    public function testConstructTableExec2()
    {
        $system = \HUGnet\System::factory();
        $obj = Driver::factory($system, $empty);
    }
    /**
    * Tests for exceptions
    *
    * @expectedException RuntimeException
    *
    * @return null
    */
    public function testConnectPDOExec()
    {
        $this->config["Table"]["get"]["group"] = "BogusGroup";
        $this->system->resetMock($this->config);
        $this->o->Connect();
    }

    /**
    * Data provider for testAddColumnQuery
    *
    * @return array
    */
    public static function dataConstructVerbose()
    {
        return array(
            array(6, \PDO::ERRMODE_EXCEPTION),
            array(2, \PDO::ERRMODE_WARNING),
            array(0, \PDO::ERRMODE_SILENT),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param int $verbose the verbosity level to use
    * @param int $expect  The expected return
    *
    * @dataProvider dataConstructVerbose
    *
    * @return null
    */
    public function testConstructVerbose($verbose, $expect)
    {
        $this->config["System"]["get"]["verbose"] = $verbose;
        $this->system->resetMock($this->config);
        $obj = drivers\HUGnetDBDriverTestStub::factory(
            $this->system, $this->table
        );;
        $ret = $obj->qpdo->getAttribute(\PDO::ATTR_ERRMODE);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testFactory
    *
    * @return array
    */
    public static function dataFactory()
    {
        return array(
            array("mysql", "HUGnet\\db\\drivers\\Mysql"),
            array("Sqlite", "HUGnet\\db\\drivers\\Sqlite"),
            array("VeryBadDriver", "HUGnet\\db\\drivers\\Sqlite"),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param int $driver The driver to use
    * @param int $expect The expected return
    *
    * @dataProvider dataFactory
    *
    * @return null
    */
    public function testFactory($driver, $expect)
    {
        $this->config["System"]["get"]["verbose"] = $verbose;
        $this->system->resetMock($this->config);
        $empty = null;
        $obj = Driver::factory(
            $this->system, $this->table, $empty, $driver
        );;
        $this->assertSame($expect, get_class($obj));
    }

    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataGetNextID()
    {
        return array(
            array(
                'INSERT into `myTable` (`id`, `name`, `value`) VALUES (532, "", 32)',
                null,
                533
            ),
            array(
                'INSERT into `myTable` (`id`, `name`, `value`) VALUES (532, "", 32);'
                .'INSERT into `myTable` (`id`, `name`,`value`) VALUES (832, "", 32)',
                "`id` < 800",
                533
            ),
        );
    }
    /**
    * test
    *
    * @param string $preload SQL query preload
    * @param string $where   The where data to use
    * @param string $expect  The query created
    *
    * @return null
    *
    * @dataProvider dataGetNextID
    */
    public function testGetNextID($preload, $where, $expect)
    {
        foreach (explode(";", $preload) as $query) {
            $this->pdo->query($query);
        }
        $ret = $this->o->getNextID($where);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataGetPrevID()
    {
        return array(
            array(
                'INSERT into `myTable` (`id`, `name`, `value`) VALUES (-10, "", 32)',
                null,
                -11
            ),
            array(
                'INSERT into `myTable` (`id`, `name`, `value`) VALUES (-10, "", 32);'
                .'INSERT into `myTable` (`id`, `name`,`value`) VALUES (-20, "", 32)',
                "`id` > -19",
                -11
            ),
        );
    }
    /**
    * test
    *
    * @param string $preload SQL query preload
    * @param string $where   The where data to use
    * @param string $expect  The query created
    *
    * @return null
    *
    * @dataProvider dataGetPrevID
    */
    public function testGetPrevID($preload, $where, $expect)
    {
        foreach (explode(";", $preload) as $query) {
            $this->pdo->query($query);
        }
        $ret = $this->o->getPrevID($where);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataDeleteWhere()
    {
        return array(
            array(
                "",
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                false,
            ),
            array(
                "1",
                array(),
                array(),
                true,
            ),
            array(
                "id = ?",
                array(2),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            array(
                array("id" => 2),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            array(
                "id > 0",
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ),
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param string $where  The where clause
    * @param array  $data   The data to use.  It just sets up the query if this is
    *                       empty.
    * @param string $expect The query created
    * @param bool   $ret    The expected return value
    *
    * @return null
    *
    * @dataProvider dataDeleteWhere
    */
    public function testDeleteWhere($where, $data, $expect, $ret)
    {
        $res = $this->o->deleteWhere($where, $data);
        $this->assertSame($ret, $res);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * Data provider for testInsert
    *
    * @return array
    */
    public static function dataInsert()
    {
        return array(
            array(
                array(),
                array(),
                true,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            array(
                array(
                    "id" => 42,
                    "name" => "hello",
                    "value" => 2.3,
                ),
                null,
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => "33",
                        "name" => "hello",
                        "value" => "2.3",
                    ),
                ),
                true,
                true,
            ),
            array(
                array("id" => 3, "name" => "a name", "value" => 10),
                array(),
                true,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "3",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            array(
                array("id" => 3, "name" => "a name", "value" => 10),
                array("id", "name"),
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "3",
                        "name" => "a name",
                        "value" => null,
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                array("id", "name"),
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                false,
                true,
            ),
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                array("ex", "not a column"),
                true,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret     The expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testInsertOnce($data, $keys, $replace, $expect, $ret)
    {
        if (is_null($keys)) {
            $keys = $this->o->autoIncrement();
        }
        $res = $this->o->insertOnce($data, $keys, $replace);
        $this->assertSame($ret, $res);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret2    The expected return value
    * @param bool   $ret     The second expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testInsert($data, $keys, $replace, $expect, $ret2, $ret)
    {
        if (is_null($keys)) {
            $keys = $this->o->autoIncrement();
        }
        $res = $this->o->insert(array(), $keys, $replace);
        $this->assertSame($ret, $res);
        $res = $this->o->insert($data, $keys, $replace);
        $this->assertSame($ret2, $res);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }

    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret2    The expected return value
    * @param bool   $ret     The second expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testReplace($data, $keys, $replace, $expect, $ret2, $ret)
    {
        if ($replace) {
            $res = $this->o->replace(array(), $keys);
            $this->assertSame($ret, $res);
            $res = $this->o->replace($data, $keys);
            $this->assertSame($ret, $res);
            $stmt = $this->pdo->query("SELECT * FROM `myTable`");
            $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);
            $this->assertSame($expect, $rows);
        } else {
            $this->assertFalse($replace);
        }
    }
    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret     The expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testReplaceOnce($data, $keys, $replace, $expect, $ret)
    {
        if ($replace) {
            $res = $this->o->replaceOnce($data, $keys);
            $this->assertSame($ret, $res);
            $stmt = $this->pdo->query("SELECT * FROM `myTable`");
            $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);
            $this->assertSame($expect, $rows);
        } else {
            $this->assertFalse($replace);
        }
    }
    /**
    * Data provider for testUpdate
    *
    * @return array
    */
    public static function dataUpdate()
    {
        return array(
            // This one would just set the query up
            array(
                array(),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Normal update
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Normal update
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                "id = ?",
                array(2),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Update on a nonexistant record
            array(
                array("id" => 3, "name" => "a name", "value" => 10),
                "",
                array(),
                array("id", "name"),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            // Update using the index columns instead of the id
            array(
                array("id" => 2, "name" => "a name", "value" => 22.0),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
                "",
                array(
                    "things" => array(
                        "Name" => "things",
                        "Columns" => array("name", "value"),
                    ),
                    "stuff" => array(
                        "Name" => "stuff",
                        "Unique" => true,
                        "Columns" => array("id", "value"),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array  $data      The data to use.  It just sets up the query if this is
    *                          empty.
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param bool   $ret       The expected return value
    * @param bool   $ret2      The expected return value of the second call
    * @param string $sqlId     The id column to use
    * @param array  $indexes   The indexes array to use
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    public function testUpdateOnce(
        $data,
        $where,
        $whereData,
        $keys,
        $expect,
        $ret,
        $ret2 = true,
        $sqlId = "id",
        $indexes = array()
    ) {
        $this->table->sqlId = $sqlId;
        $this->table->sqlIndexes = $indexes;
        $res = $this->o->updateOnce($data, $where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param array  $data      The data to use.  It just sets up the query if this is
    *                          empty.
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param bool   $ret       The expected return value
    * @param bool   $ret2      The expected return value of the second call
    * @param string $sqlId     The id column to use
    * @param array  $indexes   The indexes array to use
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    public function testUpdate(
        $data,
        $where,
        $whereData,
        $keys,
        $expect,
        $ret,
        $ret2 = true,
        $sqlId = "id",
        $indexes = array()
    ) {
        $this->table->sqlId = $sqlId;
        $this->table->sqlIndexes = $indexes;
        $res = $this->o->update(array(), $where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $res = $this->o->update($data);
        $this->assertSame($ret2, $res);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * Data provider for testSelectWhere
    *
    * @return array
    */
    public static function dataSelectWhere()
    {
        return array(
            // #0  Selects everything
            array(
                "",  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value ASC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #1 Selects everything, returns 1 value
            array(
                "",  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "", // Orderby
                    "sqlLimit" => 1, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #2 Selects only one
            array(
                "id = ?",  // where
                array(32), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #3 Selects only one
            array(
                "id = 32",  // where
                array(), // data
                array("id", "value"), // keys
                array(
                    array(
                        "id" => "32",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #4 Selects only one that is not there
            array(
                "idasd = 6472",  // where
                array(), // data
                array("id", "value"), // keys
                null, // expect
                array(
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                false,
            ),
            // #5 Selects only one using the 'idwhere'
            array(
                array("id" => 32),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #6 Selects only one using the 'idwhere'
            array(
                array("id" => 32, "value" => 23.0),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #7 Selects two using the 'idwhere'
            array(
                array("id" => 32, "value" => 23.0),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                        "stuff" => array(
                            "Name" => "stuff",
                            "Unique" => true,
                            "Columns" => array("id", "value"),
                        ),
                        "stuff2" => array(
                            "Name" => "stuff2",
                            "Unique" => true,
                            "Columns" => array("value"),
                        ),
                    ),
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #8 Same as above, with different setup
            array(
                array("id" => 32, "value" => 23.0),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        'id' => '32',
                        'name' => 'A way up here thing',
                        'value' => '23.0'
                    ),
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #9 MongoDB Test
            array(
                array(
                    '$or' => array(
                        array("id" => 32), 
                        array("id" => 2)
                    )
                ),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        'id' => '32',
                        'name' => 'A way up here thing',
                        'value' => '23.0'
                    ),
                    array(
                        'id' => '2',
                        'name' => 'Another THing',
                        'value' => '22.0',
                    )
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #9 MongoDB Test #2
            array(
                array(
                    '$or' => array(
                        array("id" => 32), 
                        array("id" => 2),
                        array('$or' => array(array("id" => 1))),
                    )
                ),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        'id' => '1',
                        'name' => 'Something Here',
                        'value' => '25.0',
                    ),
                    array(
                        'id' => '32',
                        'name' => 'A way up here thing',
                        'value' => '23.0'
                    ),
                    array(
                        'id' => '2',
                        'name' => 'Another THing',
                        'value' => '22.0',
                    )
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
            // #9 MongoDB Test #3
            array(
                array(
                    '$or' => array(
                        array("id" => 32), 
                        array("id" => array('$lt' => 0, '$gt' => -100)),
                    )
                ),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        'id' => '32',
                        'name' => 'A way up here thing',
                        'value' => '23.0'
                    ),
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ), // expect
                array(
                    "sqlId" => null,
                    "sqlIndexes" => array(
                    ),
                    "sqlOrderBy" => "value DESC", // Orderby
                    "sqlLimit" => 0, // limit
                    "sqlStart" => 0, // start
                ),
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param array  $setup     Setup information for the dummy class
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhere(
        $where,
        $whereData,
        $keys,
        $expect,
        $setup,
        $ret
    ) {
        foreach ((array)$setup as $key => $value) {
            $this->table->$key = $value;
        }
        $res = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $res);
        // This is necessary because the other methods return null, while FETCH_ASSOC
        // returns an array
        if (is_null($expect)) {
            $expect = array();
        }
        $rows = $this->o->fetchAll(\PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param array  $setup     Setup information for the dummy class
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhereObj(
        $where,
        $whereData,
        $keys,
        $expect,
        $setup,
        $ret
    ) {
        foreach ((array)$setup as $key => $value) {
            $this->table->$key = $value;
        }
        $res = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $ret = array();
        $res = $this->o->fetchAll();
        $table = $this->table->retrieve();
        foreach ((array)$expect as $key => $e) {
            $table = $this->table->retrieve();
            $this->assertSame($e, $table["Table"]["duplicate"][$key][0]);
        }
        //$this->assertSame($expect, $table["Table"]["factory"][0]);
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param array  $setup     Setup information for the dummy class
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhereInto(
        $where,
        $whereData,
        $keys,
        $expect,
        $setup,
        $ret
    ) {
        foreach ((array)$setup as $key => $value) {
            $this->table->$key = $value;
        }
        $res = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $res);
        $rows = array();
        $index = 0;
        foreach ((array)$expect as $e) {
            $ret = $this->o->fetchInto();
            $this->assertTrue($ret);
            $table = $this->table->retrieve();
            $this->assertSame($e, $table["Table"]["fromArray"][$index++][0]);
        }
        $this->assertFalse($this->o->fetchInto());
    }
    /**
    * Data provider for testCountWhere
    *
    * @return array
    */
    public static function dataCountWhere()
    {
        return array(
            // Selects everything
            array( // #0
                "",  // where
                array(), // data
                "", // keys
                4, // expect
            ),
            // Selects everything, key specified
            array( // #1
                "",  // where
                array(), // data
                "id", // keys
                4, // expect
            ),
            // Selects only one
            array( // #2
                "id = ?",  // where
                array(32), // data
                "id", // keys
                1, // expect
            ),
            // Selects only one
            array( // #3
                "id = 32",  // where
                array(), // data
                "id", // keys
                1, // expect
            ),
            // Selects only one that is not there
            array( // #4
                "idasd = 6472",  // where
                array(), // data
                "id", // keys
                false, // expect
            ),
            // Selects only one using the 'idwhere'
            array( // #5
                array("id" => 32),  // where
                array(), // data
                "", // keys
                1, // expect
            ),
            // #6 MongoDB Test
            array(
                array(
                    '$or' => array(
                        array("id" => 32), 
                        array("id" => 2)
                    )
                ),  // where
                array(), // data
                "id", // keys
                2, // expect
            ),
            // #7 MongoDB Test #2
            array(
                array(
                    '$or' => array(
                        array("id" => 32), 
                        array("id" => 2),
                        array('$or' => array(array("id" => 1))),
                    )
                ),  // where
                array(), // data
                array(), // keys
                3, // expect
            ),
            // #8 MongoDB Test #3
            array(
                array(
                    '$or' => array(
                        array("id" => 32), 
                        array("id" => array('$lt' => 0, '$gt' => -100)),
                    )
                ),  // where
                array(), // data
                array(), // keys
                2, // expect
            ),
        );
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $column    The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    *
    * @return null
    *
    * @dataProvider dataCountWhere
    */
    public function testCountWhere(
        $where,
        $whereData,
        $column,
        $expect
    ) {
        $res = $this->o->countWhere($where, $whereData, $column);
        $this->assertSame($expect, $res);
    }
    /**
    * Data provider for testCountWhere
    *
    * @return array
    */
    public static function dataArrayWhere()
    {
        return array(
            array( // #0
                array(
                    "id" => 5,
                ),  // array
                " WHERE (`id` = ? )", // expect
                array(5), // data
            ),
            array( // #1 Got an array
                array(
                    "id" => 5,
                    "hello" => array(1,2,3,4),
                ),  // array
                " WHERE (`id` = ? )", // expect
                array(5), // data
            ),
            array( // #2 Complicated stuff
                array(
                    "id" => array(
                        '$gt' => 5,
                        '$lt' => 3,
                    ),
                ),  // array
                " WHERE ((`id` > ?  AND `id` < ? ))", // expect
                array(5, 3), // data
            ),
        );
    }
    /**
    * test
    *
    * @param array  $array  The array where clause
    * @param string $expect The where clause expected
    * @param array  $data   The data we expect
    *
    * @return null
    *
    * @dataProvider dataArrayWhere
    */
    public function testArrayWhere(
        $array,
        $expect,
        $data
    ) {
        $this->o->arrayWhere($array);
        $this->assertAttributeSame($expect, "query", $this->o);
        $this->assertAttributeSame($data, "whereData", $this->o);
    }

}

namespace HUGnet\db\drivers;
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Libraries
 * @package    HUGnetLibTest
 * @subpackage SuiteBase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2014 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBDriverTestStub extends \HUGnet\db\Driver
{
    public $defColumns = array();

    /**
    * Create the object
    *
    * @param object &$system  The system object
    * @param object &$table   The table object
    * @param object &$connect The connection manager
    * @param string $driver   The driver to use.  The right one is found if this
    *                         is left null.
    *
    * @return object The driver object
    */
    static public function &factory(
        &$system, &$table, &$connect = null, $driver=null
    ) {
        $obj = parent::factory($system, $table, $connect, $driver);
        $obj->qpdo =& $obj->pdo();
        return $obj;
    }
    /**
    * Gets columns from a SQLite server
    *
    * @return null
    */
    public function columns()
    {
        return $this->query("PRAGMA table_info(".$this->table().")");
    }
    /**
    * This gets a new PDO object
    *
    * @return null
    */
    public function connect()
    {
        return parent::connect();
    }
    /**
    * Checks the database table, repairs and optimizes it
    *
    * @param bool $force Force the repair
    *
    * @return mixed
    */
    public function check($force = false)
    {
        return true;
    }
    /**
    * Locks the table
    *
    * @return mixed
    */
    public function lock()
    {
        return true;
    }
    /**
    * Unlocks the table
    *
    * @return mixed
    */
    public function unlock()
    {
        return true;
    }
    /**
    * Get the names of all the tables in the current database
    *
    * @return array of table names
    */
    public function tables()
    {
        return array();
    }
    /**
    * This converts a Mongodb style array where into an SQL where statement
    * 
    * @param array $array The array to convert
    *
    * @return null
    */
    public function arrayWhere($array)
    {
        return parent::arrayWhere($array);
    }
}
?>
