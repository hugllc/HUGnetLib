<?php
/**
 * Tests the light sensor class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

require_once dirname(__FILE__).'/DataPointPluginTestBase.php';
require_once dirname(__FILE__)
    .'/../../../plugins/datapoints/TemperatureDataPoint.php';

/**
 * Test class for sensor.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:08:37.
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class TemperatureDataPointTest extends DataPointPluginTestBase
{

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
    }
    /**
    * Data provider for testRegisterPlugin
    *
    * @return array
    */
    public static function dataRegisterPlugin()
    {
        return array(
            array("TemperatureDataPoint"),
        );
    }

    /**
     * Data provider for testConvertTo
     *
     * @return array
     */
    public static function dataConverTo()
    {
        return array(
            array(
                array(
                    "value" => 100,
                    "units" => "&#176;C",
                    "type"  => DataPointBase::TYPE_RAW,
                ),
                "&#176;F",
                212,
                "&#176;F",
                true,
            ),
            array(
                array(
                    "value" => -40,
                    "units" => "&#176;F",
                    "type"  => DataPointBase::TYPE_RAW,
                ),
                "&#176;C",
                -40,
                "&#176;C",
                true,
            ),
            array(
                array(
                    "value" => 100,
                    "units" => "&#176;C",
                    "type"  => DataPointBase::TYPE_DIFF,
                ),
                "&#176;F",
                180,
                "&#176;F",
                true,
            ),
            array(
                array(
                    "value" => 18,
                    "units" => "&#176;F",
                    "type"  => DataPointBase::TYPE_DIFF,
                ),
                "&#176;C",
                10,
                "&#176;C",
                true,
            ),
            // Preferred units
            array(
                array(
                    "value" => 10,
                    "units" => "&#176;C",
                    "type"  => DataPointBase::TYPE_DIFF,
                ),
                "",
                18,
                "&#176;F",
                true,
            ),
            array(
                array(
                    "value" => 10,
                    "units" => "&#176;C",
                    "type"  => DataPointBase::TYPE_DIFF,
                ),
                "badUnit",
                10,
                "&#176;C",
                false,
            ),
        );
    }
    /**
    * test CtoF()
    *
    * @param array  $preload the stuff to preload into the datapoint
    * @param string $units   The units to convert to
    * @param mixed  $expect  The value to expect
    * @param string $eUnits  The units to expect
    * @param bool   $return  The expected return value
    *
    * @return null
    *
    * @dataProvider dataConverTo
    */
    public function testConvertTo($preload, $units, $expect, $eUnits, $return)
    {
        $this->o = new TemperatureDataPoint($preload);
        $ret = $this->o->convertTo($units);
        $this->assertAttributeEquals($expect, "value", $this->o, "Value Wrong");
        $this->assertAttributeEquals($eUnits, "units", $this->o, "Units Wrong");
        $this->assertSame($return, $ret, "Return Wrong");
    }


}

?>
