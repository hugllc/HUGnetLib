<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Default
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** Get our classes */
require_once dirname(__FILE__).'/../../../plugins/output/JPGraphDatLinOutput.php';
require_once dirname(__FILE__).'/../../files/mocks/JPGraph.php';
require_once dirname(__FILE__).'/OutputPluginTestBase.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Default
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class JPGraphDatLinOutputTest extends OutputPluginTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * Data provider for testRegisterPlugin
    *
    * @return array
    */
    public static function dataRegisterPlugin()
    {
        return array(
            array("JPGraphDatLinOutput"),
        );
    }
    /**
    * Data provider for testRow
    *
    * @return array
    */
    public static function dataRow()
    {
        return array(
            array(
                array(),
                array(),
                array(array()),
                array(),
                array(),
            ),
            array(
                array(
                    "fields" => array(
                        1 => array("a"),
                        2 => array("b"),
                    ),
                    "dateField" => "c"
                ),
                array("a" => 5, "b" => 6, "c" => 1),
                array(
                    array("a" => 1, "b" => 2, "c" => 3),
                    array("a" => 3, "b" => 4, "c" => 5),
                    array("a" => 5, "b" => null, "c" => 7),
                    array("b" => 6, "c" => 9),
                ),
                array(
                    1 => array(
                        "a" => array(1.0, 3.0, 5.0, null),
                    ),
                    2 => array(
                        "b" => array(2.0, 4.0, null, 6.0),
                    ),
                ),
                array(3, 5, 7, 9),
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array $params  The parameters to use
    * @param array $preload The array to preload into the class
    * @param mixed $row     The row to use
    * @param array $expect  The expected return
    * @param array $dates   The expected date array
    *
    * @dataProvider dataRow
    *
    * @return null
    */
    public function testRow($params, $preload, $row, $expect, $dates)
    {
        $o = new JPGraphDatLinOutput($params, $preload);
        foreach ($row as $r) {
            $o->row($r);
        }
        $this->assertAttributeSame($expect, "graphData", $o, "Data is wrong");
        $this->assertAttributeSame($dates, "graphDates", $o, "Date is wrong");
    }

    /**
    * Data provider for test2string
    *
    * @return array
    */
    public static function dataBody()
    {
        return array(
            array(
                array(),
                array(),
                array(),
                array(
                    "SetScale" => array(array("datlin")),
                    "legend" => array(
                        "SetLayout" => array(array("LEGEND_HOR")),
                        "Pos" => array(array(0.5, 0.99, "center", "bottom")),
                        "SetColumns" => array(array(3)),
                    ),
                    "title" => array(
                        "Set" => array(array("")),
                        "SetFont" => array(array("FF_FONT1", "FS_BOLD")),
                    ),
                    "img" => array(
                        "SetMargin" => array(array(70, 70, 20, 180)),
                    ),
                    "xgrid" => array(
                        "Show" => array(array(true)),
                    ),
                    "xaxis" => array(
                        "SetLabelAngle" => array(array(90)),
                        "SetPos" => array(array("min")),
                        "title" => array(
                            "SetFont" => array(array("FF_FONT1", "FS_BOLD")),
                        ),
                    ),
                    "yaxis" => array(
                        "title" => array(
                            "Set" => array(array(" ()")),
                            "SetFont" => array(array("FF_FONT1", "FS_BOLD")),
                        ),
                    ),
                    "y2axis" => array(
                        "title" => array(
                        ),
                    ),
                ),
                array(600, 500, "auto"),
            ),
            array(
                array(
                    "margin" => array(
                        "top"    => 20,
                        "bottom" => 180,
                        "left"   => 70,
                        "right"  => 70,
                    ),
                    "width" => 600,
                    "height" => 500,
                    "doLegend" => true,
                    "units" => array(1 => "C", 2 => "F"),
                    "unitTypes" => array(1 => "Temperature", 2 => "Temperature"),
                    "dateField" => "Date",
                    "fields" => array(
                        1 => array("Data0", "Data2"),
                        2 => array("Data1"),
                    ),
                    "title" => "Test Graph",
                ),
                array(
                    "Date" => "Date",
                    "Data0" => "First",
                    "Data1" => "Second",
                    "Data2" => "Third",
                ),
                array(
                    array("Date" => 1, "Data0" => 5, "Data1" => 6, "Data2" => 7),
                ),
                array(
                    "SetScale" => array(array("datlin")),
                    "Add" => array(
                        array(
                            "SetLegend" => array(array("First")),
                            "setColor" => array(array("aqua")),
                        ),
                        array(
                            "SetLegend" => array(array("Third")),
                            "setColor" => array(array("azure4")),
                        ),
                    ),
                    "AddY2" => array(
                        array(
                            "SetLegend" => array(array("Second")),
                            "setColor" => array(array("blue")),
                        ),
                    ),
                    "SetY2Scale" => array(array("lin")),
                    "legend" => array(
                        "SetLayout" => array(array("LEGEND_HOR")),
                        "Pos" => array(array(0.5, 0.99, "center", "bottom")),
                        "SetColumns" => array(array(3)),
                    ),
                    "title" => array(
                        "Set" => array(array("Test Graph")),
                        "SetFont" => array(array("FF_FONT1", "FS_BOLD")),
                    ),
                    "img" => array(
                        "SetMargin" => array(array(70, 70, 20, 180)),
                    ),
                    "xgrid" => array(
                        "Show" => array(array(true)),
                    ),
                    "xaxis" => array(
                        "SetLabelAngle" => array(array(90)),
                        "SetPos" => array(array("min")),
                        "title" => array(
                            "SetFont" => array(array("FF_FONT1", "FS_BOLD")),
                        ),
                    ),
                    "yaxis" => array(
                        "title" => array(
                            "Set" => array(array("Temperature (C)")),
                            "SetFont" => array(array("FF_FONT1", "FS_BOLD")),
                        ),
                    ),
                    "y2axis" => array(
                        "title" => array(
                            "Set" => array(array("Temperature (F)")),
                            "SetFont" => array(array("FF_FONT1", "FS_BOLD")),
                        ),
                    ),
                ),
                array(600, 500, "auto"),
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array $preload   The array to preload into the class
    * @param mixed $header    The header data
    * @param mixed $rows      The rows to add
    * @param array $expect    The expected return
    * @param array $construct The constructor arguments
    *
    * @dataProvider dataBody
    *
    * @return null
    */
    public function testBody($preload, $header, $rows, $expect, $construct)
    {
        $o = new JPGraphDatLinOutput($preload);
        $o->header($header);
        foreach ($rows as $r) {
            $o->row($r);
        }
        $o->body();
        $graph = $this->readAttribute($o, "graph");
        $this->assertSame($expect, $graph->calls);
        $this->assertSame($construct, $graph->construct);
    }

    /**
    * Data provider for testHeader
    *
    * @return array
    */
    public static function dataHeader()
    {
        return array(
            array(
                array(),
                array("a" => "First"),
                array("a" => "First"),
            ),
            array(
                array("a" => 1, "b" => 2),
                array(),
                array("a" => 1, "b" => 2),
            ),
            array(
                array("a" => 1, "b" => 2),
                array("a" => "q"),
                array("a" => 1, "b" => 2),
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array $preload The array to preload into the class
    * @param mixed $array   The array to feed the header
    * @param array $expect  The expected return
    *
    * @dataProvider dataHeader
    *
    * @return null
    */
    public function testHeader($preload, $array, $expect)
    {
        $o = new JPGraphDatLinOutput(null, $preload);
        $o->header($array);
        $this->assertAttributeSame($expect, "header", $o);
    }

    /**
    * Data provider for testPre
    *
    * @return array
    */
    public static function dataPre()
    {
        return array(
            array(
                array(),
                "",
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array $preload The array to preload into the class
    * @param array $expect  The expected return
    *
    * @dataProvider dataPre
    *
    * @return null
    */
    public function testPre($preload, $expect)
    {
        $o = new JPGraphDatLinOutput($preload);
        $this->assertSame($expect, $o->pre());
    }

    /**
    * Data provider for testPost
    *
    * @return array
    */
    public static function dataPost()
    {
        return array(
            array(
                array(),
                "",
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array $preload The array to preload into the class
    * @param array $expect  The expected return
    *
    * @dataProvider dataPost
    *
    * @return null
    */
    public function testPost($preload, $expect)
    {
        $o = new JPGraphDatLinOutput($preload);
        $this->assertSame($expect, $o->post());
    }

}

?>
