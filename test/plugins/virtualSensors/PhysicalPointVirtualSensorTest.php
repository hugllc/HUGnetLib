<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Default
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** Get our classes */
require_once dirname(__FILE__)
    .'/../../../plugins/virtualSensors/PhysicalPointVirtualSensor.php';
require_once dirname(__FILE__).'/../../stubs/DummyDeviceContainer.php';
require_once dirname(__FILE__).'/VirtualSensorPluginTestBase.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Default
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class PhysicalPointVirtualSensorTest extends VirtualSensorPluginTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->socket = &$this->config->sockets->getSocket("default");
        $this->d = new DeviceContainer();
        $this->o = new PhysicalPointVirtualSensor(
            array(
            ),
            $this->d
        );
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * Data provider for testRegisterPlugin
    *
    * @return array
    */
    public static function dataRegisterPlugin()
    {
        return array(
            array("PhysicalPointVirtualSensor"),
        );
    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("location", "raw", "raw"),
        );
    }
    /**
    * Data provider for testConstructor
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                    "DeviceID" => "0000E1",
                    "sensors" => array(
                        "Sensors" => 4,
                        "forceSensors" => true,
                        "PhysicalSensors" => 3,
                        "VirtualSensors" => 1,
                        0 => array(),
                        1 => array(),
                        2 => array(
                            "id" => 0x02,
                            "location" => "Hello",
                            "dataType" => UnitsBase::TYPE_DIFF,
                        ),
                    ),
                ),
                array(
                    'extra' => array(
                        "0000E1", 3
                    )
                ),
                array(
                    "id" => 0xFE,
                    "type" => "physicalpoint",
                    "location" => "Hello",
                    "dataType" => UnitsBase::TYPE_DIFF,
                    'extra' => array(
                        "0000E1", 3
                    ),
                    "units" => '&#176;F',
                    "bound" => false,
                    "rawCalibration" => "",
                    "decimals" => 2,
                ),
                array(
                    'longName' => 'PhysicalPoint Virtual Sensor',
                    'unitType' => 'Temperature',
                    'extraValues' => array (
                        0 => 8,
                        1 => 4,
                    ),
                    'extraText' => array (
                        0 => 'Device ID',
                        1 => 'Sensor',
                    ),
                    'extraDefault' => array (
                        0 => '',
                        1 => 1,
                    ),
                    'storageType' => UnitsBase::TYPE_RAW,
                    'storageUnit' => '&#176;C',
                    'maxDecimals' => 2,
                ),
                array(
                    'id' => 254,
                    'type' => 'physicalpoint',
                    'location' => 'Hello',
                    'dataType' => UnitsBase::TYPE_DIFF,
                    'extra' => array (
                    ),
                    'units' => '&#176;F',
                    'bound' => false,
                    'rawCalibration' => '',
                    'decimals' => 2,
               ),
            ),
        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @param array $device  The device to load
    * @param array $preload The data to preload into the class
    * @param mixed $expect  The return data to expect
    * @param mixed $fixed   The fixed data to expect
    * @param mixed $default The default data to expect
    *
    * @return null
    *
    * @dataProvider dataConstructor()
    */
    public function testConstructor($device, $preload, $expect, $fixed, $default)
    {
        $dev = new DeviceContainer();
        $dev->fromAny($device);
        $dev->insertRow(true);
        $o = new PhysicalPointVirtualSensor($preload, $this->d);
        $this->assertSame($expect, $o->toArray(true), "Array output wrong");
        $this->assertAttributeSame(
            $fixed, "fixed", $o, "Fixed is wrong"
        );
        $this->assertAttributeSame(
            $default, "default", $o, "Default is wrong"
        );
    }
    /**
    * Data provider for testGetReading
    *
    * @return array
    */
    public static function dataGetVirtualReading()
    {
        return array(
            array( // #0
                array(
                    "extra" => array(
                        "0000E1",
                        2,
                    ),
                ),
                array(
                ),
                null
            ),
        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @param array $preload The data to preload into the class
    * @param mixed $data    The data for the sensor to work with 
    * @param mixed $expect  The return data to expect
    *
    * @return null
    *
    * @dataProvider dataGetVirtualReading()
    */
    public function testGetVirtualReading($preload, $data, $expect)
    {

        $o = new PhysicalPointVirtualSensor($preload, $this->d);
        $ret = $o->getVirtualReading($data);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testGet15MINAverage
    *
    * @return array
    */
    public static function dataGet15MINAverage()
    {
        return array(
            array(
                array(
                    "DeviceID" => "0000E1",
                    "sensors" => array(
                        "Sensors" => 4,
                        "forceSensors" => true,
                        "PhysicalSensors" => 3,
                        "VirtualSensors" => 1,
                        0 => array(),
                        1 => array(),
                        2 => array(
                            "id" => 0x02,
                            "location" => "Hello",
                            "dataType" => UnitsBase::TYPE_DIFF,
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => hexdec("0000E1"),
                        "Type" => "15MIN",
                        "Date" => 123456789,
                        "Data0" => 0,
                        "Data1" => 2,
                        "Data2" => 3,
                        "Data3" => 5,
                    ),
                ),
                array(
                    'extra' => array(
                        "0000E1", 3
                    )
                ),
                123456789,
                array(
                ),
                array(
                    "value" => "3.0",
                    "units" => "&#176;C",
                    "unitType" => "Temperature",
                    "dataType" => UnitsBase::TYPE_RAW,
                ),
            ),
        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @param array $device   The device to load
    * @param array $averages The averages to have saved
    * @param array $preload  The data to preload into the class
    * @param int   $date     The date of the record
    * @param array $data     The data to send
    * @param mixed $expect   The return data to expect
    *
    * @return null
    *
    * @dataProvider dataGet15MINAverage()
    */
    public function testGet15MINAverage(
        $device, $averages, $preload, $date, $data, $expect
    ) {
        $dev = new DeviceContainer();
        $dev->fromAny($device);
        $dev->insertRow(true);
        $avg = &$dev->historyFactory(array(), false);
        foreach ((array)$averages as $a) {
            $avg->clearData();
            $avg->fromAny($a);
            $avg->insertRow(true);
        }
        $o = new PhysicalPointVirtualSensor($preload, $this->d);
        $this->assertSame($expect, $o->get15MINAverage($date, $data));
    }
    /**
    * Data provider for testGet15MINAverage
    *
    * @return array
    */
    public static function dataGetFirstAverage15Min()
    {
        return array(
            array(
                array(
                    "DeviceID" => "0000E1",
                    "sensors" => array(
                        "Sensors" => 4,
                        "forceSensors" => true,
                        "PhysicalSensors" => 3,
                        "VirtualSensors" => 1,
                        0 => array(),
                        1 => array(),
                        2 => array(
                            "id" => 0x02,
                            "location" => "Hello",
                            "dataType" => UnitsBase::TYPE_DIFF,
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => hexdec("0000E1"),
                        "Type" => "15MIN",
                        "Date" => 123456789,
                        "Data0" => 0,
                        "Data1" => 2,
                        "Data2" => 3,
                        "Data3" => 5,
                    ),
                ),
                array(
                    'extra' => array(
                        "0000E1", 3
                    )
                ),
                123456789,
            ),
        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @param array $device   The device to load
    * @param array $averages The averages to have saved
    * @param array $preload  The data to preload into the class
    * @param mixed $expect   The return data to expect
    *
    * @return null
    *
    * @dataProvider dataGetFirstAverage15Min()
    */
    public function testGetFirstAverage15Min(
        $device, $averages, $preload, $expect
    ) {
        $dev = new DeviceContainer();
        $dev->fromAny($device);
        $dev->insertRow(true);
        $avg = &$dev->historyFactory(array(), false);
        foreach ((array)$averages as $a) {
            $avg->clearData();
            $avg->fromAny($a);
            $avg->insertRow(true);
        }
        $o = new PhysicalPointVirtualSensor($preload, $this->d);
        $this->assertSame($expect, $o->getFirstAverage15Min());
    }
    /**
    * Data provider for testGet15MINAverage
    *
    * @return array
    */
    public static function dataGetLastAverage15Min()
    {
        return array(
            array(
                array(
                    "DeviceID" => "0000E2",
                    "sensors" => array(
                        "Sensors" => 4,
                        "forceSensors" => true,
                        "PhysicalSensors" => 3,
                        "VirtualSensors" => 1,
                        0 => array(),
                        1 => array(),
                        2 => array(
                            "id" => 0x02,
                            "location" => "Hello",
                            "dataType" => UnitsBase::TYPE_DIFF,
                        ),
                    ),
                    "params" => array(
                        "DriverInfo" => array(
                            "Test" => 2,
                            "LastAverage15MIN" => 123456789,
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => 0xE2,
                        "Type" => "15MIN",
                        "Date" => 12345789,
                        "Data0" => 0,
                        "Data1" => 2,
                        "Data2" => 3,
                        "Data3" => 5,
                    ),
                ),
                array(
                    'extra' => array(
                        "0000E2", 3
                    )
                ),
                123456789,
            ),
            array(
                array(
                    "DeviceID" => "0000E2",
                    "sensors" => array(
                        "Sensors" => 4,
                        "forceSensors" => true,
                        "PhysicalSensors" => 3,
                        "VirtualSensors" => 1,
                        0 => array(),
                        1 => array(),
                        2 => array(
                            "id" => 0x02,
                            "location" => "Hello",
                            "dataType" => UnitsBase::TYPE_DIFF,
                        ),
                    ),
                    "params" => array(
                        "DriverInfo" => array(
                            "Test" => 2,
                            "LastAverage15MIN" => 123456789,
                        ),
                    ),
                ),
                array(
                    array(
                        "id" => 0xE2,
                        "Type" => "15MIN",
                        "Date" => 12345789,
                        "Data0" => 0,
                        "Data1" => 2,
                        "Data2" => 3,
                        "Data3" => 5,
                    ),
                ),
                array(
                    'extra' => array(
                        "0000E3", 3
                    )
                ),
                null,
            ),
        );
    }
    /**
    * Generic function for testing sensor routines
    *
    * This is called by using parent::sensorTest()
    *
    * @param array $device   The device to load
    * @param array $averages The averages to have saved
    * @param array $preload  The data to preload into the class
    * @param mixed $expect   The return data to expect
    *
    * @return null
    *
    * @dataProvider dataGetLastAverage15Min()
    */
    public function testGetLastAverage15Min(
        $device, $averages, $preload, $expect
    ) {
        $dev = new DeviceContainer();
        $dev->fromAny($device);
        $dev->insertRow(true);
        $avg = &$dev->historyFactory(array(), false);
        foreach ((array)$averages as $a) {
            $avg->clearData();
            $avg->fromAny($a);
            $avg->insertRow(true);
        }
        $o = new PhysicalPointVirtualSensor($preload, $this->d);
        $this->assertSame($expect, $o->getLastAverage15Min());
    }

}

?>
