<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Processes
 * @package    HUGnetLibTest
 * @subpackage Processes
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../base/ProcessBase.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Processes
 * @package    HUGnetLibTest
 * @subpackage Processes
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ProcessBaseTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "sockets" => array(
                array(
                    "dummy" => true,
                ),
            ),
            "script_gateway" => 1,
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->config->sockets->forceDeviceID("000019");
        $this->socket = &$this->config->sockets->getSocket();
        $this->pdo = &$this->config->servers->getPDO();
        $this->d = new DeviceContainer(
            array(
                "DeviceID"   => "000019",
            )
        );
        $this->o = new ProcessBaseClassTest(array(), $this->d);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
        // Trap the exit signal and exit gracefully
        if (function_exists("pcntl_signal")) {
            pcntl_signal(SIGINT, SIG_DFL);
        }

    }
    /**
    * Tests for exceptions
    *
    * @expectedException Exception
    *
    * @return null
    */
    public function testConstructTableExec()
    {
        $config = array(

        );
        $this->config->forceConfig($config);
        $o = new ProcessBaseClassTest(array(), $this->d);
    }
    /**
    * data provider for testConstructor
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
           array(
                array(),
                array(
                    "group" => "default",
                    "GatewayKey" => 1,
                ),
            ),
           array(
                array(
                    "group" => "test",
                    "GatewayKey" => 3,
                ),
                array(
                    "group" => "test",
                    "GatewayKey" => 3,
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $o = new ProcessBaseClassTest($preload, $this->d);
        $ret = $this->readAttribute($o, "data");
        $this->assertSame($expect, $ret);
        // Check the configuration is set correctly
        $config = $this->readAttribute($o, "myConfig");
        $this->assertSame("ConfigContainer", get_class($config));
        // Check the configuration is set correctly
        $device = $this->readAttribute($o, "device");
        $this->assertSame("DeviceContainer", get_class($device));
    }

    /**
    * data provider for testPowerup
    *
    * @return array
    */
    public static function dataPowerup()
    {
        return array(
            // Nothing
            array(
                array(),
                "",
                "5A5A5A5E0000000000190047",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $read    The packet strings for the function to read
    * @param array $write   The packet strings that the function will write
    *
    * @return null
    *
    * @dataProvider dataPowerup
    */
    public function testPowerup($preload, $read, $write)
    {
        $this->o->fromAny($preload);
        $i = 0;
        $this->o->powerup();
        $this->socket->readString = $read;
        $this->assertSame(
            $write, $this->socket->writeString,
            "$group has the wrong string"
        );
    }
    /**
    * data provider for testPacketConsumer
    *
    * @return array
    */
    public static function dataPacketConsumer()
    {
        return array(
            array(
                array(
                    array(
                        "DeviceName" => "Hello",
                        "DeviceID" => "123456",
                        "GatewayKey" => 3,
                        "HWPartNum" => "0039-21-20-C",
                        "FWPartNum" => "0039-08-20-C",
                        "FWVersion" => "1.2.3",
                    ),
                ),
                array(
                    "To" => "000000",
                    "From" => "123456",
                    "Command" => "5C",
                    "group" => "default",
                ),
                array(
                    array(
                        "DeviceKey"         => "1",
                        "DeviceID"          => "123456",
                        "DeviceName"        => "Hello",
                        "SerialNum"         => "0",
                        "HWPartNum" => "0039-21-20-C",
                        "FWPartNum" => "0039-08-20-C",
                        "FWVersion" => "1.2.3",
                        "RawSetup"=> "000000000000000000000000000000000000FFFFFF50",
                        "Active"            => "1",
                        "GatewayKey"        => "1",
                        "ControllerKey"     => "0",
                        "ControllerIndex"   => "0",
                        "DeviceLocation"    => "",
                        "DeviceJob"         => "",
                        "Driver"            => "eDEFAULT",
                        "PollInterval"      => "0",
                        "ActiveSensors"     => "0",
                        "DeviceGroup"       => "FFFFFF",
                        "BoredomThreshold"  => "80",
                        "LastConfig" => "1970-01-01 00:00:00",
                        "LastPoll" => "1970-01-01 00:00:00",
                        "LastHistory" => "1970-01-01 00:00:00",
                        "LastAnalysis" => "1970-01-01 00:00:00",
                        "MinAverage"        => "15MIN",
                        "CurrentGatewayKey" => "0",
                        "sensors"           => "YToyOntzOjE0OiJSYXdDYWxpYnJhdGlvb"
                            ."iI7czowOiIiO3M6NzoiU2Vuc29ycyI7aTowO30=",
                        "params"            => "YTowOnt9",
                    ),
                ),
                "",
            ),
            array(
                array(
                ),
                array(
                    "To" => "000000",
                    "From" => "123456",
                    "Command" => "5C",
                    "group" => "default",
                ),
                array(
                    array(
                        "DeviceKey"         => "1",
                        "DeviceID"          => "123456",
                        "DeviceName"        => "",
                        "SerialNum"         => "0",
                        "HWPartNum"         => "",
                        "FWPartNum"         => "",
                        "FWVersion"         => "",
                        "RawSetup"          => "",
                        "Active"            => "1",
                        "GatewayKey"        => "1",
                        "ControllerKey"     => "0",
                        "ControllerIndex"   => "0",
                        "DeviceLocation"    => "",
                        "DeviceJob"         => "",
                        "Driver"            => "eDEFAULT",
                        "PollInterval"      => "0",
                        "ActiveSensors"     => "0",
                        "DeviceGroup"       => "FFFFFF",
                        "BoredomThreshold"  => "80",
                        "LastConfig" => "1970-01-01 00:00:00",
                        "LastPoll" => "1970-01-01 00:00:00",
                        "LastHistory" => "1970-01-01 00:00:00",
                        "LastAnalysis" => "1970-01-01 00:00:00",
                        "MinAverage"        => "15MIN",
                        "CurrentGatewayKey" => "0",
                        "sensors"           => "",
                        "params"            => "",
                    ),
                ),
                "",
            ),
            array(
                array(
                ),
                array(
                    "To" => "000019",
                    "From" => "123456",
                    "Command" => "5C",
                    "group" => "default",
                ),
                array(
                ),
                "5A5A5A0112345600001916000000000000000000000000000000000000"
                    ."FFFFFF50D1",
            ),
            array(
                array(
                ),
                array(
                    "To" => "000019",
                    "From" => "123456",
                    "Command" => "03",
                    "Data" => "01020304",
                    "group" => "default",
                ),
                array(
                ),
                "5A5A5A01123456000019040102030468",
            ),
            array(
                array(
                ),
                array(
                    "To" => "000019",
                    "From" => "123456",
                    "Command" => "02",
                    "Data" => "01020304",
                    "group" => "default",
                ),
                array(
                ),
                "5A5A5A01123456000019040102030468",
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload The data to preload into the devices table
    * @param string $pkt     The packet string to use
    * @param string $expect  The expected return
    * @param string $write   The packet string expected to be written
    *
    * @return null
    *
    * @dataProvider dataPacketConsumer
    */
    public function testPacketConsumer($preload, $pkt, $expect, $write)
    {
        $d = new DeviceContainer();
        foreach ((array)$preload as $load) {
            $d->fromArray($load);
            $d->insertRow(true);
        }
        $p = new PacketContainer($pkt);
        $this->o->packetConsumer($p);
        $stmt = $this->pdo->query("SELECT * FROM `devices`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
        $this->assertSame($write, $this->socket->writeString);

    }
    /**
    * data provider for testPacketConsumer
    *
    * @return array
    */
    public static function dataWait()
    {
        return array(
            array(
                2,
                false,
                "",
                "",
                null,
            ),
            array(
                2,
                true,
                "",
                "",
                null,
            ),
            array(
                2,
                true,
                (string)new PacketContainer(array(
                    "From" => "123456",
                    "To" => "000000",
                    "Command" => PacketContainer::COMMAND_POWERUP,
                    "Data" => "0102030405",
                ))
                .(string)new PacketContainer(array(
                    "From" => "123456",
                    "To" => "000019",
                    "Command" => PacketContainer::COMMAND_REPLY,
                    "Data" => "0102030405",
                )),
                "",
                "123456",
            ),
            array(
                2,
                true,
                (string)new PacketContainer(array(
                    "From" => "123456",
                    "To" => "000019",
                    "Command" => PacketContainer::COMMAND_GETSETUP,
                    "Data" => "0102030405",
                )),
                "5A5A5A0112345600001916000000000000000000000000000000000000"
                    ."FFFFFF50D1",
                null,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param int    $timeout     The timeout to use
    * @param bool   $loop        What to set the loop variable to
    * @param string $read        The read string for the socket
    * @param string $expect      The expected return
    * @param string $unsolicited The deviceID of unsolicited packet to check for
    *
    * @return null
    *
    * @dataProvider dataWait
    */
    public function testWait($timeout, $loop, $read, $expect, $unsolicited)
    {
        $this->socket->readString = $read;
        $this->o->loop = $loop;
        $start = time();
        $this->o->wait($timeout);
        $end = time();
        if ($loop) {
            $this->assertThat(($end - $start), $this->greaterThanOrEqual($timeout));
        }
        $this->assertSame($expect, $this->socket->writeString);
        if (is_string($unsolicited)) {
            $u = $this->readAttribute($this->o, "unsolicited");
            $this->assertSame($unsolicited, $u->DeviceID);
        }
    }
    /**
    * data provider for testLoopEnd
    *
    * @return array
    */
    public static function dataLoopEnd()
    {
        return array(
            array(
                2,
                false,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param int    $signo  The signal to simulate
    * @param string $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataLoopEnd
    */
    public function testLoopEnd($signo, $expect)
    {
        $this->o->loopEnd($signo);
        $this->assertSame($expect, $this->o->loop);
    }

    /**
    * test the set routine when an extra class exists
    *
    * @return null
    */
    public function testGetIP()
    {
        $ret = $this->o->getIP();
        $this->assertRegExp(
            "/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/",
            $ret
        );
    }

}

/**
 * This class has functions that relate to the manipulation of elements
 * of the devInfo array.
 *
 * @category   Processes
 * @package    HUGnetLibTest
 * @subpackage Processes
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ProcessBaseClassTest extends ProcessBase implements PacketConsumerInterface
{
    /**
    * Builds the class
    *
    * @param array           $data    The data to build the class with
    * @param DeviceContainer &$device This is the class to send packets to me to.
    *
    * @return null
    */
    public function __construct($data, DeviceContainer &$device)
    {
        parent::__construct($data, $device);
        $this->registerHooks();
        $this->requireGateway();
    }
}
?>
