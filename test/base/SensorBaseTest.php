<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLib
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id: driver.php 529 2007-12-10 23:12:39Z prices $    
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
// Call SensorBaseTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'SensorBaseTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../base/SensorBase.php';

/**
 * Test class for SensorBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Test
 * @package    HUGnetLib
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SensorBaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    SensorBase
     * @access protected
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     *
     * @return none
     */
    public static function main()
    {
        include_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('SensorBaseTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     *
     * @return none
     */
    protected function setUp()
    {
        $this->o = new SensorBase();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     *
     * @return none
     */
    protected function tearDown()
    {
        unset($this->o);
    }
    
    /**
     * data provider for testConstructor
     *
     * @return array
     *
     * @static
     */
     public static function dataConstructorTf() {
         return array(
             array(1,1),
             array(false, 65536),
         );
     }
    /**
     * @dataProvider dataConstructorTf
     *
     * @param int $Tf     The value to test
     * @param int $expect The expected value
     *
     * @return none
     */
    public function testConstructorTf($Tf, $expect) {
        $o = new SensorBase($Tf);
        $this->assertSame($expect, $this->readAttribute($o, "Tf"));
    }
    /**
     * data provider for testConstructorD
     *
     * @return array
     *
     * @static
     */
     public static function dataConstructorD() {
         return array(
             array(1,1),
             array(false, 65536),
         );
     }
    /**
     * @dataProvider dataConstructorD
     *
     * @param int $D     The value to test
     * @param int $expect The expected value
     *
     * @return none
     */
    public function testConstructorD($D, $expect) {
        $o = new SensorBase(false, $D);
        $this->assertSame($expect, $this->readAttribute($o, "D"));
    }
    /**
     * data provider for testConstructorS
     *
     * @static
     *
     * @return array
     */
     public static function dataConstructorS() {
         return array(
             array(1,1),
             array(false, 64),
         );
     }
    /**
     * @dataProvider dataConstructorS
     *
     * @param int $s     The value to test
     * @param int $expect The expected value
     *
     * @return none
     */
    public function testConstructorS($s, $expect) {
        $o = new SensorBase(false, false, $s);
        $this->assertSame($expect, $this->readAttribute($o, "s"));
    }
    /**
     * data provider for testConstructorAm
     *
     * @static
     *
     * @return array
     */
     public static function dataConstructorAm() {
         return array(
             array(1,1),
             array(false, 1023),
         );
     }
    /**
     * @dataProvider dataConstructorAm
     *
     * @param int $Am     The value to test
     * @param int $expect The expected value
     *
     * @return none
     */
    public function testConstructorAm($Am, $expect) {
        $o = new SensorBase(false, false, false, $Am);
        $this->assertSame($expect, $this->readAttribute($o, "Am"));
    }
    /**
     * data provider for testConstructorVcc
     *
     * @static
     *
     * @return array
     */
     public static function dataConstructorVcc() {
         return array(
             array(1,1),
             array(false, 5),
         );
     }
    /**
     * @dataProvider dataConstructorVcc
     *
     * @param float $Vcc    The value to test
     * @param float $expect The expected value
     *
     * @return none
     */
    public function testConstructorVcc($Vcc, $expect) {
        $o = new SensorBase(false, false, false, false, $Vcc);
        $this->assertSame($expect, $this->readAttribute($o, "Vcc"));
    }
    /**
     * Test the sensors array to make sure it is blank and an array
     *
     * @return none
     */
    public function testSensorsArray() {
        $this->assertSame(array(), $this->o->sensors);
    }
}

// Call SensorBaseTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'SensorBaseTest::main') {
    SensorBaseTest::main();
}
?>
