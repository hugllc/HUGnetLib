<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */

require_once dirname(__FILE__).'/../../base/HUGnetDBDriver.php';
require_once dirname(__FILE__).'/../stubs/DummyTableContainer.php';
require_once 'PHPUnit/Extensions/Database/TestCase.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBDriverTest extends PHPUnit_Extensions_Database_TestCase
{
    /** @var object This is our database object */
    protected $pdo;
    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->skipPDOTests = true;
        $config = array(
            "servers" => array(
                array(
                    "driver" => "sqlite",
                    "file" => ":memory:",
                    "group" => "default",
                ),
            ),
        );
        $this->myConfig = &ConfigContainer::singleton();
        $this->myConfig->forceConfig($config);
        $this->pdo = &$this->myConfig->servers->getPDO("default");
        $this->pdo->query("DROP TABLE IF EXISTS `myTable`");
        $this->pdo->query(
            "CREATE TABLE `myTable` ("
            ." `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,"
            ." `name` varchar(32) NOT NULL,"
            ." `value` float NULL"
            ." )"
        );
        parent::setUp();
        $this->table = new DummyTableContainer();
        $this->o = new HUGnetDBDriverTestStub($this->table, $this->pdo);
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        if (is_a($this->pdo, "PDO")) {
            $this->pdo->query("DROP TABLE IF EXISTS `myTable`");
        }
        unset($this->o);
        unset($this->pdo);
    }

    /**
    * This sets up our database connection
    *
    * @return null
    */
    protected function getConnection()
    {
        return $this->createDefaultDBConnection($this->pdo, "sqlite");
    }

    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            dirname(__FILE__).'/../files/HUGnetDBDriverTest.xml'
        );
    }

    /**
    * Tests for exceptions
    *
    * @expectedException Exception
    *
    * @return null
    */
    public function testConstructTableExec()
    {
        $o = new HUGnetDBDriverTestStub($empty, $this->pdo);
    }
    /**
    * Tests for exceptions
    *
    * @expectedException Exception
    *
    * @return null
    */
    public function testConnectPDOExec()
    {
        $this->table->group = "BogusGroup";
        $this->o->Connect();
    }
    /**
    * Data provider for testAddColumnQuery
    *
    * @return array
    */
    public static function dataConstructVerbose()
    {
        return array(
            array(6, PDO::ERRMODE_EXCEPTION),
            array(2, PDO::ERRMODE_WARNING),
            array(0, PDO::ERRMODE_SILENT),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param int $verbose the verbosity level to use
    * @param int $expect  The expected return
    *
    * @dataProvider dataConstructVerbose
    *
    * @return null
    */
    public function testConstructVerbose($verbose, $expect)
    {
        $this->myConfig = &ConfigContainer::singleton();
        $this->myConfig->verbose = $verbose;
        $o = new HUGnetDBDriverTestStub($this->table, $this->pdo);
        $ret = $this->o->qpdo->getAttribute(PDO::ATTR_ERRMODE);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testAddColumnQuery
    *
    * @return array
    */
    public static function dataAddColumnQuery()
    {
        return array(
            array(
                array(
                    "Name" => "ColumnName",
                    "Type" => "INT(12)",
                    "Default" => "0",
                    "Null" => false,
                ),
                "ALTER TABLE `myTable` ADD "
                ."`ColumnName` INT(12) NOT NULL DEFAULT '0'"
            ),
            array(
                array(
                    "Name" => "ColumnName",
                    "Type" => "NUMERIC(12)",
                    "Default" => null,
                    "Null" => true,
                ),
                "ALTER TABLE `myTable` ADD `ColumnName` NUMERIC(12) NULL"
            ),
        );
    }
    /**
    * test
    *
    * @param array  $column The database key to get the record from
    * @param string $expect The query created
    *
    * @return null
    *
    * @dataProvider dataAddColumnQuery
    */
    public function testAddColumnQuery($column, $expect)
    {
        $this->o->addColumn($column);
        $this->assertAttributeSame($expect, "query", $this->o);
        $stmt = $this->pdo->query("PRAGMA table_info(".$this->table->sqlTable.")");
        $cols = $stmt->fetchAll(PDO::FETCH_ASSOC);
        foreach ((array)$cols as $row) {
            if ($row["name"] == $column["Name"]) {
                if (is_string($row["dflt_value"])) {
                    $def = str_replace("'", "", $row["dflt_value"]);
                } else {
                    $def = $row["dflt_value"];
                }
                $ret = array(
                    "Name" => $row["name"],
                    "Type" => $row["type"],
                    "Default" => $def,
                    "Null" => !(bool)$row["notnull"],
                );
                break;
            }
        }
        $this->assertSame($column, $ret);
    }
    /**
    * Data provider for testCreateTable
    *
    * @return array
    */
    public static function dataCreateTable()
    {
        return array(
            array(
                array(
                    array(
                        "Name" => "ColumnName",
                        "Type" => "INTEGER",
                        "Default" => 0,
                        "Null" => false,
                        "AutoIncrement" => true,
                    ),
                    array(
                        "Name" => "Column2",
                        "Type" => "bigint(12)",
                        "Default" => 1,
                        "Null" => false,
                    ),
                ),
                "CREATE TABLE IF NOT EXISTS `myTable` (\n"
                ."     `ColumnName` INTEGER PRIMARY KEY AUTOINCREMENT "
                ."NOT NULL DEFAULT '0',\n"
                ."     `Column2` BIGINT(12) NOT NULL DEFAULT '1'\n"
                .")",
                array(
                    array(
                        "cid" => "0",
                        "name" => "ColumnName",
                        "type" => "INTEGER",
                        "notnull" => "1",
                        "dflt_value" => "'0'",
                        "pk" => "1",
                    ),
                    array(
                        "cid" => "1",
                        "name" => "Column2",
                        "type" => "BIGINT(12)",
                        "notnull" => "1",
                        "dflt_value" => "'1'",
                        "pk" => "0",
                    ),
                ),
            ),
            array(
                array(
                ),
                "CREATE TABLE IF NOT EXISTS `myTable` (\n"
                ."     `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL DEFAULT "
                ."'0',\n"
                ."     `name` VARCHAR(32) NOT NULL DEFAULT '',\n"
                ."     `value` FLOAT NOT NULL DEFAULT '0'\n"
                .")",
                array(
                    array(
                        "cid" => "0",
                        "name" => "id",
                        "type" => "INTEGER",
                        "notnull" => "1",
                        "dflt_value" => "'0'",
                        "pk" => "1",
                    ),
                    array(
                        "cid" => "1",
                        "name" => "name",
                        "type" => "VARCHAR(32)",
                        "notnull" => "1",
                        "dflt_value" => "''",
                        "pk" => "0",
                    ),
                    array(
                        "cid" => "2",
                        "name" => "value",
                        "type" => "FLOAT",
                        "notnull" => "1",
                        "dflt_value" => "'0'",
                        "pk" => "0",
                    ),
                ),
            ),
            array(
                array(
                    array(
                        "Name" => "Column1",
                        "Type" => "float",
                        "Default" => 1.0,
                        "Primary" => true,
                    ),
                    array(
                        "Name" => "Column2",
                        "Type" => "double",
                        "Default" => 0.0,
                        "Unique" => true,
                        "Collate" => "BINARY",
                    ),
                ),
                "CREATE TABLE IF NOT EXISTS `myTable` (\n"
                ."     `Column1` FLOAT PRIMARY KEY NOT NULL DEFAULT '1',\n"
                ."     `Column2` DOUBLE UNIQUE COLLATE BINARY NOT NULL DEFAULT '0'\n"
                .")",
                array(
                    array(
                        "cid" => "0",
                        "name" => "Column1",
                        "type" => "FLOAT",
                        "notnull" => "1",
                        "dflt_value" => "'1'",
                        "pk" => "1",
                    ),
                    array(
                        "cid" => "1",
                        "name" => "Column2",
                        "type" => "DOUBLE",
                        "notnull" => "1",
                        "dflt_value" => "'0'",
                        "pk" => "0",
                    ),
                ),
            ),
            array(
                array(
                    array(
                        "Name" => "ColumnName",
                        "Type" => "varchar(32)",
                        "Default" => "a",
                        "Null" => false,
                    ),
                ),
                "CREATE TABLE IF NOT EXISTS `myTable` (\n"
                ."     `ColumnName` VARCHAR(32) NOT NULL DEFAULT 'a'\n)",
                array(
                    array(
                        "cid" => "0",
                        "name" => "ColumnName",
                        "type" => "VARCHAR(32)",
                        "notnull" => "1",
                        "dflt_value" => "'a'",
                        "pk" => "0",
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array  $columns The columns to put in the table
    * @param string $expect  The query created
    * @param array  $table   The expected table
    *
    * @return null
    *
    * @dataProvider dataCreateTable
    */
    public function testCreateTable($columns, $expect, $table)
    {
        $this->pdo->query("DROP TABLE `myTable`");
        $this->o->CreateTable($columns);
        $this->assertAttributeSame($expect, "query", $this->o);
        $stmt = $this->pdo->query("PRAGMA table_info(".$this->table->sqlTable.")");
        $cols = $stmt->fetchAll(PDO::FETCH_ASSOC);
        // Different versions of sqlite return different notnull values.
        foreach ($cols as $key => $col) {
            if ($col["notnull"]) {
                $cols[$key]["notnull"] = "1";
            }
        }
        $this->assertSame($table, $cols);
    }
    /**
    * test
    *
    * @param array  $columns The columns to put in the table
    * @param string $expect  The query created
    *
    * @return null
    *
    * @dataProvider dataCreateTable
    */
    public function testCreateTableExists($columns, $expect)
    {
        $this->o->CreateTable($columns);
        $this->assertAttributeSame($expect, "query", $this->o);
    }

    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataAddIndex()
    {
        return array(
            array(
                array(
                    "Name" => "IndexName",
                    "Columns" => array("id", "name"),
                ),
                "CREATE INDEX `IndexName` ON `myTable` "
                ."(`id`, `name`)",
            ),
            array(
                array(
                    "Name" => "IndexName",
                    "Unique" => true,
                    "Columns" => array("id", "value"),
                ),
                "CREATE UNIQUE INDEX `IndexName` ON `myTable` "
                ."(`id`, `value`)",
            ),
            array(
                array(
                    "Name" => "IndexName",
                    "Unique" => true,
                    "Columns" => array("id", "value,15"),
                ),
                "CREATE UNIQUE INDEX `IndexName` ON `myTable` "
                ."(`id`, `value` (15))",
            ),
        );
    }
    /**
    * test
    *
    * @param array  $column The database key to get the record from
    * @param string $expect The query created
    *
    * @return null
    *
    * @dataProvider dataAddIndex
    */
    public function testAddIndex($column, $expect)
    {
        $this->o->addIndex($column);
        $this->assertAttributeSame($expect, "query", $this->o);
    }

    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataGetAttribute()
    {
        return array(
            array(
                constant("PDO::ATTR_DRIVER_NAME"),
                "sqlite"
            ),
        );
    }
    /**
    * test
    *
    * @param array  $attrib The attribute to get
    * @param string $expect The query created
    *
    * @return null
    *
    * @dataProvider dataGetAttribute
    */
    public function testGetAttribute($attrib, $expect)
    {
        $ret = $this->o->getAttribute($attrib);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataGetNextID()
    {
        return array(
            array(
                'INSERT into `myTable` (`id`, `name`, `value`) VALUES (532, "", 32)',
                533
            ),
        );
    }
    /**
    * test
    *
    * @param string $preload SQL query preload
    * @param string $expect  The query created
    *
    * @return null
    *
    * @dataProvider dataGetNextID
    */
    public function testGetNextID($preload, $expect)
    {
        $this->pdo->query($preload);
        $ret = $this->o->getNextID();
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataGetPrevID()
    {
        return array(
            array(
                'INSERT into `myTable` (`id`, `name`, `value`) VALUES (-10, "", 32)',
                -11
            ),
        );
    }
    /**
    * test
    *
    * @param string $preload SQL query preload
    * @param string $expect  The query created
    *
    * @return null
    *
    * @dataProvider dataGetPrevID
    */
    public function testGetPrevID($preload, $expect)
    {
        $this->pdo->query($preload);
        $ret = $this->o->getPrevID();
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testAddColumn
    *
    * @return array
    */
    public static function dataDeleteWhere()
    {
        return array(
            array(
                "",
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                false,
            ),
            array(
                "1",
                array(),
                array(),
                true,
            ),
            array(
                "id = ?",
                array(2),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            array(
                array("id" => 2),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            array(
                "id > 0",
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ),
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param string $where  The where clause
    * @param array  $data   The data to use.  It just sets up the query if this is
    *                       empty.
    * @param string $expect The query created
    * @param bool   $ret    The expected return value
    *
    * @return null
    *
    * @dataProvider dataDeleteWhere
    */
    public function testDeleteWhere($where, $data, $expect, $ret)
    {
        $r = $this->o->deleteWhere($where, $data);
        $this->assertSame($ret, $r);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * Data provider for testInsert
    *
    * @return array
    */
    public static function dataInsert()
    {
        return array(
            array(
                array(),
                array(),
                true,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            array(
                array(
                    "id" => 42,
                    "name" => "hello",
                    "value" => 2.3,
                ),
                null,
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => "33",
                        "name" => "hello",
                        "value" => "2.3",
                    ),
                ),
                true,
                true,
            ),
            array(
                array("id" => 3, "name" => "a name", "value" => 10),
                array(),
                true,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "3",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            array(
                array("id" => 3, "name" => "a name", "value" => 10),
                array("id", "name"),
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "3",
                        "name" => "a name",
                        "value" => null,
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                array("id", "name"),
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                false,
                true,
            ),
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                array("ex", "not a column"),
                true,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret     The expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testInsertOnce($data, $keys, $replace, $expect, $ret)
    {
        if (is_null($keys)) {
            $keys = $this->o->autoIncrement();
        }
        $r = $this->o->insertOnce($data, $keys, $replace);
        $this->assertSame($ret, $r);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret2    The expected return value
    * @param bool   $ret     The second expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testInsert($data, $keys, $replace, $expect, $ret2, $ret)
    {
        if (is_null($keys)) {
            $keys = $this->o->autoIncrement();
        }
        $r = $this->o->insert(array(), $keys, $replace);
        $this->assertSame($ret, $r);
        $r = $this->o->insert($data, $keys, $replace);
        $this->assertSame($ret2, $r);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }

    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret2    The expected return value
    * @param bool   $ret     The second expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testReplace($data, $keys, $replace, $expect, $ret2, $ret)
    {
        if ($replace) {
            $r = $this->o->replace(array(), $keys);
            $this->assertSame($ret, $r);
            $r = $this->o->replace($data, $keys);
            $this->assertSame($ret, $r);
            $stmt = $this->pdo->query("SELECT * FROM `myTable`");
            $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $this->assertSame($expect, $rows);
        }
    }
    /**
    * test
    *
    * @param array  $data    The data to use.  It just sets up the query if this is
    *                        empty.
    * @param array  $keys    The columns to insert.  Uses all of this is blank.
    * @param bool   $replace If true it replaces the "INSERT"
    *                        keyword with "REPLACE".  Not all
    *                        databases support "REPLACE".
    * @param string $expect  The query created
    * @param bool   $ret     The expected return value
    *
    * @return null
    *
    * @dataProvider dataInsert
    */
    public function testReplaceOnce($data, $keys, $replace, $expect, $ret)
    {
        if ($replace) {
            $r = $this->o->replaceOnce($data, $keys);
            $this->assertSame($ret, $r);
            $stmt = $this->pdo->query("SELECT * FROM `myTable`");
            $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $this->assertSame($expect, $rows);
        }
    }
    /**
    * Data provider for testUpdate
    *
    * @return array
    */
    public static function dataUpdate()
    {
        return array(
            // This one would just set the query up
            array(
                array(),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Normal update
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Normal update
            array(
                array("id" => 2, "name" => "a name", "value" => 10),
                "id = ?",
                array(2),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "10.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
            ),
            // Update on a nonexistant record
            array(
                array("id" => 3, "name" => "a name", "value" => 10),
                "",
                array(),
                array("id", "name"),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
            ),
            // Update using the index columns instead of the id
            array(
                array("id" => 2, "name" => "a name", "value" => 22.0),
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "a name",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
                true,
                true,
                "",
                array(
                    "things" => array(
                        "Name" => "things",
                        "Columns" => array("name", "value"),
                    ),
                    "stuff" => array(
                        "Name" => "stuff",
                        "Unique" => true,
                        "Columns" => array("id", "value"),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array  $data      The data to use.  It just sets up the query if this is
    *                          empty.
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param bool   $ret       The expected return value
    * @param bool   $ret2      The expected return value of the second call
    * @param string $id        The id column to use
    * @param array  $indexes   The indexes array to use
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    public function testUpdateOnce(
        $data,
        $where,
        $whereData,
        $keys,
        $expect,
        $ret,
        $ret2 = true,
        $id = "id",
        $indexes = array()
    ) {
        $this->table->sqlId = $id;
        $this->table->sqlIndexes = $indexes;
        $r = $this->o->updateOnce($data, $where, $whereData, $keys);
        $this->assertSame($ret, $r);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param array  $data      The data to use.  It just sets up the query if this is
    *                          empty.
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param bool   $ret       The expected return value
    * @param bool   $ret2      The expected return value of the second call
    * @param string $id        The id column to use
    * @param array  $indexes   The indexes array to use
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    public function testUpdate(
        $data,
        $where,
        $whereData,
        $keys,
        $expect,
        $ret,
        $ret2 = true,
        $id = "id",
        $indexes = array()
    ) {
        $this->table->sqlId = $id;
        $this->table->sqlIndexes = $indexes;
        $r = $this->o->update(array(), $where, $whereData, $keys);
        $this->assertSame($ret, $r);
        $r = $this->o->update($data);
        $this->assertSame($ret2, $r);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * Data provider for testSelectWhere
    *
    * @return array
    */
    public static function dataSelectWhere()
    {
        return array(
            // #0  Selects everything
            array(
                "",  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                ), // expect
                "value ASC", // Orderby
                0, // limit
                0, // start
                true,
            ),
            // #1 Selects everything, returns 1 value
            array(
                "",  // where
                array(), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ), // expect
                "", // Orderby
                1, // limit
                0, // start
                true,
            ),
            // #2 Selects only one
            array(
                "id = ?",  // where
                array(32), // data
                array("id", "name", "value"), // keys
                array(
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                "value DESC", // Orderby
                0, // limit
                0, // start
                true,
            ),
            // Selects only one
            array(
                "id = 32",  // where
                array(), // data
                array("id", "value"), // keys
                array(
                    array(
                        "id" => "32",
                        "value" => "23.0",
                    ),
                ), // expect
                "value DESC", // Orderby
                0, // limit
                0, // start
                true,
            ),
            // Selects only one that is not there
            array(
                "idasd = 6472",  // where
                array(), // data
                array("id", "value"), // keys
                null, // expect
                "value DESC", // Orderby
                0, // limit
                0, // start
                false,
            ),
            // Selects only one using the 'idwhere'
            array(
                array("id" => 32),  // where
                array(), // data
                array("id", "value", "name"), // keys
                array(
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ), // expect
                "value DESC", // Orderby
                0, // limit
                0, // start
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param string $orderby   The orderby clause
    * @param int    $limit     The max number of records to return
    * @param int    $start     The record to start on
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhere(
        $where,
        $whereData,
        $keys,
        $expect,
        $orderby,
        $limit,
        $start,
        $ret
    ) {
        $this->table->sqlOrderBy = $orderby;
        $this->table->sqlStart = $start;
        $this->table->sqlLimit = $limit;
        $r = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $r);
        // This is necessary because the other methods return null, while FETCH_ASSOC
        // returns an array
        if (is_null($expect)) {
            $expect = array();
        }
        $rows = $this->o->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param string $orderby   The orderby clause
    * @param int    $limit     The max number of records to return
    * @param int    $start     The record to start on
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhereObj(
        $where,
        $whereData,
        $keys,
        $expect,
        $orderby,
        $limit,
        $start,
        $ret
    ) {
        $this->table->sqlOrderBy = $orderby;
        $this->table->sqlStart = $start;
        $this->table->sqlLimit = $limit;
        $r = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $r);
        $ret = array();
        $res = $this->o->fetchAll();
        foreach ((array)$res as $row) {
            $this->assertInternalType("object", $row);
            $this->assertSame(get_class($this->table), get_class($row));
            $rows[] = $row->toArray();
        }
        $this->assertSame($expect, $rows);
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $keys      The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    * @param string $orderby   The orderby clause
    * @param int    $limit     The max number of records to return
    * @param int    $start     The record to start on
    * @param bool   $ret       The expected return value
    *
    * @return null
    *
    * @dataProvider dataSelectWhere
    */
    public function testSelectWhereInto(
        $where,
        $whereData,
        $keys,
        $expect,
        $orderby,
        $limit,
        $start,
        $ret
    ) {
        $this->table->sqlOrderBy = $orderby;
        $this->table->sqlStart = $start;
        $this->table->sqlLimit = $limit;
        $r = $this->o->selectWhere($where, $whereData, $keys);
        $this->assertSame($ret, $r);
        $rows = array();
        foreach ((array)$expect as $e) {
            $ret = $this->o->fetchInto();
            $this->assertTrue($ret);
            $this->assertSame($e, $this->table->toArray());
        }
        $this->assertFalse($this->o->fetchInto());
    }
    /**
    * Data provider for testCountWhere
    *
    * @return array
    */
    public static function dataCountWhere()
    {
        return array(
            // Selects everything
            array(
                "",  // where
                array(), // data
                "", // keys
                4, // expect
            ),
            // Selects everything, key specified
            array(
                "",  // where
                array(), // data
                "id", // keys
                4, // expect
            ),
            // Selects only one
            array(
                "id = ?",  // where
                array(32), // data
                "id", // keys
                1, // expect
            ),
            // Selects only one
            array(
                "id = 32",  // where
                array(), // data
                "id", // keys
                1, // expect
            ),
            // Selects only one that is not there
            array(
                "idasd = 6472",  // where
                array(), // data
                "id", // keys
                false, // expect
            ),
            // Selects only one using the 'idwhere'
            array(
                array("id" => 32),  // where
                array(), // data
                "", // keys
                1, // expect
            ),
        );
    }
    /**
    * test
    *
    * @param string $where     The where clause to use
    * @param array  $whereData The data to use for the where clause
    * @param array  $column    The columns to insert.  Uses all of this is blank.
    * @param string $expect    The query created
    *
    * @return null
    *
    * @dataProvider dataCountWhere
    */
    public function testCountWhere(
        $where,
        $whereData,
        $column,
        $expect
    ) {
        $r = $this->o->countWhere($where, $whereData, $column);
        $this->assertSame($expect, $r);
    }
    /**
    * Data provider for testPrepareExecute
    *
    * @return array
    */
    public static function dataPrepareExecute()
    {
        return array(
            array(
                "",
                array(),
                array(),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
            ),
            array(
                "SELECT * FROM `myTable` WHERE id = ?",
                array(-5),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $query  The query to use
    * @param array  $data   The data that goes with the query
    * @param mixed  $ret    The expected return value
    * @param string $expect What the database looks like when we are done
    *
    * @return null
    *
    * @dataProvider dataPrepareExecute
    */
    public function testPrepareExecuteReset($query, $data, $ret, $expect)
    {
        $this->o->reset();
        $this->o->prepare($query);
        $this->o->execute($data);
        $rows = $this->o->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($ret, $rows);

        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
        $this->o->reset();
        $this->assertAttributeSame("", "query", $this->o);
    }
    /**
    * Data provider for testQuery
    *
    * @return array
    */
    public static function dataQuery()
    {
        return array(
            array(
                "SELECT * FROM `myTable` WHERE id = ?",
                array(-5),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                ),
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
            ),
            array(
                "SELECT * FROM `badTable` WHERE id = ?",
                array(-5),
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
            ),
            array(
                "SELECT * FROM `myTable` WHERE id = ?",
                array(-10, 11, 12),
                false,
                array(
                    array(
                        "id" => "-5",
                        "name" => "Something Negative",
                        "value" => "-25.0",
                    ),
                    array(
                        "id" => "1",
                        "name" => "Something Here",
                        "value" => "25.0",
                    ),
                    array(
                        "id" => "2",
                        "name" => "Another THing",
                        "value" => "22.0",
                    ),
                    array(
                        "id" => "32",
                        "name" => "A way up here thing",
                        "value" => "23.0",
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $query  The query to use
    * @param array  $data   The data that goes with the query
    * @param mixed  $ret    The expected return value
    * @param string $expect What the database looks like when we are done
    *
    * @return null
    *
    * @dataProvider dataQuery
    */
    public function testQuery($query, $data, $ret, $expect)
    {
        $res = $this->o->query($query, $data);
        $this->assertSame($ret, $res);
        $stmt = $this->pdo->query("SELECT * FROM `myTable`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $this->assertSame($expect, $rows);
    }
}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBDriverTestStub extends HUGnetDBDriver
{
    public $defColumns = array();

    /**
    * Register this database object
    *
    * @param object &$table The table object
    */
    public function __construct(&$table)
    {
        parent::__construct($table);
        $this->qpdo =& $this->pdo;
    }
    /**
    * Gets columns from a SQLite server
    *
    * @return null
    */
    public function columns()
    {
        foreach ((array)$this->columns as $col) {
            $this->columns[$col['name']] = $col['type'];
        }
    }
    /**
    * This gets a new PDO object
    *
    * @return null
    */
    public function connect()
    {
        return parent::connect();
    }
    /**
    * Checks the database table, repairs and optimizes it
    *
    * @return mixed
    */
    public function check()
    {
        return true;
    }
    /**
    * Locks the table
    *
    * @return mixed
    */
    public function lock()
    {
        return true;
    }
    /**
    * Unlocks the table
    *
    * @return mixed
    */
    public function unlock()
    {
        return true;
    }
    /**
    * Get the names of all the tables in the current database
    *
    * @return array of table names
    */
    public function tables()
    {
        return array();
    }
}
?>
