<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
/** Test framework */
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../base/UnitBase.php';

/**
 * Test class for SensorBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Units
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class UnitBaseTest extends PHPUnit_Framework_TestCase
{
    /**
    * @var    SensorBase
    * @access protected
    */
    protected $o;

    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->o = new UnitBaseClassTest();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * Test the sensors array to make sure it is blank and an array
    *
    * @return null
    */
    public function testSensorsArray()
    {
        $this->assertSame(array(), $this->o->units);
    }
    /**
    * Data provider for testSiSetup
    *
    * @return array
    */
    public static function dataSiSetup()
    {
        return array(
            array(array(), array()),
            array("This is not an array", "This is not an array"),
            array(
                array(
                    'gal' => array(
                        'longName' => 'US Gallon',
                        'varType' => 'float',
                        'convert' => array(
                            'l' => 'galtol',
                        ),
                    ),
                    'l' => array(
                        'longName' => 'liters',
                        'varType' => 'float',
                        'siPrefix' => array('m', "M"),
                        'convert' => array(
                            'gal' => 'ltogal',
                        ),
                    ),
                ),
                array(
                    'gal' => array(
                        'longName' => 'US Gallon',
                        'varType' => 'float',
                        'convert' => array(
                            'l' => 'galtol',
                        ),
                    ),
                    'l' => array(
                        'longName' => 'liters',
                        'varType' => 'float',
                        'siPrefix' => array('m', "M"),
                        'convert' => array(
                            'gal' => 'ltogal',
                            'ml' => "shift:3",
                            'Ml' => "shift:-6",
                        ),
                    ),
                    'ml' => array(
                        'longName' => 'milliliters',
                        'varType' => 'float',
                        'convert' => array(
                            'l' => "shift:-3",
                            'Ml' => "shift:-9",
                        ),
                    ),
                    'Ml' => array(
                        'longName' => 'megaliters',
                        'varType' => 'float',
                        'convert' => array(
                            'l' => "shift:6",
                            'ml' => "shift:9",
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * Test the sensors array to make sure it is blank and an array
    *
    * @param array $preload The data to preload into units
    * @param array $expect  What units should be in the end
    *
    * @return null
    *
    * @dataProvider dataSiSetup()
    */
    public function testSiSetup($preload, $expect)
    {
        $this->o->units = $preload;
        $this->o->siSetup();
        $this->assertAttributeSame($expect, "units", $this->o);
    }

    /**
    * Data provider for testSiGetShift
    *
    * @return array
    */
    public static function dataSiGetShift()
    {
        return array(
            array("Y", "y", 48),
            array("k", "m", 6),
            array("k", "", 3),
            array("p", "n", -3),
        );
    }
    /**
    * Test the sensors array to make sure it is blank and an array
    *
    * @param string $from   The prefix to convert from
    * @param string $to     The prefix to convert to
    * @param array  $expect The value to expect
    *
    * @return null
    *
    * @dataProvider dataSiGetShift()
    */
    public function testSiGetShift($from, $to, $expect)
    {
        $ret = $this->o->siGetShift($from, $to);
        $this->assertSame($expect, $ret, "$expect != $ret");
    }

    /**
    * Data provider for testSiShift
    *
    * @return array
    */
    public static function dataSiShift()
    {
        return array(
            array(1, "k", "", 1000.0),
            array(1, "", "M", 0.000001),
        );
    }
    /**
    * Test the sensors array to make sure it is blank and an array
    *
    * @param string $val    The value to shift
    * @param string $from   The prefix to convert from
    * @param string $to     The prefix to convert to
    * @param array  $expect The value to expect
    *
    * @return null
    *
    * @dataProvider dataSiShift()
    */
    public function testSiShift($val, $from, $to, $expect)
    {
        $ret = $this->o->siShift($val, $from, $to);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testUnity
    *
    * @return array
    */
    public static function dataUnity()
    {
        return array(
            array(1000.0, 2,"Hello There", array()),
        );
    }
    /**
    * Test the sensors array to make sure it is blank and an array
    *
    * @param float  $val   The input value
    * @param int    $time  The time in seconds between this record and the last.
    * @param string $type  The type of data (diff, raw, etc)
    * @param mixed  $extra Extra information from the sensor
    *
    * @return null
    *
    * @dataProvider dataUnity()
    */
    public function testUnity($val, $time, $type, $extra)
    {
        $ret = $this->o->unity($val, $time, $type, $extra);
        $this->assertSame($val, $ret);
    }

    /**
    * Data provider for testShift
    *
    * @return array
    */
    public static function dataShift()
    {
        return array(
            array(10, 2, 1000.0),
            array(1000, -2, 10.0),
        );
    }
    /**
    * This shifts the decimal places in SI units
    *
    * @param string $val    The value to shift
    * @param string $shift  The number of decimal places
    * @param array  $expect The value to expect
    *
    * @return null
    *
    * @dataProvider dataShift()
    */
    public function testShift($val, $shift, $expect)
    {
        $ret = $this->o->shift($val, $shift);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testSiGetExp
    *
    * @return array
    */
    public static function dataSiGetExp()
    {
        return array(
            array("Y", 24),
            array("Z", 21),
            array("E", 18),
            array("P", 15),
            array("T", 12),
            array("G", 9),
            array("M", 6),
            array("k", 3),
            array("h", 2),
            array("da", 1),
            array("", 0),
            array("d", -1),
            array("c", -2),
            array("m", -3),
            array("&#956;", -6),
            array("n", -9),
            array("p", -12),
            array("f", -15),
            array("a", -18),
            array("z", -21),
            array("y", -24),
            array("Not a prefix", 0),
        );
    }
    /**
    * get the si exponent
    *
    * @param string $prefix The prefix to use
    * @param array  $expect The value to expect
    *
    * @return null
    *
    * @dataProvider dataSiGetExp()
    */
    public function testSiGetExp($prefix, $expect)
    {
        $ret = $this->o->siGetExp($prefix);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testSiGetName
    *
    * @return array
    */
    public static function dataSiGetName()
    {
        return array(
            array("Y", "yotta"),
            array("Z", "zetta"),
            array("E", "exa"),
            array("P", "peta"),
            array("T", "tera"),
            array("G", "giga"),
            array("M", "mega"),
            array("k", "kilo"),
            array("h", "hecto"),
            array("da", "deca"),
            array("", ""),
            array("d", "deci"),
            array("c", "centi"),
            array("m", "milli"),
            array("&#956;", "micro"),
            array("n", "nano"),
            array("p", "pico"),
            array("f", "femto"),
            array("a", "atto"),
            array("z", "zepto"),
            array("y", "yocto"),
            array("Not a prefix", ""),
        );
    }
    /**
    * get the si name
    *
    * @param string $prefix The prefix to use
    * @param array  $expect The value to expect
    *
    * @return null
    *
    * @dataProvider dataSiGetName()
    */
    public function testSiGetName($prefix, $expect)
    {
        $ret = $this->o->siGetName($prefix);
        $this->assertSame($expect, $ret);
    }


}
/**
 * Test class for SensorBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Units
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class UnitBaseClassTest extends UnitBase
{
}
?>
