<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** Include the stuff we need */
require_once dirname(__FILE__).'/../../base/UnitsBase.php';
require_once dirname(__FILE__).'/../../base/DeviceDriverBase.php';
require_once dirname(__FILE__).'/../stubs/DummyDeviceContainer.php';
require_once dirname(__FILE__).'/../../containers/PacketContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceDriverBaseTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "sockets" => array(
                array(
                    "dummy" => true,
                ),
            ),
            "plugins" => array(
                "dir" => realpath(dirname(__FILE__)."/../files/plugins/"),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->socket = &$this->config->sockets->getSocket("default");
        $this->d = new DummyDeviceContainer();
        $this->o = new TestDevice($this->d);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        unset($this->o);
    }


    /**
    * test the loadable routine.
    *
    * @return null
    */
    public function testLoadable()
    {
        $this->assertFalse($this->o->loadable());
    }
    /**
    * test the loadable routine.
    *
    * @return null
    */
    public function testGateway()
    {
        $this->assertFalse($this->o->gateway());
    }
    /**
    * test the loadable routine.
    *
    * @return null
    */
    public function testController()
    {
        $this->assertFalse($this->o->controller());
    }

    /**
    * data provider for testReadSetup, testReadConfig
    *
    * @return array
    */
    public static function dataReadSetup()
    {
        return array(
            array(
                "000025",
                "000000002500391101410039201343000009FFFFFF50",
                (string)new PacketContainer(array(
                    "From" => "000025",
                    "To" => "000020",
                    "Command" => PacketContainer::COMMAND_REPLY,
                    "Data" => "000000002500391101410039201343000009FFFFFF50",
                )),
                (string)new PacketContainer(array(
                    "To" => "000025",
                    "From" => "000020",
                    "Command" => PacketContainer::COMMAND_GETSETUP,
                    "Data" => "",
                )),
                true,
                0,
                time(),
                0,
            ),
            array(
                "000025",
                "000000000100392601500039260150010203FFFFFF10",
                "",
                "5A5A5A5C00002500002000595A5A5A5C0000250000200059"
                    ."5A5A5A0300002500002000065A5A5A5C0000250000200059",
                false,
                1,
                null,
                1,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $id         The Device ID to pretend to be
    * @param string $string     The string for the dummy device to return
    * @param string $read       The read string to put in
    * @param string $write      The write string expected
    * @param string $expect     The expected return
    * @param int    $timeout    The timeout to use
    * @param string $LastConfig The time last congig should be set to (regex)
    * @param int    $configFail The number of failures to report
    *
    * @return null
    *
    * @dataProvider dataReadSetup
    */
    public function testReadSetup(
        $id, $string, $read, $write, $expect, $timeout, $LastConfig, $configFail
    ) {
        $this->d->id = hexdec($id);
        $this->d->DriverInfo["PacketTimeout"] = $timeout;
        $this->socket->readString = $read;
        $ret = $this->o->readSetup();
        $this->assertSame($write, $this->socket->writeString, "Wrong writeString");
        $this->assertSame($string, $this->d->string, "Wrong Setup String");
        $this->assertSame($expect, $ret, "Wrong return value");
        $this->assertThat(
            $this->d->params->DriverInfo["LastConfig"],
            $this->greaterThanOrEqual($LastConfig),
            "LastConfig wrong"
        );
        $this->assertSame(
            $configFail,
            $this->d->params->DriverInfo["ConfigFail"],
            "ConfigFail wrong"
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $id     The Device ID to pretend to be
    * @param string $string The string for the dummy device to return
    * @param string $read   The read string to put in
    * @param string $write  The write string expected
    * @param string $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataReadSetup
    */
    public function testReadConfig($id, $string, $read, $write, $expect)
    {
        $this->d->id = hexdec($id);
        $this->d->DeviceID = $id;
        $this->d->DriverInfo["PacketTimeout"] = 1;
        $this->socket->readString = $read;
        $ret = $this->o->readConfig();
        $this->assertSame($write, $this->socket->writeString, "Wrong writeString");
        $this->assertSame($string, $this->d->string, "Wrong Setup String");
        $this->assertSame($expect, $ret, "Wrong return value");
    }
    /**
    * data provider for testReadData
    *
    * @return array
    */
    public static function dataReadData()
    {
        return array(
            array(
                "37",
                "000000002500391101410039201343000009FFFFFF50",
                (string)new PacketContainer(array(
                    "From" => "000025",
                    "To" => "000020",
                    "Command" => PacketContainer::COMMAND_REPLY,
                    "Data" => "010203040506070809",
                )),
                (string)new PacketContainer(array(
                    "To" => "000025",
                    "From" => "000020",
                    "Command" => PacketContainer::COMMAND_GETDATA,
                    "Data" => "",
                )),
                true,
                array(
                    "PacketTimeout" => 0,
                ),
                time() - 60,
                0,
                array(
                    'group' => 'default',
                    'id' => 37,
                    'packet' => array(
                        'To' => '000025',
                        'From' => '000020',
                        'Command' => '55',
                        'Length' => 0,
                        'Data' => array(),
                        'RawData' => '',
                        'Type' => 'SENSORREAD',
                        'Reply' => array(
                            'To' => '000020',
                            'From' => '000025',
                            'Command' => '01',
                            'Length' => 9,
                            'Data' => array(
                                0 => 1,
                                1 => 2,
                                2 => 3,
                                3 => 4,
                                4 => 5,
                                5 => 6,
                                6 => 7,
                                7 => 8,
                                8 => 9,
                            ),
                            'RawData' => '010203040506070809',
                            'Type' => 'REPLY',
                            'Reply' => null,
                            'Checksum' => '0C',
                            'CalcChecksum' => '0C',
                        ),
                        'Checksum' => '70',
                        'CalcChecksum' => '50',
                    ),
                    'command' => '55',
                    'dataIndex' => '1',
                ),
            ),
            array(
                0x000025,
                "000000002500391101410039201343000009FFFFFF50",
                (string)new PacketContainer(array(
                    "From" => "000025",
                    "To" => "000020",
                    "Command" => PacketContainer::COMMAND_REPLY,
                    "Data" => "010203040506070809",
                )),
                (string)new PacketContainer(array(
                    "To" => "000025",
                    "From" => "000020",
                    "Command" => PacketContainer::COMMAND_GETDATA,
                    "Data" => "",
                )),
                true,
                array(
                    "PacketTimeout" => 0,
                ),
                time() - 60,
                0,
                array(
                    'group' => 'default',
                    'id' => 37,
                    'packet' => array(
                        'To' => '000025',
                        'From' => '000020',
                        'Command' => '55',
                        'Length' => 0,
                        'Data' => array(),
                        'RawData' => '',
                        'Type' => 'SENSORREAD',
                        'Reply' => array(
                            'To' => '000020',
                            'From' => '000025',
                            'Command' => '01',
                            'Length' => 9,
                            'Data' => array(
                                0 => 1,
                                1 => 2,
                                2 => 3,
                                3 => 4,
                                4 => 5,
                                5 => 6,
                                6 => 7,
                                7 => 8,
                                8 => 9,
                            ),
                            'RawData' => '010203040506070809',
                            'Type' => 'REPLY',
                            'Reply' => null,
                            'Checksum' => '0C',
                            'CalcChecksum' => '0C',
                        ),
                        'Checksum' => '70',
                        'CalcChecksum' => '50',
                    ),
                    'command' => '55',
                    'dataIndex' => '1',
                ),
            ),
            array(
                0x000025,
                "000000000100392601500039260150010203FFFFFF10",
                "",
                "5A5A5A5500002500002000505A5A5A550000250000200050"
                    ."5A5A5A0300002500002000065A5A5A550000250000200050",
                false,
                array(
                    "PacketTimeout" => 1,
                ),
                null,
                1,
                array(
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $id         The Device ID to pretend to be
    * @param string $string     The string for the dummy device to return
    * @param string $read       The read string to put in
    * @param string $write      The write string expected
    * @param string $expect     The expected return
    * @param array  $DriverInfo The driver info to use
    * @param string $LastPoll   The time last congig should be set to (regex)
    * @param int    $PollFail   The number of failures to report
    * @param array  $row        The database row inserted
    *
    * @return null
    *
    * @dataProvider dataReadData
    */
    public function testReadData(
        $id, $string, $read, $write, $expect, $DriverInfo, $LastPoll, $PollFail, $row
    ) {
        $this->pdo = &$this->config->servers->getPDO();
        $this->pdo->query("DROP TABLE IF EXISTS `rawHistory`");

        $this->d->id = $id;
        $this->d->DriverInfo = $DriverInfo;
        $this->d->params->DriverInfo["LastPoll"] = $LastPoll;
        $this->socket->readString = $read;
        $ret = $this->o->readData();
        $this->assertSame($write, $this->socket->writeString, "Wrong writeString");
        //$this->assertSame($string, $this->d->string, "Wrong Setup String");
        $this->assertSame($expect, $ret, "Wrong return value");
        if (!is_null($LastPoll)) {
            $this->assertThat(
                $this->d->params->DriverInfo["LastPoll"],
                $this->greaterThan($LastPoll),
                "LastPoll wrong"
            );
        }
        $this->assertSame(
            $PollFail,
            $this->d->params->DriverInfo["PollFail"],
            "PollFail wrong"
        );
        if ($expect) {
            $stmt = $this->pdo->query("SELECT * FROM `rawHistory` WHERE id=".$id);
            $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $rht = new RawHistoryTable($rows[0]);
            $raw = $rht->toArray();
            unset($raw["Date"]);
            unset($raw["packet"]["Date"]);
            unset($raw["packet"]["Time"]);
            unset($raw["packet"]["Reply"]["Date"]);
            unset($raw["packet"]["Reply"]["Time"]);
            unset($raw["devicesHistoryDate"]);
            $this->assertSame($row, $raw, "Inserted Row Wrong");
        }
    }
    /**
    * data provider for testReadCalibration
    *
    * @return array
    */
    public static function dataReadCalibration()
    {
        return array(
            array(
                "000025",
                (string)new PacketContainer(array(
                    "From" => "000025",
                    "To" => "000020",
                    "Command" => PacketContainer::COMMAND_REPLY,
                    "Data" => "06070809",
                )),
                (string)new PacketContainer(array(
                    "To" => "000025",
                    "From" => "000020",
                    "Command" => PacketContainer::COMMAND_GETCALIBRATION,
                    "Data" => "",
                )),
                true,
            ),
            array(
                "000025",
                "",
                "5A5A5A4C00002500002000495A5A5A4C0000250000200049"
                    ."5A5A5A0300002500002000065A5A5A4C0000250000200049",
                false,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $id     The Device ID to pretend to be
    * @param string $read   The read string to put in
    * @param string $write  The write string expected
    * @param string $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataReadCalibration
    */
    public function testReadCalibration($id, $read, $write, $expect)
    {
        $this->d->id = hexdec($id);
        $this->d->DeviceID = $id;
        $this->d->DriverInfo["PacketTimeout"] = 1;
        $this->socket->readString = $read;
        $ret = $this->o->readCalibration();
        $this->assertSame($write, $this->socket->writeString, "Wrong writeString");
        $this->assertSame($expect, $ret, "Wrong return value");
    }

    /**
    * test the return of toString
    *
    * @return null
    */
    public function testToString()
    {
        $this->assertSame("", $this->o->toSetupString());
    }
    /**
    * data provider for testCompareFWVesrion
    *
    * @return array
    */
    public static function dataReadSetupTime()
    {
        return array(
            array("now", array(), 10, false),
            array("2004-01-01 00:00:00", array(), 12, true),
            array(time()-3600, array(), 1, true),
            array(
                time()-86400,
                array("ConfigFail" => 60, "LastConfigTry" => "now"),
                12,
                false,
            ),
            array(
                time() + (10*86400),
                array(),
                12,
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param string $lastConfig The last config date
    * @param array  $persist    The persistant information from the driver
    * @param int    $interval   The second version
    * @param bool   $expect     What to expect
    *
    * @return null
    *
    * @dataProvider dataReadSetupTime
    */
    function testReadSetupTime($lastConfig, $persist, $interval, $expect)
    {
        $this->d->params->DriverInfo = $persist;
        if ($lastConfig === "now") {
            $this->d->params->DriverInfo["LastConfig"] = time();
        } else {
            $this->d->params->DriverInfo["LastConfig"] = $lastConfig;
        }
        if ($this->d->params->DriverInfo["LastConfigTry"] === "now") {
            $this->d->params->DriverInfo["LastConfigTry"] = time();
        }
        $ret = $this->o->readSetupTime($interval);
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testReadDataTime
    *
    * @return array
    */
    public static function dataReadDataTime()
    {
        return array(
            array(time(), array(), 100, false),
            array("2004-01-01 00:00:00", array(), 10, true),
            array("2004-01-01 00:00:00", array(), 0, false),
            array(time()-3600, array(), 10, true),
            array(
                time()-86400,
                array("PollFail" => 60, "LastPollTry" => (time() + 300)),
                12,
                false,
            ),
            array(
                time() + (10*86400),
                array(),
                12,
                true,
            ),
        );
    }
    /**
    * test
    *
    * @param string $lastPoll The last config date
    * @param array  $persist  The persistant information from the driver
    * @param int    $interval The second version
    * @param bool   $expect   What to expect
    *
    * @return null
    *
    * @dataProvider dataReadDataTime
    */
    function testReadDataTime($lastPoll, $persist, $interval, $expect)
    {
        $this->d->params->DriverInfo = $persist;
        $this->d->params->DriverInfo["LastPoll"] = $lastPoll;
        $this->d->PollInterval = $interval;
        $ret = $this->o->readDataTime();
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testReadSetupTimeReset
    *
    * @return array
    */
    public static function dataReadSetupTimeReset()
    {
        return array(
            array(date("Y-m-d H:i:s"), array()),
            array("2004-01-01 00:00:00", array()),
            array(date("Y-m-d H:i:s", time()-3600), array()),
        );
    }
    /**
    * test
    *
    * @param string $lastConfig The last config date
    * @param array  $persist    The persistant information from the driver
    *
    * @return null
    *
    * @dataProvider dataReadSetupTimeReset
    */
    function testReadSetupTimeReset($lastConfig, $persist)
    {
        $this->d->params->DriverInfo = $persist;
        $this->d->params->DriverInfo["LastConfig"] = $lastConfig;
        $this->o->readSetupTimeReset();
        $this->assertSame(0, $this->d->params->DriverInfo["LastConfig"]);
        $this->assertSame(0, $this->d->params->DriverInfo["LastConfigTry"]);
        $this->assertSame(0, $this->d->params->DriverInfo["ConfigFail"]);
    }
    /**
    * data provider for testReadDataTimeReset
    *
    * @return array
    */
    public static function dataReadDataTimeReset()
    {
        return array(
            array(date("Y-m-d H:i:s"), array()),
            array("2004-01-01 00:00:00", array()),
            array(date("Y-m-d H:i:s", time()-3600), array()),
        );
    }
    /**
    * test
    *
    * @param string $lastPoll The last config date
    * @param array  $persist  The persistant information from the driver
    *
    * @return null
    *
    * @dataProvider dataReadDataTimeReset
    */
    function testReadDataTimeReset($lastPoll, $persist)
    {
        $this->d->params->DriverInfo = $persist;
        $this->d->params->DriverInfo["LastPoll"] = $lastConfig;
        $this->o->readDataTimeReset();
        $this->assertSame(0, $this->d->params->DriverInfo["LastPoll"]);
        $this->assertSame(0, $this->d->params->DriverInfo["LastPollTry"]);
        $this->assertSame(0, $this->d->params->DriverInfo["PollFail"]);
    }
    /**
    * data provider for testSendPkt
    *
    * @return array
    */
    public static function dataSendPkt()
    {
        return array(
            // Everything works
            array(
                PacketContainer::COMMAND_READFLASH,
                "010203040506",
                true,
                0,
                "",
                "",
                false,
            ),
            // Everything works
            array(
                PacketContainer::COMMAND_READFLASH,
                "010203040506",
                true,
                0x123,
                (string) new PacketContainer(
                    array(
                        "From" => "000123",
                        "To" => "000020",
                        "Command" => PacketContainer::COMMAND_REPLY,
                        "Data" => "060504030201",
                    )
                ),
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "010203040506",
                    )
                ),
                "060504030201",
            ),
            // Everything works
            array(
                PacketContainer::COMMAND_READFLASH,
                "010203040506",
                true,
                "291",
                (string) new PacketContainer(
                    array(
                        "From" => "000123",
                        "To" => "000020",
                        "Command" => PacketContainer::COMMAND_REPLY,
                        "Data" => "060504030201",
                    )
                ),
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "010203040506",
                    )
                ),
                "060504030201",
            ),
            // reply not expected
            array(
                PacketContainer::COMMAND_READFLASH,
                "010203040506",
                false,
                0x000123,
                "",
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "010203040506",
                    )
                ),
                true,
            ),
            // No Reply
            array(
                PacketContainer::COMMAND_READFLASH,
                "000020",
                true,
                0x000123,
                "",
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_FINDECHOREQUEST,
                        "Data" => "",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "000020",
                    )
                ),
                false,
                1,
            ),
        );
    }
    /**
    * test
    *
    * @param string $command The address to write to
    * @param string $data    The hexified data string to send to it
    * @param bool   $reply   Whether to expect a reply or not
    * @param string $devID   The deviceID to use
    * @param string $read    The read string
    * @param string $write   The write string
    * @param bool   $expect  The expected return value
    * @param int    $timeout The packet timeout to use.  0 == default
    *
    * @return null
    *
    * @dataProvider dataSendPkt
    */
    function testSendPkt(
        $command, $data, $reply, $devID, $read, $write, $expect, $timeout = 0
    ) {
        $this->d->DriverInfo["PacketTimeout"] = $timeout;
        $this->d->id = $devID;
        $this->socket->readString = $read;
        $ret = $this->o->sendPkt($command, $data, $reply);
        $this->assertSame($write, $this->socket->writeString, "Write string wrong");
        $this->assertSame($expect, $ret, "Return value is wrong");
    }
    /**
    * data provider for testReadFlash
    *
    * @return array
    */
    public static function dataReadFlash()
    {
        return array(
            // Everything works
            array(
                10,
                6,
                "000123",
                (string) new PacketContainer(
                    array(
                        "From" => "000123",
                        "To" => "000020",
                        "Command" => PacketContainer::COMMAND_REPLY,
                        "Data" => "010203040506",
                    )
                ),
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "000A06",
                    )
                ),
                "010203040506",
            ),
            // No Reply
            array(
                0,
                32,
                "000123",
                "",
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_FINDECHOREQUEST,
                        "Data" => "",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READFLASH,
                        "Data" => "000020",
                    )
                ),
                false,
                1,
            ),
        );
    }
    /**
    * test
    *
    * @param int    $addr    The address to write to
    * @param int    $length  The hexified data string to send to it
    * @param string $devID   The deviceID to use
    * @param string $read    The read string
    * @param string $write   The write string
    * @param bool   $expect  The expected return value
    * @param int    $timeout The packet timeout to use.  0 == default
    *
    * @return null
    *
    * @dataProvider dataReadFlash
    */
    function testReadFlash(
        $addr, $length, $devID, $read, $write, $expect, $timeout = 0
    ) {
        $this->d->DriverInfo["PacketTimeout"] = $timeout;
        $this->d->id = hexdec($devID);
        $this->d->DeviceID = $devID;
        $this->socket->readString = $read;
        $ret = $this->o->readFlash($addr, $length);
        $this->assertSame($write, $this->socket->writeString, "Write string wrong");
        $this->assertSame($expect, $ret, "Return value is wrong");
    }
    /**
    * data provider for testReadSRAM
    *
    * @return array
    */
    public static function dataReadSRAM()
    {
        return array(
            // Everything works
            array(
                10,
                6,
                "000123",
                (string) new PacketContainer(
                    array(
                        "From" => "000123",
                        "To" => "000020",
                        "Command" => PacketContainer::COMMAND_REPLY,
                        "Data" => "010203040506",
                    )
                ),
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READSRAM,
                        "Data" => "000A06",
                    )
                ),
                "010203040506",
            ),
            // No Reply
            array(
                0,
                32,
                "000123",
                "",
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READSRAM,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READSRAM,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_FINDECHOREQUEST,
                        "Data" => "",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READSRAM,
                        "Data" => "000020",
                    )
                ),
                false,
                1,
            ),
        );
    }
    /**
    * test
    *
    * @param int    $addr    The address to write to
    * @param int    $length  The hexified data string to send to it
    * @param string $devID   The deviceID to use
    * @param string $read    The read string
    * @param string $write   The write string
    * @param bool   $expect  The expected return value
    * @param int    $timeout The packet timeout to use.  0 == default
    *
    * @return null
    *
    * @dataProvider dataReadSRAM
    */
    function testReadSRAM(
        $addr, $length, $devID, $read, $write, $expect, $timeout = 0
    ) {
        $this->d->DriverInfo["PacketTimeout"] = $timeout;
        $this->d->id = hexdec($devID);
        $this->d->DeviceID = $devID;
        $this->socket->readString = $read;
        $ret = $this->o->readSRAM($addr, $length);
        $this->assertSame($write, $this->socket->writeString, "Write string wrong");
        $this->assertSame($expect, $ret, "Return value is wrong");
    }
    /**
    * data provider for testReadE2
    *
    * @return array
    */
    public static function dataReadE2()
    {
        return array(
            // Everything works
            array(
                10,
                6,
                "000123",
                (string) new PacketContainer(
                    array(
                        "From" => "000123",
                        "To" => "000020",
                        "Command" => PacketContainer::COMMAND_REPLY,
                        "Data" => "010203040506",
                    )
                ),
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READE2,
                        "Data" => "000A06",
                    )
                ),
                "010203040506",
            ),
            // No Reply
            array(
                0,
                32,
                "000123",
                "",
                (string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READE2,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READE2,
                        "Data" => "000020",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_FINDECHOREQUEST,
                        "Data" => "",
                    )
                )
                .(string) new PacketContainer(
                    array(
                        "To" => "000123",
                        "From" => "000020",
                        "Command" => PacketContainer::COMMAND_READE2,
                        "Data" => "000020",
                    )
                ),
                false,
                1,
            ),
        );
    }
    /**
    * test
    *
    * @param int    $addr    The address to write to
    * @param int    $length  The hexified data string to send to it
    * @param string $devID   The deviceID to use
    * @param string $read    The read string
    * @param string $write   The write string
    * @param bool   $expect  The expected return value
    * @param int    $timeout The packet timeout to use.  0 == default
    *
    * @return null
    *
    * @dataProvider dataReadE2
    */
    function testReadE2(
        $addr, $length, $devID, $read, $write, $expect, $timeout = 0
    ) {
        $this->d->DriverInfo["PacketTimeout"] = $timeout;
        $this->d->id = hexdec($devID);
        $this->d->DeviceID = $devID;
        $this->socket->readString = $read;
        $ret = $this->o->readE2($addr, $length);
        $this->assertSame($write, $this->socket->writeString, "Write string wrong");
        $this->assertSame($expect, $ret, "Return value is wrong");
    }

    /**
    * data provider for testSensorStringToInt
    *
    * @return array
    */
    public static function dataSensorStringToInt()
    {
        return array(
            array("000001", 65536),
            array("000100", 256),
            array("010000", 1),
            array("010101", 65793),
        );
    }
    /**
    * test
    *
    * @param string $string The string to feed the function
    * @param int    $int    The integer to expect in return
    *
    * @return null
    *
    * @dataProvider dataSensorStringToInt
    */
    function testSensorStringToInt($string, $int)
    {
        $this->assertSame($int, $this->o->sensorStringToInt($string));
    }

    /**
    * data provider for testSensorStringArrayToInts
    *
    * @return array
    */
    public static function dataSensorStringArrayToInts()
    {
        return array(
            array(
                array("000001", "000100", "010000", "010101"),
                array(65536, 256, 1, 65793),
            ),
        );
    }
    /**
    * test
    *
    * @param array $array  The array of strings to feed the function
    * @param array $expect The array of integers to expect in return
    *
    * @return null
    *
    * @dataProvider dataSensorStringArrayToInts
    */
    function testSensorStringArrayToInts($array, $expect)
    {
        $this->assertSame($expect, $this->o->sensorStringArrayToInts($array));
    }

    /**
    * data provider for testDataIndex
    *
    * @return array
    */
    public static function dataDataIndex()
    {
        return array(
            array(
                "0001020304",
                0
            ),
            array(
                "110506",
                17
            ),
        );
    }
    /**
    * test
    *
    * @param string $string The data string
    * @param array  $expect The integer to expect in return
    *
    * @return null
    *
    * @dataProvider dataDataIndex
    */
    function testDataIndex($string, $expect)
    {
        $this->assertSame($expect, $this->o->dataIndex($string));
    }

    /**
    * data provider for testTimeConstant
    *
    * @return array
    */
    public static function dataTimeConstant()
    {
        return array(
            array(
                "0001020304",
                2
            ),
            array(
                "11050001020304",
                5
            ),
        );
    }
    /**
    * test
    *
    * @param string $string The data string
    * @param array  $expect The integer to expect in return
    *
    * @return null
    *
    * @dataProvider dataTimeConstant
    */
    function testTimeConstant($string, $expect)
    {
        $this->assertSame($expect, $this->o->timeConstant($string));
    }

    /**
    * data provider for testSensorData
    *
    * @return array
    */
    public static function dataSensorData()
    {
        return array(
            array(
                "000102000001000100010000010101",
                array(65536, 256, 1, 65793),
            ),
            array(
                "110500010203040506",
                array(197121, 394500)
            ),
        );
    }
    /**
    * test
    *
    * @param string $string The data string
    * @param array  $expect The integer to expect in return
    *
    * @return null
    *
    * @dataProvider dataSensorData
    */
    function testSensorData($string, $expect)
    {
        $this->assertSame($expect, $this->o->sensorData($string));
    }
    /**
    * Data provider for testLostContact
    *
    * @return array
    */
    public static function dataLostContact()
    {
        return array(
            array(array(), -4000, true),
            array(array(), 0, false),
        );
    }
    /**
    * test
    *
    * @param array $dev        The device to use
    * @param int   $timeOffset The offset in time to use
    * @param bool  $expect     The return value
    *
    * @return null
    *
    * @dataProvider dataLostContact
    */
    public function testLostContact($dev, $timeOffset, $expect)
    {
        $this->d->params->LastContact = time() + $timeOffset;
        $this->assertSame($expect, $this->o->lostContact());
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataDecodeData()
    {
        return array(
            array(
                array(
                    "DriverInfo" => array(
                        "PhysicalSensors" => 6,
                        "VirtualSensors" => 0,
                    ),
                    "sensors" => array(
                        "Sensors" => 6,
                        0 => array(
                        ),
                        1 => array(
                        ),
                        2 => array(
                            "id" => 2,
                            "dataType" => UnitsBase::TYPE_DIFF,
                        ),
                        3 => array(
                        ),
                        4 => array(
                        ),
                        5 => array(
                        ),
                     ),
                ),
                "7F0005020000040000080000100000200000400000",
                PacketContainer::COMMAND_GETDATA,
                1,
                array(null,null, 2, null, null, null),
                array(
                    "deltaT" => 1,
                    0 => array(
                        "value" => 1,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => UnitsBase::TYPE_RAW,
                    ),
                    1 => array(
                        "value" => 2,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => UnitsBase::TYPE_RAW,
                    ),
                    2 => array(
                        "value" => 12,
                        "raw" => 8,
                        "units" => "anotherUnit",
                        "unitType" => "secondUnit",
                        "dataType" => UnitsBase::TYPE_DIFF,
                    ),
                    3 => array(
                        "value" => 8,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => UnitsBase::TYPE_RAW,
                    ),
                    4 => array(
                        "value" => 16,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => UnitsBase::TYPE_RAW,
                    ),
                    5 => array(
                        "value" => 32,
                        "units" => "testUnit",
                        "unitType" => "firstUnit",
                        "dataType" => UnitsBase::TYPE_RAW,
                    ),
                    "DataIndex" => 127,
                    "timeConstant" => 5,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $device  The device preload
    * @param string $data    The raw data
    * @param string $command The command that was used to get the data
    * @param float  $deltaT  The time difference between this packet and the next
    * @param float  $prev    The previous record
    * @param array  $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataDecodeData
    */
    public function testDecodeData($device, $data, $command, $deltaT, $prev, $expect)
    {
        $this->d = new DeviceContainer($device);
        $this->o = new TestDevice($this->d);
        $ret = $this->o->decodeData($data, $command, $deltaT, $prev);
        $this->assertSame($expect, $ret, "Arrays are not the same");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToOutput()
    {
        return array(
            array(
                array(
                    "LastContact" => 1234,
                    "LastModified" => 4321,
                    "LastModifiedBy" => "Me",
                    "DriverInfo" => array(
                        "Test" => "one",
                        "Test2" => "two",
                        "PhysicalSensors" => 1,
                        "VirtualSensors" => 5,
                    ),
                ),
                null,
                array(
                    "Test" => "one",
                    "Test2" => "two",
                    "PhysicalSensors" => 1,
                    "VirtualSensors" => 5,
                    "RawDriverInfo" => "",
                    "TimeConstant" => 0,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $device The data to preload into the class
    * @param array  $cols   The columns to use
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataToOutput
    */
    public function testToOutput($device, $cols, $expect)
    {
        $this->d = new DeviceContainer($device);
        $this->o = new TestDevice($this->d);
        $ret = $this->o->toOutput($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToOutputHeader()
    {
        return array(
            array(
                array(),
                null,
                array(
                    "PhysicalSensors" => "Physical Sensors",
                    "VirtualSensors" => "Virtual Sensors",
                ),
            ),
            array(
                array(),
                array(
                    "test" => "Column 1",
                    "test2" => "Column 2",
                ),
                array(
                    "test" => "Column 1",
                    "test2" => "Column 2",
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $device The data to preload into the class
    * @param array  $cols   The columns to use
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataToOutputHeader
    */
    public function testToOutputHeader($device, $cols, $expect)
    {
        $this->d = new DeviceContainer($device);
        $this->o = new TestDevice($this->d);
        $ret = $this->o->toOutputHeader($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutputParams()
    {
        return array(
            array(
                array(),
                null,
                array(
                ),
                array(),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $device The data to preload into the class
    * @param string $type   The output type
    * @param array  $cols   The columns to use
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataOutputParams
    */
    public function testOutputParams($device, $type, $cols, $expect)
    {
        $this->d = new DeviceContainer($device);
        $this->o = new TestDevice($this->d);
        $ret = $this->o->outputParams($type, $cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataOutputFilters()
    {
        return array(
            array(
                array(),
                array(
                ),
                array(),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $device The data to preload into the class
    * @param array  $cols   The columns to use
    * @param int    $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataOutputFilters
    */
    public function testOutputFilters($device, $cols, $expect)
    {
        $this->d = new DeviceContainer($device);
        $this->o = new TestDevice($this->d);
        $ret = $this->o->outputFilters($cols);
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testOutputFactory
    *
    * @return array
    */
    public static function dataOutputFactory()
    {
        return array(
            array(
                "TestDevice",
                array(
                    "type" => "hello",
                ),
                array(
                    "type" => "hello",
                    "iterate" => true,
                ),
            ),
        );
    }

    /**
    * test the register function
    *
    * @param string $class      The class or object to use
    * @param array  $data       The data to feed to the outputcontainer class
    * @param array  $expectData The data to expect in the outputcontainer class
    *
    * @return null
    *
    * @dataProvider dataOutputFactory
    */
    public function testOutputFactory($class, $data, $expectData)
    {
        $this->d = new DeviceContainer($device);
        $o = new $class($this->d);
        $ret = &$o->outputFactory($data);
        $this->assertSame("OutputContainer", get_class($ret), "Class is wrong");
        $this->assertAttributeSame($o, "container", $ret, "Container is wrong");
        $this->assertAttributeSame($expectData, "data", $ret, "Data is wrong");
    }

}
/**
* Driver for the polling script (0039-26-01-P)
*
* @category   Drivers
* @package    HUGnetLib
* @subpackage Endpoints
* @author     Scott Price <prices@hugllc.com>
* @copyright  2007-2011 Hunt Utilities Group, LLC
* @copyright  2009 Scott Price
* @license    http://opensource.org/licenses/gpl-license.php GNU Public License
* @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
*/
class TestDevice extends DeviceDriverBase
    implements DeviceDriverInterface
{
    /** @var This is to register the class */
    public static $registerPlugin = array(
        "Name" => "testDevice",
        "Type" => "device",
        "Class" => "TestDevice",
        "Devices" => array(
            "DEFAULT" => array(
                "DEFAULT" => "DEFAULT",
            ),
        ),
    );
    /**
    * Builds the class
    *
    * @param object &$obj   The object that is registering us
    * @param mixed  $string The string we will use to build the object
    *
    * @return null
    */
    public function __construct(&$obj, $string = "")
    {
        parent::__construct($obj, $string);
        $this->fromSetupString($string);
    }
    /**
    * Reads the setup out of the device
    *
    * @return bool True on success, False on failure
    */
    public function readConfig()
    {
        return parent::readConfig();
    }
    /**
    * Reads the calibration out of the device
    *
    * @return bool True on success, False on failure
    */
    public function readCalibration()
    {
        return parent::readCalibration();
    }
    /**
    * reads a block of flash
    *
    * @param int $addr   The start address of this block
    * @param int $length The length to read.  0-255
    *
    * @return true on success, false on failure
    */
    public function readSRAM($addr, $length)
    {
        return parent::readSRAM($addr, $length);
    }
    /**
    * reads a block of flash
    *
    * @param int $addr   The start address of this block
    * @param int $length The length to read.  0-255
    *
    * @return true on success, false on failure
    */
    public function readFlash($addr, $length)
    {
        return parent::readFlash($addr, $length);
    }

    /**
    * Reads a block of E2
    *
    * @param int $addr   The start address of this block
    * @param int $length The length to read.  0-255
    *
    * @return true on success, false on failure
    */
    public function readE2($addr, $length)
    {
        return parent::readE2($addr, $length);
    }
    /**
    * Deals with memory.  This will read and write to any type of memory
    *
    * @param string $command The command to use
    * @param string $data    The data to use
    * @param bool   $reply   Wait for a reply
    *
    * @return true on success, false on failure
    */
    public function sendPkt($command, $data = "", $reply = true)
    {
        return parent::sendPkt($command, $data, $reply);
    }
    /**
    * Takes in a raw string from a sensor and makes an int out it
    *
    * The sensor data is stored little-endian, so it just takes that and adds
    * the bytes together.
    *
    * @param string $string The string to convert
    *
    * @return int
    */
    public function sensorStringToInt($string)
    {
        return parent::sensorStringToInt($string);
    }
    /**
    * Takes in an array of raw strings and returns an array of integers
    *
    * @param array $array The array of sensor strings to convert.
    *
    * @return array of ints
    */
    public function sensorStringArrayToInts($array)
    {
        return parent::sensorStringArrayToInts($array);
    }
}

?>
