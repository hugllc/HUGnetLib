<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../base/HUGnetContainerLinkedList.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerLinkedListTest extends PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        // Stand alone
        $this->o = new HUGnetContainerLinkedListTestClass();

        // 7 link chain
        for ($i = 0; $i < 7; $i++) {
            $link = "link".$i;
            $this->$link = new HUGnetContainerLinkedListTestClass();
            if ($prev != null) {
                $this->$link->prev = &$prev;
                $prev->next = $this->$link;
            }
            $prev = & $this->$link;
        }
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        for ($i = 0; $i < 7; $i++) {
            $link = "link".$i;
            $this->$link = null;
        }
        $this->o = null;
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataLinkNext()
    {
        return array(
            array(
                "o",
                "HUGnetContainerLinkedListTestClass",
                true,
            ),
            array(
                "link3",
                "HUGnetContainerLinkedListTestClass",
                false,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $var    The variable to find the class in
    * @param string $class  The class to expect
    * @param bool   $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataLinkNext
    */
    public function testLinkNext(
        $var,
        $class,
        $expect
    ) {
        $ret = $this->$var->linkNext();
        $this->assertSame($expect, $ret);
        $this->assertSame($class, get_class($this->$var->next));
        $this->assertSame($this->$var->next->prev, $this->$var);
    }

    /**
    * data provider for testLinkPrev
    *
    * @return array
    */
    public static function dataLinkPrev()
    {
        return array(
            array(
                "o",
                "HUGnetContainerLinkedListTestClass",
                true,
            ),
            array(
                "link3",
                "HUGnetContainerLinkedListTestClass",
                false,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $var    The variable to find the class in
    * @param string $class  The class to expect
    * @param bool   $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataLinkPrev
    */
    public function testLinkPrev(
        $var,
        $class,
        $expect
    ) {
        $ret = $this->$var->linkPrev();
        $this->assertSame($expect, $ret);
        $this->assertSame($class, get_class($this->$var->prev));
        $this->assertSame($this->$var->prev->next, $this->$var);
    }

    /**
    * data provider for testLinkPrev
    *
    * @return array
    */
    public static function dataBreakNext()
    {
        return array(
            array(
                "o",
                false,
                true,
            ),
            array(
                "link3",
                false,
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $var    The variable to find the class in
    * @param string $class  The class to expect
    * @param bool   $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataBreakNext
    */
    public function testBreakNext(
        $var,
        $class,
        $expect
    ) {
        $ret = $this->$var->breakNext();
        $this->assertSame($expect, $ret);
        $this->assertSame(
            $class,
            is_object($this->$var->next) && get_class($this->$var->next)
        );
        $this->assertNull($this->$var->next);
    }
    /**
    * data provider for testLinkPrev
    *
    * @return array
    */
    public static function dataBreakPrev()
    {
        return array(
            array(
                "o",
                false,
                true,
            ),
            array(
                "link3",
                false,
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $var    The variable to find the class in
    * @param string $class  The class to expect
    * @param bool   $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataBreakPrev
    */
    public function testBreakPrev(
        $var,
        $class,
        $expect
    ) {
        $ret = $this->$var->breakPrev();
        $this->assertSame($expect, $ret);
        $this->assertSame(
            $class,
            is_object($this->$var->prev) && get_class($this->$var->prev)
        );
        $this->assertNull($this->$var->prev);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataInsertNext()
    {
        return array(
            array(
                "o",
                "HUGnetContainerLinkedListTestClass",
                true,
            ),
            array(
                "link3",
                "HUGnetContainerLinkedListTestClass",
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $var    The variable to find the class in
    * @param string $class  The class to expect
    * @param bool   $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataInsertNext
    */
    public function testInsertNext(
        $var,
        $class,
        $expect
    ) {
        if (!is_null($this->$var->next)) {
            $next = &$this->$var->next;
        }
        $ret = $this->$var->insertNext();
        $this->assertSame($expect, $ret);
        $this->assertSame($class, get_class($this->$var->next), "Wrong Class");
        $this->assertSame($this->$var->next->prev, $this->$var, "next->prev wrong");
        $this->assertSame($next, $this->$var->next->next, "next->next wrong");
        if (!is_null($this->$var->next->next->prev)) {
            $this->assertSame(
                $this->$var->next,
                $this->$var->next->next->prev,
                "next->next->prev wrong"
            );
        }
    }

    /**
    * data provider for testLinkPrev
    *
    * @return array
    */
    public static function dataInsertPrev()
    {
        return array(
            array(
                "o",
                "HUGnetContainerLinkedListTestClass",
                true,
            ),
            array(
                "link3",
                "HUGnetContainerLinkedListTestClass",
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $var    The variable to find the class in
    * @param string $class  The class to expect
    * @param bool   $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataInsertPrev
    */
    public function testInsertPrev(
        $var,
        $class,
        $expect
    ) {
        if (!is_null($this->$var->prev)) {
            $prev = &$this->$var->prev;
        }
        $ret = $this->$var->insertPrev();
        $this->assertSame($expect, $ret);
        $this->assertSame($class, get_class($this->$var->prev), "Wrong Class");
        $this->assertSame($this->$var->prev->next, $this->$var, "next->prev wrong");
        $this->assertSame($prev, $this->$var->prev->prev, "next->next wrong");
        if (!is_null($this->$var->prev->prev->next)) {
            $this->assertSame(
                $this->$var->next,
                $this->$var->next->next->prev,
                "next->next->prev wrong"
            );
        }
    }

    /**
    * data provider for testLinkPrev
    *
    * @return array
    */
    public static function dataRemoveNext()
    {
        return array(
            array(
                "o",
                true,
            ),
            array(
                "link3",
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $var    The variable to find the class in
    * @param bool  $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataRemoveNext
    */
    public function testRemoveNext(
        $var,
        $expect
    ) {
        if (!is_null($this->$var->next)) {
            $next = &$this->$var->next->next;
        }
        $ret = $this->$var->removeNext();
        $this->assertSame($expect, $ret);
        if (!is_null($this->$var->next)) {
            $this->assertSame(
                $this->$var->next->prev,
                $this->$var,
                "prev->next wrong"
            );
        }
        $this->assertSame($next, $this->$var->next, "next wrong");
    }
    /**
    * data provider for testLinkPrev
    *
    * @return array
    */
    public static function dataRemovePrev()
    {
        return array(
            array(
                "o",
                true,
            ),
            array(
                "link3",
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $var    The variable to find the class in
    * @param bool  $expect The return value to expect
    *
    * @return null
    *
    * @dataProvider dataRemovePrev
    */
    public function testRemovePrev(
        $var,
        $expect
    ) {
        if (!is_null($this->$var->prev)) {
            $prev = &$this->$var->prev->prev;
        }
        $ret = $this->$var->removePrev();
        $this->assertSame($expect, $ret);
        if (!is_null($this->$var->prev)) {
            $this->assertSame(
                $this->$var->prev->next,
                $this->$var,
                "prev->next wrong"
            );
        }
        $this->assertSame($prev, $this->$var->prev, "prev wrong");
    }

    /**
    * data provider for testLinkPrev
    *
    * @return array
    */
    public static function dataFirstLastNextPrev()
    {
        return array(
            array(
                "first",
                "o",
                "o",
            ),
            array(
                "first",
                "link3",
                "link0",
            ),
            array(
                "last",
                "o",
                "o",
            ),
            array(
                "last",
                "link3",
                "link6",
            ),
            array(
                "next",
                "o",
                null,
            ),
            array(
                "next",
                "link3",
                "link4",
            ),
            array(
                "prev",
                "o",
                null,
            ),
            array(
                "prev",
                "link3",
                "link2",
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $fct    The function to call
    * @param object $var    The variable to find the class in
    * @param object $expect The variable it should return a pointer to
    *
    * @return null
    *
    * @dataProvider dataFirstLastNextPrev
    */
    public function testFirstLastNextPrev(
        $fct,
        $var,
        $expect
    ) {
        $ret = $this->$var->$fct();
        if (is_null($expect)) {
            $this->assertNull($ret);
        } else {
            $this->assertSame($this->$expect, $ret);
        }
    }

}
/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetContainerLinkedListTestClass extends HUGnetContainerLinkedList
{
    /** These are the endpoint information bits */
    /** @var array This is the default values for the data */
    protected $default = array(
        "Attrib1" => 0,
        "Attrib2" => "Default",
        "Attrib3" => "Data",
        "Attrib4" => array("Hello"),
    );
    /** @var array This is where the data is stored */
    protected $data = array();

    /**
    * function to check Attrib1
    *
    * @return null
    */
    protected function attrib1()
    {
        $this->Attrib1 = (int) $this->Attrib1;
    }

}


?>
