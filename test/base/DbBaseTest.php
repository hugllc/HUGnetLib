<?php
// Call DbBaseTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'DbBaseTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../base/DbBase.php';

/**
 * Test class for DbBase.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 */
class DbBaseTest extends PHPUnit_Framework_TestCase
{
    /** @var object PDO object */
    protected $pdo;
    
    /**
     * @var    DbBase
     * @access protected
     */
    protected $o;

    /**
     * The name of the table we are using
     */
    protected $table = "DbBaseTest";
    
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite($this->table);
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->pdo = new PDO('sqlite::memory');
        $this->createTable();
        $this->o = new DbBase($this->pdo, "DbBaseTest");

        // Clear out the database
        $this->pdo->query("DELETE FROM ".$this->table);
    }

    protected function createTable() 
    {
        $query = "CREATE TABLE `".$this->table."` (
              `id` int(11) NOT null,
              `name` varchar(16) NOT null default '',
              `value` text NOT null,
              PRIMARY KEY  (`id`)
            );";

        $ret = $this->pdo->query($query);    
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
        $this->pdo->query("DROP TABLE ".$this->table);
        unset($this->pdo);
        unset($this->o);
    }

    /**
     *  This pre-loads two rows into the database into the database
     */
    protected function load($values)
    {
        $query  = "INSERT INTO ".$this->table." (id, name, value) VALUES(?, ?, ?);";
        $res = $this->pdo->prepare($query);
        if (!is_object($res)) return;
        foreach($values as $val) {
            $res->execute($val);
        }
    }

    /**
     *  Gets a record from the database
     */
    protected function getSingle($id)
    {
        $ret = $this->pdo->query("SELECT * from ".$this->table." WHERE id=".(int)$id.";");
        if (!is_object($ret)) return array();
        $ret = $ret->fetchAll(PDO::FETCH_ASSOC);
        return $ret[0];
    }
    /**
     * @todo Implement testCreateCache().
     */
    public function testCreateCache() 
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Gets all of the database records
     *
     * @return array
     */
    private function _getAll() 
    {
        $query = "SELECT * FROM ".$this->table.";";
        $res = $this->pdo->query($query);
        if (!is_object($res)) return false;
        return $res->fetchAll(PDO::FETCH_ASSOC);    
    }


    /**
     * Tests if getColumns works correctly
     */
    public function testGetColumns() {
        $expect = array(
            "id" => "int(11)",
            "name" => "varchar(16)",
            "value" => "text",
        );
        $actual = $this->readAttribute($this->o, "fields");
        $this->assertSame($expect, $actual);
    }

    /**
     * Data provider for testAddArray
     */
    public static function dataAddArray() 
    {
        return array(
            array(
                array(),
                array(
                    array("id" => 1, "name" => "Hi", "value" => "There"),
                ),
                array(
                    array("id" => "1", "name" => "Hi", "value" => "There"),
                ),
            ),
            array(
                array(),
                array(
                    array("id" => 1, "name" => "Hi",        "value" => "There"   ),
                    array("id" => 2, "name" => "This",      "value" => "is"      ),
                    array("id" => 3, "name" => "Eddie",     "value" => "your"    ),
                    array("id" => 4, "name" => "shipboard", "value" => "computer"),
                ),
                array(
                    array("id" => "1", "name" => "Hi",        "value" => "There"   ),
                    array("id" => "2", "name" => "This",      "value" => "is"      ),
                    array("id" => "3", "name" => "Eddie",     "value" => "your"    ),
                    array("id" => "4", "name" => "shipboard", "value" => "computer"),
                ),
            ),
        );
    }
    /**
     * @dataProvider dataAddArray
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param array $expect  The info to expect returned
     */
    public function testAddArray($preload, $info, $expect) 
    {
        $this->load($preload);
        $this->o->addArray($info);
        $ret = $this->_getAll();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testAdd
     */
    public static function dataAdd() 
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                array("id" => "3", "name" => "Hi", "value" => "There"),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                ),
                array("id" => 1, "name" => "Hi", "value" => "There"),
                array("id" => "1", "name" => "hello", "value" => "there"),
            ),
        );
    }
    /**
     * @dataProvider dataAdd
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param array $expect  The info to expect returned
     */
    public function testAdd($preload, $info, $expect) 
    {
        $this->load($preload);
        $this->o->add($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testAdd
     */
    public static function dataReplace() 
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                array("id" => "3", "name" => "Hi", "value" => "There"),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                ),
                array("id" => 1, "name" => "Bye", "value" => "Now"),
                array("id" => "1", "name" => "Bye", "value" => "Now"),
            ),
        );
    }
    /**
     * @dataProvider dataReplace
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param array $expect  The info to expect returned
     */
    public function testReplace($preload, $info, $expect) 
    {
        $this->load($preload);
        $this->o->replace($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testUpdate
     */
    public static function dataUpdate() 
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                3,
                null,
            ),
            array(
                array(
                    array(1, "hello", "there"),
                ),
                array("id" => 1, "name" => "Bye", "value" => "Now"),
                1,
                array("id" => "1", "name" => "Bye", "value" => "Now"),
            ),
        );
    }
    /**
     * @dataProvider dataUpdate
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param int   $key     The database key to get the record from
     * @param array $expect  The info to expect returned
     */
    public function testUpdate($preload, $info, $key, $expect) 
    {
        $this->load($preload);
        $this->o->update($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testGetAll
     */
    public static function dataGetAll() 
    {
        return array(
            array(
                array(),
                array(),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                ),
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
        );
    }
    /**
     * @dataProvider dataGetAll
     *
     * @param array $preload Data to preload into the database
     * @param array $expect  The info to expect returned
     */
    public function testGetAll($preload, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testGet
     */
    public static function dataGet() 
    {
        return array(
            array(
                array(),
                1,
                array(),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                ),
                1,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                    array(2, "I", "am"),
                    array(3, "taking", "the"),
                    array(4, "trouble", "to"),
                    array(5, "change", "these"),
                ),
                3,
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
                ),
            ),
        );
    }
    /**
     * @dataProvider dataGet
     *
     * @param array $preload Data to preload into the database
     * @param int   $key     The database key to get the record from
     * @param array $expect  The info to expect returned
     */
    public function testGet($preload, $key, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->get($key);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testGetWhere
     */
    public static function dataGetWhere() 
    {
        return array(
            array(
                array(),
                "1",
                null,
                array(),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                ),
                "name = 'hello'",
                null,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                    array(2, "I", "am"),
                    array(3, "taking", "the"),
                    array(4, "trouble", "to"),
                    array(5, "change", "these"),
                ),
                "id = ?",
                array(3),
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
                ),
            ),
        );
    }
    /**
     * @dataProvider dataGetWhere
     *
     * @param array  $preload Data to preload into the database
     * @param string $where   The database key to get the record from
     * @param array  $expect  The info to expect returned
     */
    public function testGetWhere($preload, $where, $data, $expect) 
    {
        $this->load($preload);
        if (!is_null($data)) {
            $ret = $this->o->getWhere($where, $data);
        } else {
            $ret = $this->o->getWhere($where);        
        }
        $this->assertSame($expect, $ret);
    }


    /**
     * @todo Implement testQuery().
     */
    public function testQuery() 
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Data provider for testRemove
     */
    public static function dataRemove() 
    {
        return array(
            array(
                array(),
                1,
                array(),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                ),
                1,
                array(),
            ),
            array(
                array(
                    array(1, "hello", "there"),
                    array(2, "I", "am"),
                    array(3, "taking", "the"),
                    array(4, "trouble", "to"),
                    array(5, "change", "these"),
                ),
                3,
                array(
                    array("id" => "1", "name" => "hello",   "value" => "there"),
                    array("id" => "2", "name" => "I",       "value" => "am"   ),
                    array("id" => "4", "name" => "trouble", "value" => "to"   ),
                    array("id" => "5", "name" => "change",  "value" => "these"),
                ),
            ),
        );
    }
    /**
     * @dataProvider dataRemove
     *
     * @param array $preload Data to preload into the database
     * @param int   $key     The database key to get the record from
     * @param array $expect  The info to expect returned
     */
    public function testRemove($preload, $key, $expect) 
    {
        $this->load($preload);
        $this->o->remove($key);
        $ret = $this->_getAll();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testRemove
     */
    public static function dataVerbose() 
    {
        return array(
            array(0, 0),
            array(15, 15),
            array(false, 0),
            array(true, 1),
        );
    }
    /**
     * @dataProvider dataVerbose
     *
     * @param int $val     The database key to get the record from
     * @param int $expect  The info to expect returned
     */
    public function testVerbose($val, $expect) 
    {
        $this->o->verbose($val);
        $this->assertSame($expect, $this->readAttribute($this->o, "verbose"));
    }


}

// Call DbBaseTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'DbBaseTest::main') {
    DbBaseTest::main();
}
?>
