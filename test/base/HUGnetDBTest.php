<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$    
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
// Call HUGnetDBTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'HUGnetDBTest::main');
}
/** Test framework */
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../base/HUGnetDB.php';
require_once dirname(__FILE__).'/../database/DatabaseTest.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBTest extends databaseTest
{
    /** @var object PDO object */
    protected $pdo;
    
    /**
     * @var    HUGnetDB
     * @access protected
     */
    protected $o;

    /**
     * The name of the table we are using
     */
    protected $table = "HUGnetDBTest";
    
    /**
     * Runs the test methods of this class.
     *
     * @return null
     *
     * @access public
     * @static
     */
    public static function main()
    {
        include_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite($this->table);
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     *
     * @return null
     */
    protected function setUp()
    {
        parent::setUp();
//        $this->o = new HUGnetDBClassTest($this->pdo, $this->table, $this->id);
        $this->o =& HUGnetDB::getInstance("HUGnetDBClassTest", $this->config);
        $this->o->createTable();
        // Clear out the database
        $this->pdo->query("DELETE FROM ".$this->table);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     *
     * @return null
     */
    protected function tearDown()
    {
        if (is_object($this->pdo) && (get_class($this->pdo) == "PDO")) {
            $this->pdo->query("DROP TABLE ".$this->table);
        }
        parent::tearDown();
        unset($this->o);
    }

    /**
     * Data provider for testAddArray
     *
     * @return array
     */
    public static function dataCreatePDO() 
    {
        return array(
            array(array(), "PDO", "sqlite"),
            array(
                array("driver" => "sqlite", "file" => ":memory:"),
                "PDO",
                "sqlite",
            ),
            array(array("driver" => "badPDODriver", "file" => ":memory:"), "PDO", "sqlite"),
        );
    }
    /**
     * Tests to make sure this function fails if
     * someone tries to make a cache from a memory
     * sqlite instance.
     *
     * @param string $config       The configuration to use
     * @param mixed  $expect       The expected value.  Set to FALSE or the class name
     * @param mixed  $expectDriver The expected driver
     *
     * @return null
     *
     * @dataProvider dataCreatePDO()
     */
    public function testCreatePDO($config, $expect, $expectDriver) 
    {
        $o = HUGnetDB::createPDO($config);
        if ($expect === false) {
            $this->assertFalse($o);
        } else {
            $this->assertType("object", $o);
            $this->assertSame($expect, get_class($o));
            $this->assertSame($expectDriver, $o->getAttribute(PDO::ATTR_DRIVER_NAME));
        }
        unset($o);
    }


    /**
     * Tests to make sure this function fails if
     * someone tries to make a cache from a memory
     * sqlite instance.
     *
     * @return null
     */
    public function testCreateCacheMemory() 
    {
        $config = array("file" => ":MeMoRy:");
        $o =& HUGnetDB::getInstance("HUGnetDBClassTest", $config); //new HUGnetDBClassTest($file);
        $ret = $o->createCache();
        $this->assertFalse($ret);
        unset($o);
    }


    /**
     * Tests if getColumns works correctly
     *
     * @return null
     */
    public function testGetColumns() 
    {
        $expect = array(
            "id" => "int(11)",
            "name" => "varchar(16)",
            "value" => "text",
        );
        $actual = $this->readAttribute($this->o, "fields");
        $this->assertSame($expect, $actual);
    }

    /**
     * Data provider for testAddArray
     *
     * @return array
     */
    public static function dataAddArray() 
    {
        return array(
            array(
                array(),
                array(
                    array("id" => 1, "name" => "Hi", "value" => "There"),
               ),
                array(
                    array("id" => "1", "name" => "Hi", "value" => "There"),
               ),
           ),
            array(
                array(),
                array(
                    array("id" => 1, "name" => "Hi",        "value" => "There"  ),
                    array("id" => 2, "name" => "This",      "value" => "is"     ),
                    array("id" => 3, "name" => "Eddie",     "value" => "your"   ),
                    array("id" => 4, "name" => "shipboard", "value" => "computer"),
               ),
                array(
                    array("id" => "1", "name" => "Hi",        "value" => "There"  ),
                    array("id" => "2", "name" => "This",      "value" => "is"     ),
                    array("id" => "3", "name" => "Eddie",     "value" => "your"   ),
                    array("id" => "4", "name" => "shipboard", "value" => "computer"),
               ),
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param array $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataAddArray
     */
    public function testAddArray($preload, $info, $expect) 
    {
        $this->load($preload);
        $this->o->addArray($info);
        $ret = $this->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testAdd
     *
     * @return array
     */
    public static function dataAdd() 
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                array("id" => "3", "name" => "Hi", "value" => "There"),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array("id" => 1, "name" => "Hi", "value" => "There"),
                array("id" => "1", "name" => "hello", "value" => "there"),
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param array $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataAdd
     */
    public function testAdd($preload, $info, $expect) 
    {
        $this->load($preload);
        $this->o->add($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testCleanSql
     *
     * @return array
     */
    public static function dataCleanSql() 
    {
        return array(
            array(
                "hello",
                false,
                "hello",
            ),
            array(
                "the auto_increment end",
                true,
                "the  end",
           ),
        );
    }
    /**
     * test
     *
     * @param string $string        Data to preload into the database
     * @param array  $autoincrement The info to add to the database
     * @param array  $expect        The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataCleanSql
     */
    public function testCleanSql($string, $autoincrement, $expect) 
    {
        $ret = $this->o->tCleanSql($string);
        $this->assertSame($expect, $ret);
        $this->assertSame($autoincrement, $this->readAttribute($this->o, "autoIncrement"));
    }


    /**
     * Data provider for testAdd
     *
     * @return array
     */
    public static function dataReplace() 
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                array("id" => "3", "name" => "Hi", "value" => "There"),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array("id" => 1, "name" => "Bye", "value" => "Now"),
                array("id" => "1", "name" => "Bye", "value" => "Now"),
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param array $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataReplace
     */
    public function testReplace($preload, $info, $expect) 
    {
        $this->load($preload);
        $this->o->replace($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testUpdate
     *
     * @return array
     */
    public static function dataUpdate() 
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                3,
                null,
                false,
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array("id" => 1, "name" => "Bye", "value" => "Now"),
                1,
                array("id" => "1", "name" => "Bye", "value" => "Now"),
                true,
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param array $info    The info to add to the database
     * @param int   $key     The database key to get the record from
     * @param array $expect  The info to expect returned
     * @param bool  $retExpect What the function should return
     *
     * @return null
     *
     * @dataProvider dataUpdate
     */
    public function testUpdate($preload, $info, $key, $expect, $retExpect) 
    {
        $this->load($preload);
        $this->o->update($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }
    /**
     * test
     *
     * @param array $preload   Data to preload into the database
     * @param array $info      The info to add to the database
     * @param int   $key       The database key to get the record from
     * @param array $expect    The info to expect returned
     * @param bool  $retExpect What the function should return
     *
     * @return null
     *
     * @dataProvider dataUpdate
     */
    /*
    public function testUpdateReturn($preload, $info, $key, $expect, $retExpect) 
    {
        $this->load($preload);
        $ret = $this->o->update($info);
        $this->assertSame($retExpect, $ret);
    }
    */

    /**
     * Data provider for testGetAll
     *
     * @return array
     */
    public static function dataGetAll() 
    {
        return array(
            array(
                array(),
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
               ),
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param array $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataGetAll
     */
    public function testGetAll($preload, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testGet
     *
     * @return array
     */
    public static function dataGet() 
    {
        return array(
            array(
                array(),
                1,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                1,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
               ),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble","value" =>  "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                3,
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
               ),
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param int   $key     The database key to get the record from
     * @param array $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataGet
     */
    public function testGet($preload, $key, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->get($key);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testGetWhere
     *
     * @return array
     */
    public static function dataGetWhere() 
    {
        return array(
            array(
                array(),
                "1",
                null,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                "name = 'hello'",
                null,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
               ),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "id = ?",
                array(3),
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
               ),
           ),
        );
    }
    /**
     * test
     *
     * @param array  $preload Data to preload into the database
     * @param string $where   The database key to get the record from
     * @param array  $data    The data to send with the query
     * @param array  $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataGetWhere
     */
    public function testGetWhere($preload, $where, $data, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->getWhere($where, $data);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testGetWhere
     *
     * @return array
     */
    public static function dataGetOneWhere() 
    {
        return array(
            array(
                array(),
                "1",
                null,
                null,
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                "name = 'hello'",
                null,
                array("id" => "1", "name" => "hello", "value" => "there"),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "id = ?",
                array(3),
                array("id" => "3", "name" => "taking", "value" => "the"),
           ),
        );
    }
    /**
     * test
     *
     * @param array  $preload Data to preload into the database
     * @param string $where   The database key to get the record from
     * @param array  $data    The data to send with the query
     * @param array  $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataGetOneWhere
     */
    public function testGetOneWhere($preload, $where, $data, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->getOneWhere($where, $data);
        $this->assertSame($expect, $ret);
    }
    /**
     * Data provider for testGetOne
     *
     * @return array
     */
    public static function dataGetOne() 
    {
        return array(
            array(
                array(),
                null,
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array("id" => "1", "name" => "hello", "value" => "there"),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                array("id" => "1", "name" => "hello", "value" => "there"),
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param array $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataGetOne
     */
    public function testGetOne($preload, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->getOne();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testGetNextID
     *
     * @return array
     */
    public static function dataGetNextID() 
    {
        return array(
            array(
                array(),
                1,
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                2,
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                6,
           ),
        );
    }
    
    /**
     * test
     *
     * @param array  $preload Data to preload into the database
     * @param array  $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataGetNextID
     */
    public function testGetNextID($preload, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->getNextID();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for HUGnetDBTest::testQuery()
     *
     * @return array
     */
    public static function dataQuery()
    {
        return array(
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "SELECT * FROM BadTableName WHERE id = 3",
                null,
                true,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "SELECT * FROM BadTableName WHERE id = ?",
                array(1,2,3,4,5),
                false,
                false,
           ),
            array(
                array(),
                "CREATE TABLE IF NOT EXISTS `oneTestTable` ("
                  ." `id` int(11) NOT null, "
                  ." `name` varchar(16) NOT null default '', "
                  ." `value` text NOT null, "
                  ." PRIMARY KEY  (`id`) "
                  .");",
                array(),
                false,
                true,
           ),
        );
    }
    /**
     * test
     *
     * @param array  $preload Data to preload into the database
     * @param string $query   The query to perform
     * @param array  $data    The data to send with the query
     * @param bool   $getRet  Whether to expect a return
     * @param array  $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataQuery().
     */
    public function testQuery($preload, $query, $data, $getRet, $expect) 
    {
        $this->load($preload);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame($expect, $ret);        
    }

    /**
     * Data provider for HUGnetDBTest::testQueryNoDb()
     *
     * @return array
     */
    public static function dataQueryNoDb()
    {
        return array(
            array(
                "Hello",
                "SELECT * FROM BadTableName WHERE id = 3",
                null,
                true,
                array(),
           ),
            array(
                null,
                "SELECT * FROM BadTableName WHERE id = ?",
                array(1,2,3,4,5),
                false,
                false,
           ),
            array(
                new databaseTest(),
                "CREATE TABLE IF NOT EXISTS `oneTestTable` ("
                  ." `id` int(11) NOT null, "
                  ." `name` varchar(16) NOT null default '', "
                  ." `value` text NOT null, "
                  ." PRIMARY KEY  (`id`) "
                  .");",
                array(),
                false,
                false,
           ),
        );
    }
    /**
     * test
     *
     * @param array  $value  The data to kill the db with
     * @param string $query  The query to perform
     * @param array  $data   The data to send with the query
     * @param bool   $getRet Whether to expect a return
     * @param array  $expect The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataQueryNoDb().
     */
    public function testQueryNoDb($value, $query, $data, $getRet, $expect) 
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame($expect, $ret);
        $this->assertSame("NODBE", $this->readAttribute($this->o, "errorState"));
    }

    /**
     * test
     *
     * @param array  $value  The data to kill the db with
     * @param string $query  The query to perform
     * @param array  $data   The data to send with the query
     * @param bool   $getRet Whether to expect a return
     * @param array  $expect The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataQueryNoDb().
     */
    public function testQueryNoDbErrorState($value, $query, $data, $getRet, $expect) 
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame("NODBE", $this->readAttribute($this->o, "errorState"));
    }
    /**
     * test
     *
     * @param array  $value  The data to kill the db with
     * @param string $query  The query to perform
     * @param array  $data   The data to send with the query
     * @param bool   $getRet Whether to expect a return
     * @param array  $expect The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataQueryNoDb().
     */
    public function testQueryNoDbErrorMsg($value, $query, $data, $getRet, $expect) 
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame("Database Not Connected", $this->readAttribute($this->o, "errorMsg"));
    }
    /**
     * test
     *
     * @param array  $value  The data to kill the db with
     * @param string $query  The query to perform
     * @param array  $data   The data to send with the query
     * @param bool   $getRet Whether to expect a return
     * @param array  $expect The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataQueryNoDb().
     */
    public function testQueryNoDbError($value, $query, $data, $getRet, $expect) 
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame(-1, $this->readAttribute($this->o, "error"));
    }

    /**
     * Data provider for HUGnetDBTest::testQueryCache()
     *
     * @return array
     */
    public static function dataQueryCache()
    {
        return array(
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "SELECT * FROM `HUGnetDBTest` WHERE id = 3",
                null,
                true,
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
               ),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "SELECT * FROM `HUGnetDBTest` WHERE id = ?",
                array(1),
                true,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
               ),
           ),
        );
    }
    /**
     * test
     *
     * @param array  $preload Data to preload into the database
     * @param string $query   The query to perform
     * @param array  $data    The data to send with the query
     * @param bool   $getRet  Whether to expect a return
     * @param array  $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataQueryCache().
     */
    public function testQueryCache($preload, $query, $data, $getRet, $expect) 
    {
        $this->o->createCache();

        // Preload the database
        $this->load($preload);
        // Preload the cache
        $this->o->getAll();
        // Erase what is in the database without touching the cache
        $this->pdo->query("delete from ".$this->table);
        // Query from the database (this should hit the cache)
        $ret = $this->o->query($query, $data, $getRet);

        $this->assertSame($expect, $ret);        
    }

    /**
     * Data provider for testRemove
     *
     * @return array
     */
    public static function dataRemove() 
    {
        return array(
            array(
                array(),
                1,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                1,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                3,
                array(
                    array("id" => "1", "name" => "hello",   "value" => "there"),
                    array("id" => "2", "name" => "I",       "value" => "am"  ),
                    array("id" => "4", "name" => "trouble", "value" => "to"  ),
                    array("id" => "5", "name" => "change",  "value" => "these"),
               ),
           ),
        );
    }
    /**
     * test
     *
     * @param array $preload Data to preload into the database
     * @param int   $key     The database key to get the record from
     * @param array $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataRemove
     */
    public function testRemove($preload, $key, $expect) 
    {
        $this->load($preload);
        $this->o->remove($key);
        $ret = $this->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testRemoveWhere
     *
     * @return array
     */
    public static function dataRemoveWhere() 
    {
        return array(
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "1",
                array(),
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                "id = ?",
                array(1),
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "id < ?",
                array(4),
                array(
                    array("id" => "4", "name" => "trouble", "value" => "to"  ),
                    array("id" => "5", "name" => "change",  "value" => "these"),
               ),
           ),
        );
    }
    /**
     * test
     *
     * @param array  $preload Data to preload into the database
     * @param string $where   Where clause
     * @param array  $data    Data for where clause
     * @param array  $expect  The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataRemoveWhere
     */
    public function testRemoveWhere($preload, $where, $data, $expect) 
    {
        $this->load($preload);
        $this->o->removeWhere($where, $data);
        $ret = $this->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testRemove
     *
     * @return array
     */
    public static function dataVerbose() 
    {
        return array(
            array(0, 0),
            array(15, 14),
            array(false, 0),
            array(true, 0),
        );
    }
    /**
     * test
     *
     * @param int $val    The database key to get the record from
     * @param int $expect The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataVerbose
     */
    public function testVerbose($val, $expect) 
    {
        $this->o->verbose($val);
        $this->assertSame($expect, $this->readAttribute($this->o, "verbose"));
    }

    /**
     * test
     *
     * @return null
     */
    public function testIsConnected() 
    {
        $ret = $this->o->isConnected();
        $this->assertTrue($ret);
    }

    /**
     * test
     *
     * @return null
     */
    public function testIsConnectedServerLeft() 
    {
        $this->o->metaError = HUGnetDB_META_ERROR_SERVER_GONE;
        $ret = $this->o->isConnected();
        $this->assertFalse($ret);
    }

    /**
     * test
     *
     * @return null
     */
    public function testPrintError() 
    {
        $this->o->verbose(2);
        $this->o->errorState = "ABCDE";
        $this->o->error      = -1;
        $this->o->errorMsg   = "This is an error";
        $this->o->metaError      = -1;
        $this->o->metaErrorMsg   = "This is an error";
        ob_start();
        $this->o->printError();
        $ret = ob_get_contents();
        ob_end_clean();
        $file   = $this->readAttribute($this->o, "file");
        $class  = get_class($this->o);
        $driver = $this->readAttribute($this->o, "driver");
        $this->assertSame("(".$class." - ".$driver." ".$file.") Error State: ABCDE\n"
                         ."(".$class." - ".$driver." ".$file.") Error: -1\n"
                         ."(".$class." - ".$driver." ".$file.") Error Message: This is an error\n"
                         ."(".$class." - ".$driver." ".$file.") Meta Error: -1\n"
                         ."(".$class." - ".$driver." ".$file.") Meta Error Message: This is an error\n",
                         $ret);
    }

    /**
     * Tests print out when there is no error
     *
     * @return null
     */
    public function testPrintErrorNone() 
    {
        $this->o->verbose(true);
        $this->o->errorState = "00000";
        $this->o->error      = 0;
        $this->o->errorMsg   = "";
        ob_start();
        $this->o->printError();
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertSame("", $ret);
    }

    /**
     * tests printout when verbose is off
     *
     * @return null
     */
    public function testPrintErrorNotVerbose() 
    {
        ob_start();
        $this->o->printError();
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertSame("", $ret);
    }

    /**
     * tests printout when verbose is off
     *
     * @return null
     */
    public function testCreateTable() 
    {
        $this->assertFalse(HUGnetDB::createTable());
    }
    
    /**
     * Data provider for testSqlDate
     *
     * @return array
     */
    public static function dataSqlDate() 
    {
        return array(
            array("2007-12-25 12:13:14", "2007-12-25 12:13:14"),
            array(1523479275, "2018-04-11 15:41:15"),
            array("January 1, 2006 5:42pm", "2006-01-01 17:42:00"),
            array(true, true),
            array(array(), array()),
        );
    }
    /**
     * test
     *
     * @param mixed $date   The date 
     * @param int   $expect The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataSqlDate
     */
    public function testSqlDate($date, $expect) 
    {
        $ret = $this->o->sqlDate($date);
        $this->assertSame($expect, $ret);
    }
    /**
     * Data provider for testFixType
     *
     * @return array
     */
    public static function dataFixType() 
    {
        return array(
            array("1", "Int(11)", 1),
            array("1", "FLoat", 1.0),
            array(1.0, "text(45)", "1"),
            array(1.0, "char(2)", "1"),
            array(1.0, "varchar(16)", "1"),
            array(1.0, "asdf(4)", 1.0),
        );
    }
    /**
     * test
     *
     * @param mixed $value  The value to fix 
     * @param mixed $type   The type of SQL column it is from 
     * @param int   $expect The info to expect returned
     *
     * @return null
     *
     * @dataProvider dataFixType
     */
    public function testFixType($value, $type, $expect) 
    {
        $ret = $this->o->fixType($value, $type);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testAddArray
     *
     * @return array
     */
    public static function dataGetInstance()
    {
        return array(
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "HUGnetDB",
                "HUGnetDB",
            ),
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "Device",
                "Device",
            ),
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "driver",
                false,
            ),
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "asdf",
                false,
            ),
        );
    }
    /**
     * Tests to make sure this function fails if
     * someone tries to make a cache from a memory
     * sqlite instance.
     *
     * @param string $config The DSN to use to create the PDO object
     * @param string $class  The password
     * @param mixed  $expect The expected value.  Set to FALSE or the class name
     *
     * @return null
     *
     * @dataProvider dataGetInstance()
     */
    public function testGetInstance($config, $class, $expect) 
    {
        $o = HUGnetDB::getInstance($class, $config);
        if ($expect === false) {
            $this->assertFalse($o);
        } else {
            $this->assertType("object", $o);
            $this->assertSame($expect, get_class($o));
        }
        unset($o);
    }

    /**
     * Data provider for testAddArray
     *
     * @return array
     */
    public static function dataGetInstanceCache()
    {
        return array(
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "HUGnetDB",
            ),
        );
    }
    /**
     * Tests to make sure this function fails if
     * someone tries to make a cache from a memory
     * sqlite instance.
     *
     * @param string $config The DSN to use to create the PDO object
     * @param string $class  The password
     *
     * @return null
     *
     * @dataProvider dataGetInstanceCache()
     */
    public function testGetInstanceCache($config, $class) 
    {
        $o = HUGnetDB::getInstance($class, $config);
        $p = HUGnetDB::getInstance($class, $config);
        $this->assertSame($o, $p);
        unset($o);
        unset($p);
    }

    /**
     * Tests to make sure this function fails if
     * someone tries to make a cache from a memory
     * sqlite instance.
     *
     * @param string $config The DSN to use to create the PDO object
     * @param string $class  The password
     *
     * @return null
     *
     * @dataProvider dataGetInstanceCache()
     */
    public function testGetInstancePBO($config, $class) 
    {
        $o = HUGnetDB::getInstance($class, $config);
        $d = $this->readAttribute($o, '_db');
        $this->assertSame("PDO", get_class($d));
        unset($o);
        unset($p);
    }

}

// Call HUGnetDBTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'HUGnetDBTest::main') {
    HUGnetDBTest::main();
}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBClassTest extends HUGnetDB
{
    /**
     * The name of the table we are using
     */
    protected $table = "HUGnetDBTest";
    /** The number of columns */
    private $_columns = 3;
    
    /**
     * Creates the database table.
     *
     * Must be defined in child classes
     *
     * @param string $table The name of the table to use
     *
     * @return bool
     */
    public function createTable($table="") 
    {
        if (!empty($table)) $this->table = $table;
        $query = "CREATE TABLE IF NOT EXISTS `".$this->table."` (
              `id` int(11) NOT null,
              `name` varchar(16) NOT null default '',
              `value` text NOT null,
              PRIMARY KEY  (`id`)
           );";

        $ret = $this->query($query, false); 
        $this->getColumns();   
    }
    
    /**
     * kills the database so we can test the class when it doesn't ahve a database
     *
     * @param mixed $val The value to kill the database with
     *
     * @return null
     */
    public function killDb($val = null)
    {
        $this->_db = null;
        $this->_db = $val;
    }     

    /**
     * Calls the protected function cleanSql()
     *
     * @param mixed $string The value to clean
     *
     * @return null
     */
    public function tCleanSql($string)
    {
        return $this->cleanSql($string);
    }     

    
}
?>
