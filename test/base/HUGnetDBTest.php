<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */

if (!defined("HUGNET_INCLUDE_PATH")) {
    define("HUGNET_INCLUDE_PATH", dirname(__FILE__)."/../..");
}

require_once dirname(__FILE__).'/../../base/HUGnetDB.php';
require_once dirname(__FILE__).'/../database/DatabaseTest.php';

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBTest extends databaseTest
{
    /** @var object PDO object */
    protected $pdo;

    /**
    * @var    HUGnetDB
    * @access protected
    */
    protected $o;

    /**
    * The name of the table we are using
    */
    protected $table = "HUGnetDBTest";

    /**
    * Runs the test methods of this class.
    *
    * @return null
    *
    * @access public
    * @static
    */
    public static function main()
    {
        include_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite($this->table);
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        parent::setUp();
        //$this->o =& HUGnetDB::getInstance("HUGnetDBClassTest", $this->config);
        $this->o = new HUGnetDBClassTest($this->config);
        $this->o->createTable();
        // Clear out the database
        $this->pdo->query("DELETE FROM ".$this->table);
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        if (is_object($this->pdo) && (get_class($this->pdo) == "PDO")) {
            $this->pdo->query("DROP TABLE ".$this->table);
        }
        parent::tearDown();
        unset($this->o);
    }

    /**
    * Data provider for testConstructor
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                    "table" => "myTable",
                ),
                "table",
                "myTable",
            ),
            array(
                array(
                    "table" => "myTable",
                ),
                "config",
                array(
                    "table" => "myTable",
                ),
            ),
            array(
                array(
                    "id" => "myField",
                ),
                "id",
                "myField",
            ),
            array(
                array(
                    "file" => sys_get_temp_dir()."/myFile.sq3",
                ),
                "file",
                sys_get_temp_dir()."/myFile.sq3",
            ),
            array(
                array(
                    "verbose" => 1,
                ),
                "verbose",
                1,
            ),
            array(
                array(
                    "dbTimeout" => 10,
                ),
                "dbTimeout",
                10,
            ),
            array(
                array(
                    "hugnetdbclasstestfile" => sys_get_temp_dir()."/myFile2.sq3",
                ),
                "file",
                sys_get_temp_dir()."/myFile2.sq3",
            ),

        );
    }
    /**
    * test
    *
    * @param array  $config    the directory to look for Plugins in.  Sets this->dir
    * @param string $attribute The attribute to check
    * @param mixed  $expect    The expected value
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($config, $attribute, $expect)
    {
        $this->filesUsed[] = $attribute["file"];
        $o = new HUGnetDBClassTest($config);
        $att = $this->readAttribute($o, $attribute);
        $this->assertEquals($expect, $att);
    }

    /**
    * Data provider for testCreatePDO
    *
    * @return array
    */
    public static function dataCreatePDO()
    {
        return array(
            array(array(), "PDO", "sqlite"),
            array(
                array("driver" => "sqlite", "file" => ":memory:"),
                "PDO",
                "sqlite",
            ),
            array(
                array("driver" => "badPDODriver", "file" => ":memory:"),
                "PDO",
                "sqlite"
            ),
            array(
                array(
                    "db_name" => "MyNewDb",
                    "servers" => array(
                        array(
                            "driver" => "mysql",
                            "user" => "NotAGoodUserNameToUse",
                            "password" => "Secret Password",
                        ),
                    ),
                ),
                null,
                "sqlite"
            ),
        );
    }
    /**
    * Tests to make sure this function fails if
    * someone tries to make a cache from a memory
    * sqlite instance.
    *
    * @param string $config       The configuration to use
    * @param mixed  $expect       The expected value.  Set to FALSE or the class name
    * @param mixed  $expectDriver The expected driver
    *
    * @return null
    *
    * @dataProvider dataCreatePDO()
    */
    public function testCreatePDO($config, $expect, $expectDriver)
    {
        $o = HUGnetDB::createPDO($config);
        if ($expect === false) {
            $this->assertFalse($o);
        } else if (is_null($expect)) {
            $this->assertNull($o);
        } else {
            $this->assertType("object", $o);
            $this->assertSame($expect, get_class($o));
            $this->assertSame(
                $expectDriver,
                $o->getAttribute(PDO::ATTR_DRIVER_NAME)
            );
        }
        unset($o);
    }

    /**
    * Data provider for testCreateCache
    *
    * @return array
    */
    public static function dataCreateCache()
    {
        return array(
            array(array(), null, "HUGnetDBClassTest", true, "sqlite", ":memory:"),
            array(
                array(),
                null,
                "HUGnetDBClassTest",
                true,
                "sqlite",
                sys_get_temp_dir()."/HUGnet.sq3",
                array(
                    "driver" => "mysql",
                    "file" => "",
                ),
            ),
            array(
                array(),
                null,
                "HUGnetDBClassTest",
                true,
                "sqlite",
                sys_get_temp_dir()."/testFile.sq3",
                array(
                    "driver" => "mysql",
                    "file" => sys_get_temp_dir()."/testFile.sq3",
                ),
            ),
            array(
                array(),
                sys_get_temp_dir()."/anotherTestFile",
                "HUGnetDBClassTest",
                true,
                "sqlite",
                sys_get_temp_dir()."/anotherTestFile",
                array(
                    "driver" => "mysql",
                    "file" => sys_get_temp_dir()."/testFile",
                ),
            ),
            array(
                array("hugnetdbclasstestfile" => sys_get_temp_dir()."/myFile.sq3"),
                "",
                "HUGnetDBClassTest",
                true,
                "sqlite",
                sys_get_temp_dir()."/myFile.sq3",
                array(
                    "driver" => "mysql",
                    "file" => "",
                ),
            ),
            array(
                array(),
                sys_get_temp_dir()."/anotherTestFile",
                "HUGnetDBClassTest",
                false,
                "sqlite", // Not used in this run
                sys_get_temp_dir()."/anotherTestFile", // Not used in this run.
                array(
                    "driver" => "sqlite",
                    "file" => ":memory:",
                ),
            ),
        );
    }

    /**
    * Tests to make sure this function fails if
    * someone tries to make a cache from a memory
    * sqlite instance.
    *
    * @param array  $config       The configuration to use
    * @param string $file         The file to use
    * @param mixed  $class        The expected result
    * @param mixed  $expect       The expected return value
    * @param string $expectDriver The driver to expect in the cache
    * @param string $expectFile   The file the driver should be using
    * @param array  $attribs      Attributes to set in the class.
    *
    * @return null
    *
    * @dataProvider dataCreateCache
    */
    public function testCreateCache(
        $config,
        $file,
        $class,
        $expect,
        $expectDriver,
        $expectFile,
        $attribs = array()
    ) {
        $this->filesUsed[] = $file;
        $this->filesUsed[] = $expectFile;
        $o = new HUGnetDBClassTest($config);
        $o->setAttributes($attribs);
        $ret = $o->createCache($file);
        $cache = $this->readAttribute($o, "cache");
        unset($o);
        $this->assertSame($expect, $ret);
        if ($expect === false) {
            $this->assertNull($cache);
        } else {
            $this->assertType("object", $cache, "Cache is not an object");
            $this->assertSame($class, get_class($cache), "Cache is the wrong class");
            $db = $this->readAttribute($cache, "db");
            $this->assertSame(
                $expectDriver,
                $db->getAttribute(PDO::ATTR_DRIVER_NAME),
                "Cache is using the wrong driver"
            );
            $this->assertAttributeSame($expectFile, "file", $cache, "File is wrong");
        }
    }

    /**
    * Data provider for testGetColumns
    *
    * @return array
    */
    public static function dataGetColumns()
    {
        return array(
            array(
                array(),
                array(
                    "id" => "int(11)",
                    "name" => "varchar(16)",
                    "value" => "text",
                ),
            ),
            array(
                array(),
                array(),
                array(
                    "driver" => "mysql",
                ),
            ),
        );
    }

    /**
    * Tests if getColumns works correctly
    *
    * @param array $preload Data to preload into the database
    * @param array $expect  The info to expect returned
    * @param array $attribs Attributes to set in the class.
    *
    * @dataProvider dataGetColumns
    * @return null
    */
    public function testGetColumns($preload, $expect, $attribs = array())
    {
        $this->o->setAttributes($attribs);
        $this->o->qGetColumns();
        $this->assertAttributeSame($expect, "fields", $this->o);
    }

    /**
    * Data provider for testGetColumns
    *
    * @return array
    */
    public static function dataCreateDSN()
    {
        return array(
            array(
                "mysql",
                "database",
                "file",
                "127.0.0.1",
                "mysql:host=127.0.0.1;dbname=database",
            ),
            array(
                "",
                "",
                "",
                "",
                "sqlite::memory:",
            ),
        );
    }

    /**
    * Tests if createDSN works correctly
    *
    * @param string $driver The PDO driver to use
    * @param string $db     The database to use
    * @param string $file   The file to use if the driver is 'sqlite'
    * @param array  $host   The host to use
    * @param array  $expect The DSN to expect returned
    *
    * @dataProvider dataCreateDSN
    * @return null
    */
    public function testCreateDSN($driver, $db, $file, $host, $expect)
    {
        $ret = HUGnetDB::createDSN($driver, $db, $file, $host);
        $this->assertSame($expect, $ret);
    }


    /**
    * Data provider for testAddArray
    *
    * @return array
    */
    public static function dataAddArray()
    {
        return array(
            array(
                array(),
                array(
                    array("id" => 1, "name" => "Hi", "value" => "There"),
                ),
                false,
                array(
                    array("id" => "1", "name" => "Hi", "value" => "There"),
                ),
                1,
            ),
            array(
                array(
                    array("id" => 1, "name" => "Hi", "value" => "There"),
                ),
                "This is not an array",
                false,
                array(
                    array("id" => "1", "name" => "Hi", "value" => "There"),
                ),
                0,
            ),
            array(
                array(
                    array("id" => 1, "name" => "Hi", "value" => "There"),
                ),
                array(
                    array("id" => 2, "name" => "This", "value" => "is"),
                ),
                false,
                array(
                    array("id" => "1", "name" => "Hi", "value" => "There"),
                ),
                0,
                array(
                    "db" => "This is not an object",
                ),
            ),
            array(
                array(
                    array("id" => 1, "name" => "Hi", "value" => "There"),
                ),
                array(
                    array("id" => 2, "name" => "This", "value" => "is"),
                ),
                false,
                array(
                    array("id" => "1", "name" => "Hi", "value" => "There"),
                ),
                0,
                array(
                    "fields" => array(),
                ),
            ),
            array(
                array(),
                array(
                    array("id" => 1, "name" => "Hi",        "value" => "There"   ),
                    array("id" => 2, "name" => "This",      "value" => "is"      ),
                    array("id" => 3, "name" => "Eddie",     "value" => "your"    ),
                    array("id" => 4, "name" => "shipboard", "value" => "computer"),
                ),
                false,
                array(
                    array("id" => "1", "name" => "Hi",        "value" => "There"   ),
                    array("id" => "2", "name" => "This",      "value" => "is"      ),
                    array("id" => "3", "name" => "Eddie",     "value" => "your"    ),
                    array("id" => "4", "name" => "shipboard", "value" => "computer"),
                ),
                4,
            ),
            array(
                array(),
                array(
                    array("name" => "Hi",        "value" => "There"  ),
                    array("name" => "This",      "value" => "is"     ),
                    array("name" => "Eddie",     "value" => "your"   ),
                    array("name" => "shipboard", "value" => "computer"),
                    array("name" => "Hmmmm"),
                ),
                false,
                array(
                    array("id" => "1", "name" => "Hi",        "value" => "There"   ),
                    array("id" => "2", "name" => "This",      "value" => "is"      ),
                    array("id" => "3", "name" => "Eddie",     "value" => "your"    ),
                    array("id" => "4", "name" => "shipboard", "value" => "computer"),
                    array("id" => "5", "name" => "Hmmmm",     "value" => null      ),
                ),
                5,
                array(
                    "autoIncrement" => true,
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array $preload   Data to preload into the database
    * @param array $info      The info to add to the database
    * @param bool  $replace   If true it replaces the "INSERT"
    *                         keyword with "REPLACE".  Not all
    *                         databases support "REPLACE".
    * @param array $expect    The info to expect returned
    * @param int   $retExpect The expected return of the function call
    * @param array $attribs   Attributes to set in the class.
    *
    * @return null
    *
    * @dataProvider dataAddArray
    */
    public function testAddArray(
        $preload,
        $info,
        $replace,
        $expect,
        $retExpect,
        $attribs = array()
    ) {
        $this->o->setAttributes($attribs);
        $this->load($preload);
        $this->o->addArray($info, $replace);
        $ret = $this->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
    * test
    *
    * @param array $preload   Data to preload into the database
    * @param array $info      The info to add to the database
    * @param bool  $replace   If true it replaces the "INSERT"
    *                         keyword with "REPLACE".  Not all
    *                         databases support "REPLACE".
    * @param array $expect    The info to expect returned
    * @param int   $retExpect The expected return of the function call
    * @param array $attribs   Attributes to set in the class.
    *
    * @return null
    *
    * @dataProvider dataAddArray
    */
    public function testAddArrayRet(
        $preload,
        $info,
        $replace,
        $expect,
        $retExpect,
        $attribs = array()
    ) {
        $this->o->setAttributes($attribs);
        $this->load($preload);
        $ret = $this->o->addArray($info, $replace);
        $this->assertSame($retExpect, $ret);
    }

    /**
    * Data provider for testAdd
    *
    * @return array
    */
    public static function dataAdd()
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                array(
                    array("id" => "3", "name" => "Hi", "value" => "There"),
                ),
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                array("id" => 1, "name" => "Hi", "value" => "There"),
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
            array(
                array(),
                array("id" => 3, "name" => "Hi"),
                array(
                    array("id" => "3", "name" => "Hi", "value" => null),
                ),
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                array("name" => "Hi", "value" => "There"),
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                    array("id" => "2", "name" => "Hi", "value" => "There"),
                ),
                array(
                    "autoIncrement" => true,
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array $preload Data to preload into the database
    * @param array $info    The info to add to the database
    * @param array $expect  The info to expect returned
    * @param array $attribs Attributes to set in the class.
    *
    * @return null
    *
    * @dataProvider dataAdd
    */
    public function testAdd($preload, $info, $expect, $attribs = array())
    {
        $this->o->setAttributes($attribs);
        $this->load($preload);
        $this->o->add($info);
        $ret = $this->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testCleanSql
    *
    * @return array
    */
    public static function dataCleanSql()
    {
        return array(
            array(
                "hello",
                "sqlite",
                false,
                "hello",
            ),
            array(
                "hello",
                "mysql",
                false,
                "hello",
            ),
            array(
                "the auto_increment end",
                "sqlite",
                true,
                "the  end",
            ),
            array(
                "the auto_increment end",
                "mysql",
                false,
                "the auto_increment end",
            ),
        );
    }
    /**
    * test
    *
    * @param string $string        Data to preload into the database
    * @param string $driver        The driver to use
    * @param array  $autoincrement The info to add to the database
    * @param array  $expect        The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataCleanSql
    */
    public function testCleanSql($string, $driver, $autoincrement, $expect)
    {
        if (!empty($driver)) {
            $this->o->driver = $driver;
        }
        $ret = $this->o->tCleanSql($string);
        $this->assertSame($expect, $ret);
    }
    /**
    * test
    *
    * @param string $string        Data to preload into the database
    * @param string $driver        The driver to use
    * @param array  $autoincrement The info to add to the database
    * @param array  $expect        The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataCleanSql
    */
    public function testCleanSqlAutoInc($string, $driver, $autoincrement, $expect)
    {
        if (!empty($driver)) {
            $this->o->driver = $driver;
        }
        $ret = $this->o->tCleanSql($string);
        $this->assertAttributeSame(
            $autoincrement,
            "autoIncrement",
            $this->o
        );
    }

    /**
    * Data provider for testAdd
    *
    * @return array
    */
    public static function dataReplace()
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                array("id" => "3", "name" => "Hi", "value" => "There"),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array("id" => 1, "name" => "Bye", "value" => "Now"),
                array("id" => "1", "name" => "Bye", "value" => "Now"),
           ),
        );
    }
    /**
    * test
    *
    * @param array $preload Data to preload into the database
    * @param array $info    The info to add to the database
    * @param array $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataReplace
    */
    public function testReplace($preload, $info, $expect)
    {
        $this->load($preload);
        $this->o->replace($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testUpdate
    *
    * @return array
    */
    public static function dataUpdate()
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                3,
                null,
                false,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                array("id" => 1, "name" => "Bye", "value" => "Now"),
                1,
                array("id" => "1", "name" => "Bye", "value" => "Now"),
                true,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                array("name" => "Bye", "value" => "Now"),
                1,
                array("id" => "1", "name" => "hello", "value" => "there"),
                false,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                "This is not an array",
                1,
                array("id" => "1", "name" => "hello", "value" => "there"),
                false,
            ),
        );
    }
    /**
    * test
    *
    * @param array $preload   Data to preload into the database
    * @param array $info      The info to add to the database
    * @param int   $key       The database key to get the record from
    * @param array $expect    The info to expect returned
    * @param bool  $retExpect What the function should return
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    public function testUpdate($preload, $info, $key, $expect, $retExpect)
    {
        $this->load($preload);
        $this->o->update($info);
        $ret = $this->getSingle($expect["id"]);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testUpdate
    *
    * @return array
    */
    public static function dataUpdateWhere()
    {
        return array(
            array(
                array(),
                array("id" => 3, "name" => "Hi", "value" => "There"),
                "`id` = ? ",
                array(3),
                null,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                array("id" => 1, "name" => "Bye", "value" => "Now"),
                "`id` = ? ",
                array(1),
                array("id" => "1", "name" => "Bye", "value" => "Now"),
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                "This is not an array",
                "`id` = ? ",
                array(1),
                array("id" => "1", "name" => "hello", "value" => "there"),
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload Data to preload into the database
    * @param array  $info    The info to add to the database
    * @param string $where   The database key to get the record from
    * @param bool   $data    What the function should return
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataUpdateWhere
    */
    public function testUpdateWhere($preload, $info, $where, $data, $expect)
    {
        $this->load($preload);
        $this->o->updateWhere($info, $where, $data);
        $ret = $this->getSingle($expect[$this->id]);
        $this->assertSame($expect, $ret);
    }

    /**
    * test
    *
    * @param array $preload   Data to preload into the database
    * @param array $info      The info to add to the database
    * @param int   $key       The database key to get the record from
    * @param array $expect    The info to expect returned
    * @param bool  $retExpect What the function should return
    *
    * @return null
    *
    * @dataProvider dataUpdate
    */
    /*
    public function testUpdateReturn($preload, $info, $key, $expect, $retExpect)
    {
        $this->load($preload);
        $ret = $this->o->update($info);
        $this->assertSame($retExpect, $ret);
    }
    */

    /**
    * Data provider for testGetAll
    *
    * @return array
    */
    public static function dataGetAll()
    {
        return array(
            array(
                array(),
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
               ),
           ),
        );
    }
    /**
    * test
    *
    * @param array $preload Data to preload into the database
    * @param array $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataGetAll
    */
    public function testGetAll($preload, $expect)
    {
        $this->load($preload);
        $ret = $this->o->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testGet
    *
    * @return array
    */
    public static function dataGet()
    {
        return array(
            array(
                array(),
                1,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                1,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
               ),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble","value" =>  "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                3,
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
               ),
           ),
        );
    }
    /**
    * test
    *
    * @param array $preload Data to preload into the database
    * @param int   $key     The database key to get the record from
    * @param array $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataGet
    */
    public function testGet($preload, $key, $expect)
    {
        $this->load($preload);
        $ret = $this->o->get($key);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testGetWhere
    *
    * @return array
    */
    public static function dataGetWhere()
    {
        $preload1 = array(
            array("id" => 1, "name" => "hello", "value" => "there"),
            array("id" => 2, "name" => "I", "value" => "am"),
            array("id" => 3, "name" => "taking", "value" => "the"),
            array("id" => 4, "name" => "trouble", "value" => "to"),
            array("id" => 5, "name" => "change", "value" => "these"),
        );
        return array(
            array(
                array(),
                "1",
                null,
                0,
                0,
                "",
                array(),
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                "name = 'hello'",
                null,
                0,
                0,
                "",
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
            array(
                $preload1,
                "id = ?",
                array(3),
                0,
                0,
                "",
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
                ),
            ),
            array(
                $preload1,
                "id < ?",
                array(4),
                1,
                0,
                "",
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
            array(
                $preload1,
                "id < ?",
                array(4),
                0,
                0,
                "ORDER BY id DESC",
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
                    array("id" => "2", "name" => "I", "value" => "am"),
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
            array(
                $preload1,
                "id < ?",
                array(4),
                0,
                0,
                "ORDER BY id ASC",
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                    array("id" => "2", "name" => "I", "value" => "am"),
                    array("id" => "3", "name" => "taking", "value" => "the"),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload Data to preload into the database
    * @param string $where   The database key to get the record from
    * @param array  $data    The data to send with the query
    * @param int    $limit   The maximum number of rows to return (0 to return all)
    * @param int    $start   The row offset to start returning records at
    * @param string $orderby The orderby Clause.  Must include "ORDER BY"
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataGetWhere
    */
    public function testGetWhere(
        $preload,
        $where,
        $data,
        $limit,
        $start,
        $orderby,
        $expect
    ) {
        $this->load($preload);
        $ret = $this->o->getWhere($where, $data, $limit, $start, $orderby);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testGetWhere
    *
    * @return array
    */
    public static function dataGetOneWhere()
    {
        return array(
            array(
                array(),
                "1",
                null,
                null,
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                "name = 'hello'",
                null,
                array("id" => "1", "name" => "hello", "value" => "there"),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "id = ?",
                array(3),
                array("id" => "3", "name" => "taking", "value" => "the"),
           ),
        );
    }
    /**
    * test
    *
    * @param array  $preload Data to preload into the database
    * @param string $where   The database key to get the record from
    * @param array  $data    The data to send with the query
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataGetOneWhere
    */
    public function testGetOneWhere($preload, $where, $data, $expect)
    {
        $this->load($preload);
        $ret = $this->o->getOneWhere($where, $data);
        $this->assertSame($expect, $ret);
    }
    /**
    * Data provider for testGetOne
    *
    * @return array
    */
    public static function dataGetOne()
    {
        return array(
            array(
                array(),
                null,
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                array("id" => "1", "name" => "hello", "value" => "there"),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                array("id" => "1", "name" => "hello", "value" => "there"),
           ),
        );
    }
    /**
    * test
    *
    * @param array $preload Data to preload into the database
    * @param array $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataGetOne
    */
    public function testGetOne($preload, $expect)
    {
        $this->load($preload);
        $ret = $this->o->getOne();
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testGetNextID
    *
    * @return array
    */
    public static function dataGetNextID()
    {
        return array(
            array(
                array(),
                null,
                1,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                "id",
                2,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                null,
                6,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                "asdf",
                1,
            ),
        );
    }

    /**
    * test
    *
    * @param array  $preload Data to preload into the database
    * @param string $id      The id field to use
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataGetNextID
    */
    public function testGetNextID($preload, $id, $expect)
    {
        $this->load($preload);
        $ret = $this->o->getNextID($id);
        $this->assertSame($expect, $ret, "$expect != $ret");
    }
    /**
    * Data provider for testGetPrevID
    *
    * @return array
    */
    public static function dataGetPrevID()
    {
        return array(
            array(
                array(),
                null,
                -1,
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                ),
                "id",
                -1,
            ),
            array(
                array(
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                null,
                -1,
            ),
            array(
                array(
                    array("id" => -3, "name" => "taking", "value" => "the"),
                    array("id" => -4, "name" => "trouble", "value" => "to"),
                    array("id" => -5, "name" => "change", "value" => "these"),
                ),
                "id",
                -6,
            ),

        );
    }
    /**
    * test
    *
    * @param array  $preload The data to preload into the database
    * @param string $id      The id field to use to it
    * @param int    $expect  The error number to expect
    *
    * @return null
    *
    * @dataProvider dataGetPrevID
    */
    public function testGetPrevID($preload, $id, $expect)
    {
        $this->load($preload);
        $ret = $this->o->getPrevID($id);
        $this->assertSame($expect, $ret, "$expect != $ret");
    }


    /**
    * Data provider for HUGnetDBTest::testQuery()
    *
    * @return array
    */
    public static function dataQuery()
    {
        return array(
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "SELECT * FROM BadTableName WHERE id = 3",
                null,
                true,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "SELECT * FROM BadTableName WHERE id = ?",
                array(1,2,3,4,5),
                false,
                false,
           ),
            array(
                array(),
                "CREATE TABLE IF NOT EXISTS `oneTestTable` ("
                  ." `id` int(11) NOT null, "
                  ." `name` varchar(16) NOT null default '', "
                  ." `value` text NOT null, "
                  ." PRIMARY KEY  (`id`) "
                  .");",
                array(),
                false,
                true,
           ),
        );
    }
    /**
    * test
    *
    * @param array  $preload Data to preload into the database
    * @param string $query   The query to perform
    * @param array  $data    The data to send with the query
    * @param bool   $getRet  Whether to expect a return
    * @param array  $expect  The info to expect returned
    * @param array  $attribs Attributes to set
    *
    * @return null
    *
    * @dataProvider dataQuery().
    */
    public function testQuery(
        $preload,
        $query,
        $data,
        $getRet,
        $expect,
        $attribs = array()
    ) {
        $this->o->setAttributes($attribs);
        $this->load($preload);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for HUGnetDBTest::testQueryNoDb()
    *
    * @return array
    */
    public static function dataQueryNoDb()
    {
        return array(
            array(
                "Hello",
                "SELECT * FROM BadTableName WHERE id = 3",
                null,
                true,
                array(),
           ),
            array(
                null,
                "SELECT * FROM BadTableName WHERE id = ?",
                array(1,2,3,4,5),
                false,
                false,
           ),
            array(
                new databaseTest(),
                "CREATE TABLE IF NOT EXISTS `oneTestTable` ("
                  ." `id` int(11) NOT null, "
                  ." `name` varchar(16) NOT null default '', "
                  ." `value` text NOT null, "
                  ." PRIMARY KEY  (`id`) "
                  .");",
                array(),
                false,
                false,
           ),
        );
    }
    /**
    * test
    *
    * @param array  $value  The data to kill the db with
    * @param string $query  The query to perform
    * @param array  $data   The data to send with the query
    * @param bool   $getRet Whether to expect a return
    * @param array  $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataQueryNoDb().
    */
    public function testQueryNoDb($value, $query, $data, $getRet, $expect)
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame($expect, $ret);
        $this->assertSame("NODBE", $this->readAttribute($this->o, "errorState"));
    }

    /**
    * test
    *
    * @param array  $value  The data to kill the db with
    * @param string $query  The query to perform
    * @param array  $data   The data to send with the query
    * @param bool   $getRet Whether to expect a return
    * @param array  $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataQueryNoDb().
    */
    public function testQueryNoDbErrorState($value, $query, $data, $getRet, $expect)
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame("NODBE", $this->readAttribute($this->o, "errorState"));
    }
    /**
    * test
    *
    * @param array  $value  The data to kill the db with
    * @param string $query  The query to perform
    * @param array  $data   The data to send with the query
    * @param bool   $getRet Whether to expect a return
    * @param array  $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataQueryNoDb().
    */
    public function testQueryNoDbErrorMsg($value, $query, $data, $getRet, $expect)
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame(
            "Database Not Connected",
            $this->readAttribute($this->o, "errorMsg")
        );
    }
    /**
    * test
    *
    * @param array  $value  The data to kill the db with
    * @param string $query  The query to perform
    * @param array  $data   The data to send with the query
    * @param bool   $getRet Whether to expect a return
    * @param array  $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataQueryNoDb().
    */
    public function testQueryNoDbError($value, $query, $data, $getRet, $expect)
    {
        $this->o->killDb($value);
        $ret = $this->o->query($query, $data, $getRet);
        $this->assertSame(-1, $this->readAttribute($this->o, "error"));
    }

    /**
    * Data provider for HUGnetDBTest::testQueryCache()
    *
    * @return array
    */
    public static function dataQueryCache()
    {
        return array(
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                array(
                    "file" => tempnam(sys_get_temp_dir(), "HUGnetDB"),
                    "table" => "HUGnetDBTest",
                ),
                "1",
                "SELECT * FROM `HUGnetDBTest` WHERE id = 3",
                null,
                true,
                array(
                    array("id" => "3", "name" => "taking", "value" => "the"),
                ),
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                array(
                    "file" => tempnam(sys_get_temp_dir(), "HUGnetDB"),
                    "table" => "HUGnetDBTest",
                ),
                "1",
                "SELECT * FROM `HUGnetDBTest` WHERE id = ?",
                array(1),
                true,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                array(
                    "file" => tempnam(sys_get_temp_dir(), "HUGnetDB"),
                    "table" => "HUGnetDBTest",
                ),
                "id = 15",
                "SELECT * FROM `HUGnetDBTest` WHERE id = ?",
                array(1),
                true,
                array(),
            ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
                ),
                array(
                    "file" => tempnam(sys_get_temp_dir(), "HUGnetDB"),
                    "table" => "HUGnetDBTest",
                ),
                "id = 1",
                "SELECT * FROM `HUGnetDBTest` WHERE id = ?",
                array(1),
                true,
                array(
                    array("id" => "1", "name" => "hello", "value" => "there"),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param array  $preload Data to preload into the database
    * @param array  $config  The configuration to use
    * @param stirng $where   Where clause for the database read
    * @param string $query   The query to perform
    * @param array  $data    The data to send with the query
    * @param bool   $getRet  Whether to expect a return
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataQueryCache().
    */
    public function testQueryCache(
        $preload,
        $config,
        $where,
        $query,
        $data,
        $getRet,
        $expect
    ) {
        $this->filesUsed[] = $config["file"];
        $this->pdo = &HUGnetDB::createPDO($config);
        $o = new HUGnetDBClassTest($config);
        $o->createTable($config["table"]);
        $o->createCache();
        // Preload the database
        $this->load($preload);
        // Preload the cache
        $o->getWhere($where);
        // Erase what is in the database without touching the cache
        $this->pdo->query("delete from ".$config["table"]);
        // Query from the database (this should hit the cache)
        $ret = $o->query($query, $data, $getRet);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataRemove()
    {
        return array(
            array(
                array(),
                1,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                1,
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                3,
                array(
                    array("id" => "1", "name" => "hello",   "value" => "there"),
                    array("id" => "2", "name" => "I",       "value" => "am"  ),
                    array("id" => "4", "name" => "trouble", "value" => "to"  ),
                    array("id" => "5", "name" => "change",  "value" => "these"),
               ),
           ),
        );
    }
    /**
    * test
    *
    * @param array $preload Data to preload into the database
    * @param int   $key     The database key to get the record from
    * @param array $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataRemove
    */
    public function testRemove($preload, $key, $expect)
    {
        $this->load($preload);
        $this->o->remove($key);
        $ret = $this->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testRemoveWhere
    *
    * @return array
    */
    public static function dataRemoveWhere()
    {
        return array(
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "1",
                array(),
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
               ),
                "id = ?",
                array(1),
                array(),
           ),
            array(
                array(
                    array("id" => 1, "name" => "hello", "value" => "there"),
                    array("id" => 2, "name" => "I", "value" => "am"),
                    array("id" => 3, "name" => "taking", "value" => "the"),
                    array("id" => 4, "name" => "trouble", "value" => "to"),
                    array("id" => 5, "name" => "change", "value" => "these"),
               ),
                "id < ?",
                array(4),
                array(
                    array("id" => "4", "name" => "trouble", "value" => "to"  ),
                    array("id" => "5", "name" => "change",  "value" => "these"),
               ),
           ),
        );
    }
    /**
    * test
    *
    * @param array  $preload Data to preload into the database
    * @param string $where   Where clause
    * @param array  $data    Data for where clause
    * @param array  $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataRemoveWhere
    */
    public function testRemoveWhere($preload, $where, $data, $expect)
    {
        $this->load($preload);
        $this->o->removeWhere($where, $data);
        $ret = $this->getAll();
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataVerbose()
    {
        return array(
            array(0, 0),
            array(6, 6),
            array(15, 15),
            array(false, 0),
            array(true, 1),
        );
    }
    /**
    * test
    *
    * @param int $val    The database key to get the record from
    * @param int $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataVerbose
    */
    public function testVerbose($val, $expect)
    {
        $this->o->verbose($val);
        $this->assertAttributeSame($expect, "verbose", $this->o);
    }

    /**
    * Data provider for testRemove
    *
    * @return array
    */
    public static function dataAddField()
    {
        return array(
            array(
                "id", "TEXT", null, false,
                array(
                    "id"    => "int(11)",
                    "name"  => "varchar(16)",
                    "value" => "text",
                ),
                true,
            ),
            // This one fails because I am setting a not null column to a default
            // of null.
            array(
                "did", "TEXT", null, false,
                array(
                    "id"    => "int(11)",
                    "name"  => "varchar(16)",
                    "value" => "text",
                ),
                false,
            ),
            array(
                "did", "TEXT", null, true,
                array(
                    "id"    => "int(11)",
                    "name"  => "varchar(16)",
                    "value" => "text",
                    "did"   => "TEXT",
                ),
                true,
            ),
            array(
                "did", "TEXT", "Hello Nurse", true,
                array(
                    "id"    => "int(11)",
                    "name"  => "varchar(16)",
                    "value" => "text",
                    "did"   => "TEXT",
                ),
                true,
            ),
            array(
                "did", "int", 1, false,
                array(
                    "id"    => "int(11)",
                    "name"  => "varchar(16)",
                    "value" => "text",
                    "did"   => "int",
                ),
                true,
            ),
        );
    }

    /**
    * test
    *
    * @param int    $name    The name of the field
    * @param string $type    The type of field to add
    * @param mixed  $default The default value for the field
    * @param bool   $null    Whether null is a valid value for the field
    * @param int    $fields  What the field variable should look like
    * @param bool   $expect  The expected function return
    *
    * @return null
    *
    * @dataProvider dataAddField
    */
    public function testAddField(
        $name,
        $type,
        $default,
        $null,
        $fields,
        $expect
    ) {
        $ret = $this->o->AddField($name, $type, $default, $null);
        $this->assertSame($expect, $ret);
        $this->assertAttributeSame($fields, "fields", $this->o, "Field Check 1");
        $this->o->qGetColumns();
        $this->assertAttributeSame($fields, "fields", $this->o, "Field Check 2");
    }

    /**
    * Data provider for testPrepareData
    *
    * @return array
    */
    public static function dataPrepareData()
    {
        return array(
            // extra values
            array(
                array(
                    "id" => 1,
                    "name" => "Hello",
                    "value" => "There",
                    "other" => "Junk",
                ),
                array("id", "name", "value"),
                array(),
                array(1, "Hello", "There"),
            ),
            // Autoincrement, extra keys
            array(
                array(
                    "name" => "Hello",
                    "value" => "There",
                ),
                array("id", "name", "value", "stuff"),
                array("autoIncrement" => true),
                array(1, "Hello", "There", null),
            ),
            // No keys
            array(
                array(
                    "id" => 1,
                    "name" => "Hello",
                    "value" => "There",
                ),
                array(),
                array(),
                array(),
            ),
            // Keys not an array
            array(
                array(
                    "id" => 1,
                    "name" => "Hello",
                    "value" => "There",
                ),
                "This is not an array",
                array(),
                array(),
            ),
        );
    }

    /**
    * test
    *
    * @param array $data    The data to use
    * @param array $keys    The keys to use
    * @param array $attribs Attributes to set in the object
    * @param array $expect  The expected function return
    *
    * @return null
    *
    * @dataProvider dataPrepareData
    */
    public function testPrepareData($data, $keys, $attribs, $expect)
    {
        $this->o->setAttributes($attribs);
        $ret = $this->o->qPrepareData($data, $keys);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testMetaErrorInfo
    *
    * @return array
    */
    public static function dataMetaErrorInfo()
    {
        return array(
            // Reset the error
            array(
                null,
                array(),
                null,
                null,
            ),
            // Server Gone
            array(
                array(1 => 2006),
                array("driver" => "mysql"),
                constant("HUGNETDB_META_ERROR_SERVER_GONE"),
                constant("HUGNETDB_META_ERROR_SERVER_GONE_MSG"),
            ),
            // Duplicate entry
            array(
                array(1 => 1062),
                array("driver" => "mysql"),
                constant("HUGNETDB_META_ERROR_DUPLICATE"),
                constant("HUGNETDB_META_ERROR_DUPLICATE_MSG"),
            ),
            // Duplicate entry
            array(
                array(1 => 1062),
                array("driver" => "sqlite"),
                null,
                null,
            ),
        );
    }

    /**
    * test
    *
    * @param array  $err       The original error
    * @param array  $attribs   Attributes to set in the object
    * @param int    $expect    The expected return
    * @param string $expectMsg The expected message
    *
    * @return null
    *
    * @dataProvider dataMetaErrorInfo
    */
    public function testMetaErrorInfo($err, $attribs, $expect, $expectMsg)
    {
        $this->o->setAttributes($attribs);
        $ret = $this->o->qMetaErrorInfo($err);
        $this->assertAttributeSame($expect, "metaError", $this->o, "Wrong Code");
        $this->assertAttributeSame(
            $expectMsg, "metaErrorMsg", $this->o, "Wrong Message"
        );
    }


    /**
    * Data provider for testIsConnected
    *
    * @return array
    */
    public static function dataIsConnected()
    {
        return array(
            array(array(), true),
            array(
                array(
                    "db" => "This is not an object",
                    "driver"    => "sqlite",
                ),
                false,
            ),
            array(
                array(
                    "metaError" => constant("HUGNETDB_META_ERROR_SERVER_GONE"),
                    "driver"    => "sqlite",
                ),
                false,
            ),
            array(
                array(
                    "db" => "This is not an object",
                    "driver"    => "mysql",
                ),
                false,
            ),
            array(
                array(
                    "metaError" => constant("HUGNETDB_META_ERROR_SERVER_GONE"),
                    "driver"    => "mysql",
                ),
                false,
            ),
            array(
                array(
                    "driver" => "sqlite",
                ),
                true,
            ),
        );
    }


    /**
    * test
    *
    * @param array $attribs Attributes to set in the class.
    * @param array $expect  The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataIsConnected
    */
    public function testIsConnected($attribs, $expect)
    {
        $this->o->setAttributes($attribs);
        $ret = $this->o->isConnected();
        $this->assertSame($expect, $ret);
    }

    /**
    * test
    *
    * @return null
    */
    public function testIsConnectedServerLeft()
    {
        $this->o->metaError = HUGNETDB_META_ERROR_SERVER_GONE;
        $ret = $this->o->isConnected();
        $this->assertFalse($ret);
    }

    /**
    * test
    *
    * @return null
    */
    public function testPrintError()
    {
        $this->o->verbose(10);
        $this->o->errorState = "ABCDE";
        $this->o->error      = -1;
        $this->o->errorMsg   = "This is an error";
        $this->o->metaError      = -1;
        $this->o->metaErrorMsg   = "This is an error";
        ob_start();
        $this->o->printError();
        $ret = ob_get_contents();
        ob_end_clean();
        $file   = $this->readAttribute($this->o, "file");
        $class  = get_class($this->o);
        $driver = $this->readAttribute($this->o, "driver");
        $this->assertSame(
            "(".$class.") Error State: ABCDE\n"
            ."(".$class.") Error: -1\n"
            ."(".$class.") Error Message: This is an error\n"
            ."(".$class.") Meta Error: -1\n"
            ."(".$class.") Meta Error Message: This is an "
            ."error\n",
            $ret
        );
    }

    /**
    * Tests print out when there is no error
    *
    * @return null
    */
    public function testPrintErrorNone()
    {
        $this->o->verbose(true);
        $this->o->errorState = "00000";
        $this->o->error      = 0;
        $this->o->errorMsg   = "";
        ob_start();
        $this->o->printError();
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertSame("", $ret);
    }

    /**
    * tests printout when verbose is off
    *
    * @return null
    */
    public function testPrintErrorNotVerbose()
    {
        ob_start();
        $this->o->printError();
        $ret = ob_get_contents();
        ob_end_clean();
        $this->assertSame("", $ret);
    }

    /**
    * tests printout when verbose is off
    *
    * @return null
    */
    public function testCreateTable()
    {
        $this->assertFalse(HUGnetDB::createTable());
    }

    /**
    * Data provider for testSqlDate
    *
    * @return array
    */
    public static function dataSqlDate()
    {
        return array(
            array("2007-12-25 12:13:14", "2007-12-25 12:13:14"),
            array(1523479275, "2018-04-11 15:41:15"),
            array("January 1, 2006 5:42pm", "2006-01-01 17:42:00"),
            array(true, true),
            array(array(), array()),
        );
    }
    /**
    * test
    *
    * @param mixed $date   The date
    * @param int   $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataSqlDate
    */
    public function testSqlDate($date, $expect)
    {
        $ret = $this->o->sqlDate($date);
        $this->assertSame($expect, $ret);
    }

    /**
    * This test makes sure that SqlDate("NOW") returns a valid date
    *
    * The exact date can not be tested for, because we have no way of knowing
    * what date it will return.  We could be close, but we don't know how close.
    * This just checks to make sure it is returning a valid date.  This will make
    * sure that the date is >= 2000.  That way if it returns unix date 0 (in 1969)
    * it will be an error.
    *
    * @return null
    *
    */
    public function testSqlDateNow()
    {
        $ret = $this->o->sqlDate("NOW");
        preg_match(
            "/2[0-9]{3}-[0-1]{0,1}[0-9]-[0-3]{0,1}[0-9] "
            ."([0-1][0-9]|2[0-3]):[0-5]?[0-9]:[0-5]?[0-9]/",
            $ret,
            $match
        );
        $this->assertSame($match[0], $ret);
    }


    /**
    * Data provider for testFixType
    *
    * @return array
    */
    public static function dataFixType()
    {
        return array(
            array("1", "Int(11)", 1),
            array("1", "FLoat", 1.0),
            array(1.0, "text(45)", "1"),
            array(1.0, "char(2)", "1"),
            array(1.0, "varchar(16)", "1"),
            array(1.0, "asdf(4)", 1.0),
            array(null, 'sdfa', null),
        );
    }
    /**
    * test
    *
    * @param mixed $value  The value to fix
    * @param mixed $type   The type of SQL column it is from
    * @param int   $expect The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataFixType
    */
    public function testFixType($value, $type, $expect)
    {
        $ret = $this->o->fixType($value, $type);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testGetInstance
    *
    * @return array
    */
    public static function dataGetInstance()
    {
        return array(
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "HUGnetDB",
                "HUGnetDB",
            ),
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "Device",
                "Device",
            ),
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "driver",
                false,
            ),
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "asdf",
                false,
            ),
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "HUGnetDBClassTest2",
                false,
            ),
            array(
                null,
                "HUGnetDB",
                "HUGnetDB",
            ),
        );
    }
    /**
    * Tests to make sure this function fails if
    * someone tries to make a cache from a memory
    * sqlite instance.
    *
    * @param string $config The DSN to use to create the PDO object
    * @param string $class  The password
    * @param mixed  $expect The expected value.  Set to FALSE or the class name
    *
    * @return null
    *
    * @dataProvider dataGetInstance()
    */
    public function testGetInstance($config, $class, $expect)
    {
        $o = HUGnetDB::getInstance($class, $config);
        if ($expect === false) {
            $this->assertFalse($o);
        } else {
            $this->assertType("object", $o);
            $this->assertSame($expect, get_class($o));
        }
        unset($o);
    }

    /**
    * Data provider for testGetInstanceCache
    *
    * @return array
    */
    public static function dataGetInstanceCache()
    {
        return array(
            array(
                array(
                    "type" => "sqlite",
                    "file" => ":memory:",
                ),
                "HUGnetDB",
            ),
        );
    }
    /**
    * Tests to make sure this function fails if
    * someone tries to make a cache from a memory
    * sqlite instance.
    *
    * @param string $config The DSN to use to create the PDO object
    * @param string $class  The password
    *
    * @return null
    *
    * @dataProvider dataGetInstanceCache()
    */
    public function testGetInstanceCache($config, $class)
    {
        $o = HUGnetDB::getInstance($class, $config);
        $p = HUGnetDB::getInstance($class, $config);
        $this->assertSame($o, $p);
        unset($o);
        unset($p);
    }

    /**
    * Tests to make sure this function fails if
    * someone tries to make a cache from a memory
    * sqlite instance.
    *
    * @param string $config The DSN to use to create the PDO object
    * @param string $class  The password
    *
    * @return null
    *
    * @dataProvider dataGetInstanceCache()
    */
    public function testGetInstancePBO($config, $class)
    {
        $o = HUGnetDB::getInstance($class, $config);
        $d = $this->readAttribute($o, 'db');
        $this->assertSame("PDO", get_class($d));
        unset($o);
        unset($p);
    }

    /**
    * Data provider for testFixType
    *
    * @return array
    */
    public static function dataFromCSV()
    {
        return array(
            array(
                "1,2,3",
                ",",
                "\n",
                array(array("id" => "1", "name"=>"2", "value"=>"3")),
            ),
            array(
                "1,2,3\n3,4,5\n",
                ",",
                "\n",
                array(
                    array("id" => "1", "name"=>"2", "value"=>"3"),
                    array("id" => "3", "name"=>"4", "value"=>"5"),
              )

            ),
        );
    }
    /**
    * test
    *
    * @param string $CSV      The CSV string to use
    * @param string $fieldSep The separator to use.  "," is the default
    * @param string $rowSep   The separator for rows.  "\n" is the default
    * @param array  $expect   The info to expect returned
    *
    * @return null
    *
    * @dataProvider dataFromCSV
    */
    public function testFromCSV($CSV, $fieldSep, $rowSep, $expect)
    {
        $o = new HUGnetDBClassTest();
        $o->createTable();
        $ret = $o->fromCSV($CSV, $fieldSep, $rowSep);
        $this->assertSame($expect, $ret);
    }

}

/**
 * Test class for HUGnetDB.
 * Generated by PHPUnit on 2007-12-13 at 10:28:11.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBClassTest extends HUGnetDB
{
    /**
    * The name of the table we are using
    */
    protected $table = "HUGnetDBTest";
    /** The number of columns */
    private $_columns = 3;

    /**
    * Creates the database table.
    *
    * Must be defined in child classes
    *
    * @param string $table The name of the table to use
    *
    * @return bool
    */
    public function createTable($table="")
    {
        if (!empty($table)) {
            $this->table = $table;
        }
        $query = "CREATE TABLE IF NOT EXISTS `".$this->table."` (
              `id` int(11) NOT null,
              `name` varchar(16) NOT null default '',
              `value` text,
              PRIMARY KEY  (`id`)
           );";

        $ret = $this->query($query, false);
        $this->getColumns();
    }

    /**
    * kills the database so we can test the class when it doesn't ahve a database
    *
    * @param mixed $val The value to kill the database with
    *
    * @return null
    */
    public function killDb($val = null)
    {
        $this->db = null;
        $this->db = $val;
    }

    /**
    * Calls the protected function cleanSql()
    *
    * @param mixed $string The value to clean
    *
    * @return null
    */
    public function tCleanSql($string)
    {
        return $this->cleanSql($string);
    }

    /**
    * Creates the field array
    *
    * @return null
    */
    public function qGetColumns()
    {
        return $this->getColumns();
    }

    /**
    * Creates the field array
    *
    * @param array $err The error array
    *
    * @return null
    */
    public function qMetaErrorInfo($err)
    {
        return $this->metaErrorInfo($err);
    }

    /**
    * Creates the field array
    *
    * @param array $data The data to prepare
    * @param array $keys The keys to use
    *
    * @return null
    */
    public function qPrepareData($data, $keys)
    {
        return $this->prepareData($data, $keys);
    }

    /**
    * Sets and returns protected and private attributes
    *
    * @param string $attrib The attribute to set
    * @param mixed  $value  The value to set them at.  If blank it just returns
    *                      the value of the attribute.
    *
    * @return mixed
    */
    public function setAttribute($attrib, $value = null)
    {
        if (empty($attrib) || !is_string($attrib)) {
            return null;
        }
        if (!is_null($value)) {
            $this->$attrib = $value;
        }
        return $this->$attrib;
    }

    /**
    * Sets protected and private attributes
    *
    * @param array $attribs The attributes to set
    *
    * @return mixed
    */
    public function setAttributes($attribs)
    {
        if (empty($attribs) || !is_array($attribs)) {
            return;
        }
        foreach ($attribs as $key => $value) {
            $this->setAttribute($key, $value);
        }
    }


}
/**
 * Test class for HUGnetDB.
 *
 * This class is purposely not a derivitave of HUGnetDB.  Please leave it that way!
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HUGnetDBClassTest2
{
}
?>
