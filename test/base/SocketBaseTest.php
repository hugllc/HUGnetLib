<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
if (!defined("HUGNET_INCLUDE_PATH")) {
    define("HUGNET_INCLUDE_PATH", dirname(__FILE__)."/../..");
}
/** The file to test */
//require_once dirname(__FILE__).'/../EPacketMocks.php';
require_once dirname(__FILE__).'/../../base/SocketBase.php';

/**
 * Test class for SocketBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Units
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SocketBaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    SensorBase
     * @access protected
     */
    protected $o;
    /**
     * Test packets in array form
     *
     * This array needs to have the same keys as $testPacketStr and
     * $testPacketReplyStr
     * @see EPacketTest::testPacketStr, EPacketTest::testPacketReplyStr
     */
    var $testPacketArray = array(
        array(
            "Command" => "55",
            "To" => "ABC",
            "From" => "000020",
            "Data" => "01020304",
            "RawData" => "01020304",
            "Length" => 4,
            "Checksum" => "C3",
       ),
        array(
            "Command" => "5C",
            "To" => "000ABC",
            "From" => "000020",
            "RawData" => "",
            "Length" => 0,
            "Checksum" => "CA",
       ),
        array(
            "Command" => "5C",
            "To" => "ABCDEF12345",
            "From" => "000020",
            "RawData" => "",
            "Length" => 0,
            "Checksum" => "F5",
       ),
    );
    /**
     * Test packets in array form
     *
     * This array needs to have the same keys as $testPacketStr and
     * $testPacketReplyStr
     * @see EPacketTest::testPacketStr, EPacketTest::testPacketReplyStr
     */
    var $testPacketReplyArray = array(
        array(
            "Command" => "01",
            "To" => "000020",
            "From" => "000ABC",
            "Data" => "01020304",
            "Length" => 4,
            "Checksum" => "97",
       ),
        array(
            "Command" => "01",
            "From" => "000ABC",
            "To" => "000020",
            "Data" => "",
            "Length" => 0,
            "Checksum" => "97",
       ),
        array(
            "Command" => "01",
            "From" => "ABCDEF",
            "To" => "000020",
            "Data" => "",
            "Length" => 0,
            "Checksum" => "A8",
       ),
    );
    /**
     * Test Packets in string form
     *
     * This array needs to have the same keys as $testPacketArray and
     * $testPacketReplyStr
     * @see EPacketTest::testPacketReplyStr, EPacketTest::testPacketArray
     */
    var $testPacketStr = array(
        "5A5A5A55000ABC0000200401020304C3",
        "5A5A5A5C000ABC00002000CA",
        "5A5A5A5CABCDEF00002000F5",
    );
    /**
     * Test Packets in string form
     *
     * This array needs to have the same keys as $testPacketStr and
     * $testPacketArray
     * @see EPacketTest::testPacketStr, EPacketTest::testPacketArray
     */
    var $testPacketReplyStr = array(
        "5A5A5A01000020000ABC040102030497",
        "5A5A5A01000020000ABC0097",
        "5A5A5A01000020ABCDEF00A8",
    );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     *
     * @return null
     */
    protected function setUp()
    {
        $this->o = new SocketBaseClassTest();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     *
     * @return null
     */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
     * data provider for test PacketBuild()
     *
     * @return array
     */
    public static function dataPacketBuild()
    {
        return array(
            array(
                array(
                    "Command" => "55",
                    "To" => "ABC",
                    "From" => "000020",
                    "Data" => "01020304",
                    "RawData" => "01020304",
                    "Length" => 4,
                    "Checksum" => "C3",
                ),
                "5A5A5A55000ABC0000200401020304C3",
            ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "000ABC",
                    "From" => "000020",
                    "RawData" => "",
                    "Length" => 0,
                    "Checksum" => "CA",
                ),
                "5A5A5A5C000ABC00002000CA",
            ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "ABCDEF12345",
                    "From" => "000020",
                    "RawData" => "",
                    "Length" => 0,
                    "Checksum" => "F5",
                ),
                "5A5A5A5CABCDEF00002000F5",
            ),
            array(
                "This is not an array",
                false,
            ),
        );
    }

    /**
     * Test packetBuild()
     *
     * @param array  $packet The packet string to use
     * @param string $expect What to expect in return
     *
     * @return null
     *
     * @dataProvider dataPacketBuild
     */
    public function testPacketBuild($packet, $expect)
    {
        $pkt = $this->o->PacketBuild($packet);
        $this->assertSame($expect, $pkt);
    }

    /**
     * data provider for test PacketBuild()
     *
     * @return array
     */
    public static function dataUnbuildPacket()
    {
        return array(
            array(
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "Command" => "55",
                    "To" => "000ABC",
                    "From" => "000020",
                    "Length" => 4,
                    "RawData" => "01020304",
                    "Data" => array(1,2,3,4),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                    "RawPacket" => "55000ABC0000200401020304C3"
                ),
            ),
            array(
                "5A5A5A5C000ABC00002000CA",
                array(
                    "Command" => "5C",
                    "To" => "000ABC",
                    "From" => "000020",
                    "Length" => 0,
                    "RawData" => "",
                    "Data" => array(),
                    "Checksum" => "CA",
                    "CalcChecksum" => "CA",
                    "RawPacket" => "5C000ABC00002000CA"
                ),
            ),
            array(
                "5A5A5A5CABCDEF00002000F5",
                array(
                    "Command" => "5C",
                    "To" => "ABCDEF",
                    "From" => "000020",
                    "Length" => 0,
                    "RawData" => "",
                    "Data" => array(),
                    "Checksum" => "F5",
                    "CalcChecksum" => "F5",
                    "RawPacket" => "5CABCDEF00002000F5"
                ),
            ),
        );
    }
    /**
     * TestUnbuildPacket
     *
     * @return null
     *
     * @dataProvider dataUnbuildPacket().
     */
    public function testUnbuildPacket($packet, $expect)
    {
        $pkt = $this->o->unbuildPacket($packet);
        $this->assertSame($expect, $pkt);
    }

    /**
     * data provider for test PacketGetChecksum()
     *
     * @return array
     */
    public static function dataPacketGetChecksum()
    {
        return array(
            array("55000ABC0000200401020304", "C3"),
            array("5C000ABC00002000", "CA"),
            array("5CABCDEF00002000", "F5"),
            array("0300002000000100", "22"),
            array("0300002000000200", "21"),
            array("0300002000000300", "20"),
            array("0300002000000400", "27"),
            array("0300000400002000", "27"),
            array("5E000000000DEF0401020304", "BC"),
        );
    }

    /**
     * Test buildPacket()
     *
     * @param string $packet The packet string to use
     * @param array  $expect What to expect in return
     *
     * @return null
     *
     * @dataProvider dataPacketGetChecksum
     */
    public function testPacketGetChecksum($packet, $expect)
    {
        $cksum = $this->o->PacketGetChecksum($packet);
        $this->assertSame($expect, $cksum);
    }

    /**
     * data provider for testGetAll()
     *
     * @return array
     */
    public static function dataGetAll()
    {
        return array(
            array("String", true),
            array(0, false),
            array(-1, true),
            array(1234, true),
            array(null, false),
        );
    }

    /**
     * Test getAll()
     *
     * @param mixed $value  The value to give
     * @param bool  $expect What to expect in $this->o->getAll
     *
     * @return null
     *
     * @dataProvider dataGetAll
     */
    public function testGetAll($value, $expect)
    {
        $cksum = $this->o->getAll($value);
        $this->assertAttributeSame($expect, "getAll", $this->o);
    }

    /**
     * data provider for testRecvPacket()
     *
     * @return array
     */
    public static function dataRecvPacket()
    {
        return array(
            array(
                "",
                1,
                false,
            ),
            array(
                "200401020305A5A5A55000ABC0000200401020304C30305A5A5A55000",
                -1,
                array(
                    "Command" => "55",
                    "To" => "000ABC",
                    "From" => "000020",
                    "Length" => 4,
                    "RawData" => "01020304",
                    "Data" => array(1,2,3,4),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                    "RawPacket" => "55000ABC0000200401020304C3"
                ),
            ),
        );
    }

    /**
     * Test getAll()
     *
     * @param string $preload Hex string "packet(s)" to receive
     * @param int    $timeout The value to give
     * @param mixed  $expect  What to expect in $this->o->getAll
     *
     * @return null
     *
     * @dataProvider dataRecvPacket
     */
    public function testRecvPacket($preload, $timeout, $expect)
    {
        $this->o->readCharString = (string)$preload;
        $this->o->readCharIndex = 0;
        $ret = $this->o->recvPacket($timeout);
        $this->assertSame($expect, $ret);
    }

    /**
     * data provider for testRecvPacket()
     *
     * @return array
     */
    public static function dataSendPacket()
    {
        return array(
            array(
                array(),
                0,
                false
            ),
            array(
                array("This is an array"),
                true,
                true
            ),
        );
    }

    /**
     * Test sendPacket()
     *
     * @param array $packet    Hex string "packet(s)" to receive
     * @param bool  $getReply  The value to give
     * @param mixed $expect    What to expect to be returned
     *
     * @return null
     *
     * @dataProvider dataSendPacket
     */
    public function testSendPacket($packet, $getReply, $expect)
    {
        $ret = $this->o->sendPacket($packet, $getReply);
        $this->assertSame($expect, $ret, "getReply not set correctly");
        $this->assertAttributeSame($packet, "writePacket", $this->o);
    }


}
/**
 * Test class for SocketBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Units
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SocketBaseClassTest extends SocketBase
{
    /** @var This is the string that we will read data from */
    public $readCharString = "";
    /** @var This is the index of the string that we will read data from */
    public $readCharIndex = 0;
    /** @var This is the array that we will write data to */
    public $writePacket = null;


    /**
    *  Gets a character
    *
    * Returns the packet array on success, and false on failure
    *
    * @param int $timeout The timeout to use.
    *
    * @return bool
    */
    protected function readChar($timeout = -1)
    {
        if ($this->readCharIndex >= strlen($this->readCharString)) {
            return false;
        }
        $read = substr($this->readCharString, $this->readCharIndex, 2);
        $this->readCharIndex += 2;
        return chr(hexdec($read));
    }
    /**
    * Sends out a packet
    *
    * @param array $packet   the packet to send out
    * @param bool  $GetReply Whether to expect a reply or not
    *
    * @return bool false on failure, true on success
    */
    protected function Write($packet, $GetReply = true)
    {
        $this->writePacket = $packet;
        return $GetReply;
    }

}
?>
