<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2009 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$    
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
/** Test framework */
require_once 'PHPUnit/Framework.php';
/** The file to test */
require_once dirname(__FILE__).'/../../base/SocketBase.php';
/** The file to test */
require_once dirname(__FILE__).'/../EPacketTest.php';

/**
 * Test class for SensorBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Units
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SocketBaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    SensorBase
     * @access protected
     */
    protected $o;
    /** 
     * Test packets in array form 
     *
     * This array needs to have the same keys as $testPacketStr and $testPacketReplyStr     
     * @see EPacketTest::testPacketStr, EPacketTest::testPacketReplyStr    
     */
    var $testPacketArray = array(
        array(
            "Command" => "55",
            "To" => "ABC",
            "From" => "000020",
            "Data" => "01020304",
            "RawData" => "01020304",
            "Length" => 4,
            "Checksum" => "C3",
       ),
        array(
            "Command" => "5C",
            "To" => "000ABC",
            "From" => "000020",
            "RawData" => "",
            "Length" => 0,
            "Checksum" => "CA",
       ),
        array(
            "Command" => "5C",
            "To" => "ABCDEF12345",
            "From" => "000020",
            "RawData" => "",
            "Length" => 0,
            "Checksum" => "F5",
       ),
    );
    /** 
     * Test packets in array form 
     *
     * This array needs to have the same keys as $testPacketStr and $testPacketReplyStr     
     * @see EPacketTest::testPacketStr, EPacketTest::testPacketReplyStr    
     */
    var $testPacketReplyArray = array(
        array(
            "Command" => "01",
            "To" => "000020",
            "From" => "000ABC",
            "Data" => "01020304",
            "Length" => 4,
            "Checksum" => "97",
       ),
        array(
            "Command" => "01",
            "From" => "000ABC",
            "To" => "000020",
            "Data" => "",
            "Length" => 0,
            "Checksum" => "97",
       ),
        array(
            "Command" => "01",
            "From" => "ABCDEF",
            "To" => "000020",
            "Data" => "",
            "Length" => 0,
            "Checksum" => "A8",
       ),
    );
    /** 
     * Test Packets in string form 
     *
     * This array needs to have the same keys as $testPacketArray and $testPacketReplyStr     
     * @see EPacketTest::testPacketReplyStr, EPacketTest::testPacketArray    
     */
    var $testPacketStr = array(
        "5A5A5A55000ABC0000200401020304C3",
        "5A5A5A5C000ABC00002000CA",
        "5A5A5A5CABCDEF00002000F5",
    );
    /** 
     * Test Packets in string form 
     *
     * This array needs to have the same keys as $testPacketStr and $testPacketArray
     * @see EPacketTest::testPacketStr, EPacketTest::testPacketArray    
     */
    var $testPacketReplyStr = array(
        "5A5A5A01000020000ABC040102030497",
        "5A5A5A01000020000ABC0097",
        "5A5A5A01000020ABCDEF00A8",
    );

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     *
     * @return null
     */
    public static function main()
    {
        include_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('SensorBaseTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     *
     * @return null
     */
    protected function setUp()
    {
        $this->o = new SocketBase();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     *
     * @return null
     */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
     * data provider for test PacketBuild()
     *
     * @return array
     */    
    public static function dataPacketBuild() 
    {
        return array(
            array(
                array(
                    "Command" => "55",
                    "To" => "ABC",
                    "From" => "000020",
                    "Data" => "01020304",
                    "RawData" => "01020304",
                    "Length" => 4,
                    "Checksum" => "C3",
               ),
                "5A5A5A55000ABC0000200401020304C3",
           ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "000ABC",
                    "From" => "000020",
                    "RawData" => "",
                    "Length" => 0,
                    "Checksum" => "CA",
               ),
                "5A5A5A5C000ABC00002000CA",
           ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "ABCDEF12345",
                    "From" => "000020",
                    "RawData" => "",
                    "Length" => 0,
                    "Checksum" => "F5",
               ),
                "5A5A5A5CABCDEF00002000F5",
           ),
        );
    }

    /**
     * Test packetBuild()
     *
     * @param array  $packet The packet string to use
     * @param string $expect What to expect in return
     *
     * @return null
     *
     * @dataProvider dataPacketBuild
     */
    public function testPacketBuild($packet, $expect) 
    {
        $pkt = $this->o->PacketBuild($packet);
        $this->assertSame($expect, $pkt);
    }
    /**
     * data provider for test PacketGetChecksum()
     *
     * @return array
     */    
    public static function dataPacketGetChecksum() 
    {
        return array(
            array("55000ABC0000200401020304", "C3"),
            array("5C000ABC00002000", "CA"),
            array("5CABCDEF00002000", "F5"),
            array("0300002000000100", "22"),
            array("0300002000000200", "21"),
            array("0300002000000300", "20"),
            array("0300002000000400", "27"),
            array("0300000400002000", "27"),
            array("5E000000000DEF0401020304", "BC"),
        );
    }

    /**
     * Test buildPacket()
     *
     * @param string $packet The packet string to use
     * @param array  $expect What to expect in return
     *
     * @return null
     *
     * @dataProvider dataPacketGetChecksum
     */
    public function testPacketGetChecksum($packet, $expect) 
    {
        $cksum = $this->o->PacketGetChecksum($packet);
        $this->assertSame($expect, $cksum);
    }

    /**
     * TestUnbuildPacket
     *
     * @return null
     *
     * @todo Implement testUnbuildPacket().
     */
    public function testUnbuildPacket() 
    {
        $check = array("Command", "To", "From", "RawData", "Checksum", "Length");
        foreach ($this->testPacketStr as $key => $str) {
            $pkt = $this->o->unbuildPacket($str);
            EPacketTest::validPacketArray($pkt, $this->testPacketArray[$key], $check);
        }
    }

    

}
?>
