<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../tables/RawHistoryTable.php';
require_once dirname(__FILE__)."/HUGnetDBTableTestBase.php";

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class RawHistoryTableTest extends HUGnetDBTableTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->pdo = &$this->config->servers->getPDO();
        $this->o = new RawHistoryTable();
        $this->o->create();
        parent::Setup();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            dirname(__FILE__).'/../files/RawHistoryTableTest.xml'
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataColumns()
    {
        $o = new RawHistoryTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlColumns");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataIndexes()
    {
        $o = new RawHistoryTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlIndexes");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataVars()
    {
        return array(
            array(new RawHistoryTable()),
        );
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $o = new RawHistoryTable($preload);
        $this->assertSame($expect, $o->toArray());
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
            array(
                array(
                    "id" => 100,
                    "packet" => array(
                        "To" => "000012",
                        "From" => "000283",
                        "Date" => 1048472484,
                        "Command" => "55",
                        "Data" => "01020304",
                    ),
                    "device" => new DeviceContainer(),
                    "command" => "55",
                    "dataIndex" => 123,
                ),
                array(
                    "group" => "default",
                    "id" => 100,
                    "Date" => 0,
                    "packet" => array(
                        "To" => "000012",
                        "From" => "000283",
                        "Date" => 1048472484,
                        "Command" => "55",
                        "Length" => 4,
                        "Time" => 0.0,
                        "Data" => array(1,2,3,4),
                        "RawData" => "01020304",
                        "Type" => "SENSORREAD",
                        "Reply" => null,
                        "Checksum" => "C6",
                        "CalcChecksum" => "C6",
                    ),
                    "command" => "55",
                    "dataIndex" => 123,
                ),
            ),
            array(
                array(
                    "id" => 100,
                    "packet" => array(
                        "To" => "000012",
                        "From" => "000283",
                        "Date" => 1048472484,
                        "Command" => "55",
                        "Data" => "01020304",
                    ),
                    "device" => array(),
                    "command" => "55",
                    "dataIndex" => 123,
                ),
                array(
                    "group" => "default",
                    "id" => 100,
                    "Date" => 0,
                    "packet" => array(
                        "To" => "000012",
                        "From" => "000283",
                        "Date" => 1048472484,
                        "Command" => "55",
                        "Length" => 4,
                        "Time" => 0.0,
                        "Data" => array(1,2,3,4),
                        "RawData" => "01020304",
                        "Type" => "SENSORREAD",
                        "Reply" => null,
                        "Checksum" => "C6",
                        "CalcChecksum" => "C6",
                    ),
                    "command" => "55",
                    "dataIndex" => 123,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromArray
    */
    public function testFromArray($preload, $expect)
    {
        $date = time();
        $this->o->fromArray($preload);
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame("PacketContainer", get_class($data["packet"]));
        $this->assertSame("PacketContainer", get_class($this->o->packet));
        $row = $this->o->toArray();
        $this->assertThat(
            $row["devicesHistoryDate"],
            $this->greaterThanOrEqual($date),
            "Date is wrong on key $key"
        );
        unset($row["devicesHistoryDate"]);
        $this->assertSame($expect, $row);
    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("Date", "2010-04-25 13:42:23", 1272202943),
            array("Date", "2010-04-25", 1272153600),
            array("Date", "Sun, 25 April 2010, 1:42:23pm", 1272202943),
            array("Date", 1234567890, 1234567890),
            array("Date", "This is not a date", 0),
            array("id", 71, 71),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->$var = $value;
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $data[$var]);
    }
    /**
    * Data provider for testInsertRow
    *
    * @return array
    */
    public static function dataInsertRecord()
    {
        $packet = new PacketContainer(
            array(
                "Date" => "2003-01-23 23:35:12",
            )
        );
        $device = new DeviceContainer();

        return array(
            array(
                array(
                        "id"        => "123",
                        "Date"      => "1977-01-01 08:09:00",
                        "packet"    => $packet->toString(),
                        "device"    => $device->toArray(),
                        "command"   => "55",
                        "dataIndex" => "232",
                ),
                array(
                    array(
                        "id"        => "123",
                        "Date"      => "220954140",
                        "packet"    => $packet->toZip(),
                        "command"   => "55",
                        "dataIndex" => "232",
                    ),
                ),
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array $preload The array to preload into the class
    * @param array $expect  The expected return
    *
    * @dataProvider dataInsertRecord
    *
    * @return null
    */
    public function testInsertRecord($preload, $expect)
    {
        $date = time();
        RawHistoryTable::insertRecord($preload);
        $stmt = $this->pdo->query("SELECT * FROM `rawHistory`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        foreach (array_keys($rows) as $key) {
            $this->assertThat(
                $rows[$key]["devicesHistoryDate"],
                $this->greaterThanOrEqual($date),
                "Date is wrong on key $key"
            );
            unset($rows[$key]["devicesHistoryDate"]);
        }
        $this->assertSame($expect, $rows);
    }

}

?>
