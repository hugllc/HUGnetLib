<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../tables/DataCollectorsTable.php';
require_once dirname(__FILE__).'/../../containers/DeviceContainer.php';
require_once dirname(__FILE__)."/HUGnetDBTableTestBase.php";

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DataCollectorsTableTest extends HUGnetDBTableTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "hugnet_database" => "HUGNet",
            "script_gateway" => 4,
            "pluginData" => array(
                5 => "h",
            ),
            "admin_email" => "me@mydomain.com",
            "useSocket" => "dummy",

        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->pdo = &$this->config->servers->getPDO();
        $this->o = new DataCollectorsTable();
        $this->o->create();
        parent::Setup();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            dirname(__FILE__).'/../files/DataCollectorsTableTest.xml'
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataColumns()
    {
        $o = new DataCollectorsTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlColumns");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataIndexes()
    {
        $o = new DataCollectorsTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlIndexes");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataVars()
    {
        return array(
            array(new DataCollectorsTable()),
        );
    }

    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array(
                "LastContact", "2003-02-28 02:00:00", gmmktime(02, 0, 0, 2, 28, 2003)
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->$var = $value;
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $data[$var]);
    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataOnGateway()
    {
        return array(
            array(
                1,
                true,
                array(
                    0 => array(
                        'group' => 'default',
                        'id' => '484',
                        'GatewayKey' => '1',
                        'name' => 'Test2',
                        'ip' => '192.168.192.125',
                        'LastContact' => 123456789,
                        'SetupString' => "c",
                        'Config' => 'd',
                    ),
                    1 => array(
                        'group' => 'default',
                        'id' => '404',
                        'GatewayKey' => '1',
                        'name' => 'Test1',
                        'ip' => '192.168.192.5',
                        'LastContact' => 12345678,
                        'SetupString' => "a",
                        'Config' => 'b',
                    ),
                ),
            ),
            array(
                8,
                false,
                array(
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param int   $GatewayKey The id to use
    * @param bool  $return     The expected return
    * @param mixed $expect     The expected data
    *
    * @return null
    *
    * @dataProvider dataOnGateway
    */
    public function testOnGateway($GatewayKey, $return, $expect)
    {
        $ret = $this->o->onGateway($GatewayKey);
        $this->assertSame($return, $ret, "Return Wrong");
        if ($ret) {
            $data = array();
            do {
                $data[] = $this->o->toArray();
            } while ($this->o->nextInto());
            $this->assertSame($expect, $data, "Data Wrong");
        }
    }
    /**
    * Data provider for testRegisterMe
    *
    * @return array
    */
    public static function dataRegisterMe()
    {
        return array(
            array(
                array(
                    "id" => 156,
                    "GatewayKey" => 23,
                    "name" => "hello",
                    "ip" => "192.168.54.2",
                    "SetupString" => "there",
                    "Config" => "Hello",
                ),
                array(
                    0 => array(
                        'id' => '404',
                        'GatewayKey' => '1',
                        'name' => 'Test1',
                        'ip' => '192.168.192.5',
                        'LastContact' => '12345678',
                        'SetupString' => "a",
                        'Config' => "b",
                    ),
                    1 => array(
                        'id' => '484',
                        'GatewayKey' => '1',
                        'name' => 'Test2',
                        'ip' => '192.168.192.125',
                        'LastContact' => '123456789',
                        'SetupString' => "c",
                        'Config' => "d",
                    ),
                    2 => array(
                        'id' => '848',
                        'GatewayKey' => '2',
                        'name' => 'Test3',
                        'ip' => '192.168.192.82',
                        'LastContact' => '123456789',
                        'SetupString' => "e",
                        'Config' => "f",
                    ),
                    3 => array(
                        'id' => '156',
                        'GatewayKey' => '23',
                        'name' => 'hello',
                        'ip' => '192.168.54.2',
                        'SetupString' => "there",
                        'Config' => "Hello",
                    ),
                ),
                true,
            ),
        );
    }
    /**
    * Tests the insert of a DeviceID
    *
    * @param mixed $data   The data to use
    * @param array $expect The expected table row
    * @param bool  $ret    The expected return
    *
    * @dataProvider dataRegisterMe
    *
    * @return null
    */
    public function testRegisterMe($data, $expect, $ret)
    {
        $time = time();
        $this->o->clearData();
        $this->o->fromAny($data);
        $return = $this->o->registerMe();
        $stmt = $this->pdo->query("SELECT * FROM `datacollectors`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        foreach ($rows as $k => $v) {
            if ($v["id"] == $data["id"]) {
                $this->assertGreaterThanOrEqual(
                    $time, $v["LastContact"], "LastContact not set properly"
                );
                unset ($rows[$k]["LastContact"]);
            }
        }
        $this->assertSame($expect, $rows);
        $this->assertSame($ret, $return);
    }
    /**
    * data provider for testForceTable
    *
    * @return array
    */
    public static function dataFromAny()
    {
        return array(
            array(
                new DeviceContainer(array(
                    "id" => 12,
                    "HWPartNum" => "0039-21-02-A",
                    "FWPartNum" => "0039-20-01-A",
                    "FWVersion" => "0.1.2",
                    "GatewayKey" => 5,
                    "DeviceName" => "This is a Name",
                )),
                array(
                    "id" => 12,
                    'GatewayKey' => 5,
                    'name' => 'This is a Name',
                    'LastContact' => 0,
                    'SetupString' => '000000000C00392102410039200141000102FFFFFF00',
                    'Config' => "YToxNDp7czo3OiJzZXJ2ZXJzIjthOjE6e2k6MDthOjEwOntzO"
                        ."jU6Imdyb3VwIjtzOjc6ImRlZmF1bHQiO3M6NjoiZHJpdmVyIjtzOjY6I"
                        ."nNxbGl0ZSI7czo0OiJob3N0IjtzOjk6ImxvY2FsaG9zdCI7czo0OiJwb"
                        ."3J0IjtpOjMzMDY7czoyOiJkYiI7czo2OiJIVUduZXQiO3M6Njoic29ja"
                        ."2V0IjtzOjA6IiI7czo0OiJ1c2VyIjtzOjA6IiI7czo4OiJwYXNzd29yZ"
                        ."CI7czowOiIiO3M6Nzoib3B0aW9ucyI7YTowOnt9czo0OiJmaWxlIjtzO"
                        ."jg6IjptZW1vcnk6Ijt9fXM6Nzoic29ja2V0cyI7YTowOnt9czo1OiJob"
                        ."29rcyI7YToxOntzOjU6Imhvb2tzIjthOjA6e319czoxNToiaHVnbmV0X"
                        ."2RhdGFiYXNlIjtzOjY6IkhVR05ldCI7czoxNDoic2NyaXB0X2dhdGV3Y"
                        ."XkiO2k6NDtzOjEwOiJwbHVnaW5EYXRhIjthOjE6e2k6NTtzOjE6ImgiO"
                        ."31zOjExOiJhZG1pbl9lbWFpbCI7czoxNToibWVAbXlkb21haW4uY29tI"
                        ."jtzOjc6InBsdWdpbnMiO2E6Mjp7czozOiJkaXIiO3M6NDM6Ii9ob21lL"
                        ."2h1Z25ldC9kZXZlbC9IVUduZXQvSFVHbmV0TGliL3BsdWdpbnMiO3M6O"
                        ."ToiZXh0ZW5zaW9uIjtzOjQ6Ii5waHAiO31zOjEyOiJQbHVnaW5XZWJEa"
                        ."XIiO3M6MDoiIjtzOjEzOiJQbHVnaW5Ta2lwRGlyIjthOjA6e31zOjk6I"
                        ."nVzZVNvY2tldCI7czo1OiJkdW1teSI7czo3OiJ2ZXJib3NlIjtpOjA7c"
                        ."zoxMDoiZGF0ZUZvcm1hdCI7czoxMToiWS1tLWQgSDppOnMiO3M6NDoid"
                        ."GVzdCI7YjowO30=",
                ),
            ),
        );
    }

    /**
    * test the forceTable routine
    *
    * @param array $dev    The device to use
    * @param mixed $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataFromAny
    */
    public function testFromAny($dev, $expect)
    {
        $this->o->fromAny($dev);
        $this->assertSame($expect, $this->o->toArray(false));
    }
}

?>
