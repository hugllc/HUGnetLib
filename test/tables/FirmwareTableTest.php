<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../tables/FirmwareTable.php';
require_once dirname(__FILE__)."/HUGnetDBTableTestBase.php";
/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class FirmwareTableTest extends HUGnetDBTableTestBase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->config = array(
        );
        $this->myConfig = &ConfigContainer::singleton();
        $this->myConfig->forceConfig($this->config);
        $this->pdo = &$this->myConfig->servers->getPDO();
        $this->o = new FirmwareTable();
        $this->o->create();
        parent::Setup();
    }
    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            dirname(__FILE__).'/../files/FirmwareTableTest.xml'
        );
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataColumns()
    {
        $o = new FirmwareTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlColumns");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataIndexes()
    {
        $o = new FirmwareTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlIndexes");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataVars()
    {
        return array(
            array(new FirmwareTable()),
        );
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $o = new FirmwareTable($preload);
        $this->assertAttributeSame($expect, "data", $o);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromArray
    */
    public function testFromArray($preload, $expect)
    {
        $this->o->fromArray($preload);
        $this->assertAttributeSame($expect, "data", $this->o);
    }
    /**
    * data provider for testGetLatest
    *
    * @return array
    */
    public static function dataGetLatest()
    {
        return array(
            array(
                // No HWPartNum Specified
                array(
                    "FWPartNum" => "0039-20-01-C",
                    "RelStatus" => 8,
                    "Target" => "mega16",
                ),
                array(
                    "group" => "default",
                    "id" => "3",
                    "Version" => "2.2.3",
                    "Code" => "abc",
                    "Data" => "def",
                    "FWPartNum" => "0039-20-01-C",
                    "HWPartNum" => "0039-21",
                    "Date" => "2008-04-16 03:54:21",
                    "FileType" => "SREC",
                    "RelStatus" => 8,
                    "Tag" => "v1.2.3",
                    "Target" => "mega16",
                    "Active" => "1",
                ),
                true,
            ),
            array(
                array(
                    "FWPartNum" => "0039-20-01-C",
                    "HWPartNum" => "0039-21",
                    "RelStatus" => 8,
                    "Target" => "mega16",
                ),
                array(
                    "group" => "default",
                    "id" => "3",
                    "Version" => "2.2.3",
                    "Code" => "abc",
                    "Data" => "def",
                    "FWPartNum" => "0039-20-01-C",
                    "HWPartNum" => "0039-21",
                    "Date" => "2008-04-16 03:54:21",
                    "FileType" => "SREC",
                    "RelStatus" => 8,
                    "Tag" => "v1.2.3",
                    "Target" => "mega16",
                    "Active" => "1",
                    "Target" => "mega16",
                ),
                true,
            ),
            array(
                array(
                    "FWPartNum" => "0039-20-01-C",
                    "HWPartNum" => "0039-21",
                    "RelStatus" => 4,
                    "Target" => "mega16",
                ),
                array(
                    "group" => "default",
                    "id" => "2",
                    "Version" => "1.3.3",
                    "Code" => "abc",
                    "Data" => "def",
                    "FWPartNum" => "0039-20-01-C",
                    "HWPartNum" => "0039-21",
                    "Date" => "2009-04-16 03:54:21",
                    "FileType" => "SREC",
                    "RelStatus" => 4,
                    "Tag" => "v1.2.3",
                    "Target" => "mega16",
                    "Active" => "1",
                ),
                true,
            ),
            array(
                array(
                    "FWPartNum" => "0039-20-01-C",
                    "HWPartNum" => "0039-21",
                    "RelStatus" => 4,
                    "Target" => "mega32",
                ),
                array(
                ),
                false,
            ),
            array(
                array(
                    "FWPartNum" => "0039-01-01-C",
                    "HWPartNum" => "0039-86",
                    "Status" => 8,
                    "Target" => "mega16",
                ),
                array(
                ),
                false,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $data    The data array to exepct
    * @param bool  $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataGetLatest
    */
    public function testGetLatest($preload, $data, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->getLatest();
        $this->assertSame($expect, $ret, "Return value was not correct");
        if ($ret) {
            $this->assertAttributeSame($data, "data", $this->o, "Data not correct");
        }
    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("Date", "2010-04-25 13:42:23", "2010-04-25 13:42:23"),
            array("Date", "2010-04-25", "2010-04-25 00:00:00"),
            array(
                "Date", "Sun, 25 April 2010, 1:42:23pm", "2010-04-25 13:42:23"
            ),
            array("Date", 1234567890, "2009-02-13 17:31:30"),
            array("Date", "This is not a date", "1970-01-01 00:00:00"),
            array("RelStatus", "DEV", FirmwareTable::DEV),
            array("RelStatus", "BAD", FirmwareTable::BAD),
            array("RelStatus", "BETA", FirmwareTable::BETA),
            array("RelStatus", "RELEASE", FirmwareTable::RELEASE),
            array("RelStatus", "72", 72),
            array("HWPartNum", "0039-21-04-C", "0039-21"),
            array("HWPartNum", "34523442350039-21-04-C", "0039-21"),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->$var = $value;
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $data[$var]);
    }

    /**
    * data provider for testCompareVesrion
    *
    * @return array
    */
    public static function dataCompareVersion()
    {
        return array(
            array(array(), "1.2.3", "1.2.3", 0),
            array(array(), "1.2.4", "1.2.3", 1),
            array(array(), "1.3.3", "1.2.3", 1),
            array(array(), "2.2.3", "1.2.3", 1),
            array(array(), "1.2.3", "1.2.4", -1),
            array(array(), "1.2.3", "1.3.3", -1),
            array(array(), "1.2.3", "2.2.3", -1),
            array(array("Version" => "1.3.3"), "1.2.3", null, -1),
            array(array("Version" => "1.2.3"), "1.2.4", "", 1),
            array(array("Version" => "1.2.3"), "01.02.03", "", 0),
        );
    }
    /**
    * test
    *
    * @param array  $preload The value to preload
    * @param string $v1      The first version
    * @param string $v2      The second version
    * @param int    $expect  What to expect (1, 0, -1)
    *
    * @return null
    *
    * @dataProvider dataCompareVersion
    */
    function testCompareVersion($preload, $v1, $v2, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $ret = $this->o->CompareVersion($v1, $v2);
        $this->assertEquals($expect, $ret);
    }

}

?>
