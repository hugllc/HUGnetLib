<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2011 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../tables/RawHistoryOldTable.php';
require_once dirname(__FILE__)."/HUGnetDBTableTestBase.php";

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Tables
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2011 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class RawHistoryOldTableTest extends HUGnetDBTableTestBase
{

    static $config = array(
        "servers" => array(
            array(
                "driver" => "sqlite",
                "file" => ":memory:",
                "group" => "default",
            ),
            array(
                "driver" => "sqlite",
                "file" => ":memory:",
                "group" => "old",
            ),
            array(
                "driver" => "sqlite",
                "file" => ":memory:",
                "group" => "other",
            ),
        ),
    );
    static $createQuery = "CREATE TABLE `history_raw` (
        `HistoryRawKey` int(11) NOT NULL,
        `DeviceKey` int(11) NOT NULL DEFAULT '0',
        `Date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
        `RawData` varchar(255) NOT NULL DEFAULT '',
        `ActiveSensors` tinyint(4) NOT NULL DEFAULT '0',
        `Driver` varchar(32) NOT NULL DEFAULT 'eDEFAULT',
        `RawSetup` varchar(128) NOT NULL,
        `RawCalibration` varchar(255) NOT NULL,
        `Status` varchar(16) NOT NULL DEFAULT 'GOOD',
        `ReplyTime` float NOT NULL DEFAULT '0',
        `sendCommand` char(2) NOT NULL DEFAULT '',
        `UTCOffset` tinyint(4) NOT NULL DEFAULT '0'
        )";

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig(self::$config);
        $this->pdo = &$this->config->servers->getPDO("old");
        $this->pdo->query(self::$createQuery);
        $this->o = new RawHistoryOldTable();
        parent::Setup();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            dirname(__FILE__).'/../files/RawHistoryOldTableTest.xml'
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataColumns()
    {
        $config = ConfigContainer::singleton();
        $config->forceConfig(self::$config);
        $pdo = &$config->servers->getPDO("old");
        $pdo->query(self::$createQuery);
        $o = new RawHistoryOldTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlColumns");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataIndexes()
    {
        $config = ConfigContainer::singleton();
        $config->forceConfig(self::$config);
        $pdo = &$config->servers->getPDO("old");
        $pdo->query(self::$createQuery);
        $o = new RawHistoryOldTable();
        return HUGnetDBTableTestBase::splitObject($o, "sqlIndexes");
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataVars()
    {
        $config = ConfigContainer::singleton();
        $config->forceConfig(self::$config);
        $pdo = &$config->servers->getPDO("old");
        $pdo->query(self::$createQuery);
        return array(
            array(new RawHistoryOldTable()),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $obj The object to work with
    *
    * @return null
    *
    * @dataProvider dataVars
    */
    public function testGroupVar($obj)
    {
        $default = $this->readAttribute($obj, "default");
        $this->assertSame(
            "old",
            $default["group"],
            '$obj->default["group"] must be set to "old"'
        );
    }

    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("Date", 1272202943, "2010-04-25 08:42:23"),
            array("Date", "2010-04-25", "2010-04-25 00:00:00"),
            array("Date", "This is not a date", "1970-01-01 00:00:00"),
            array("DeviceKey", 71, 71),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->$var = $value;
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $data[$var]);
    }
    /**
    * Data provider for testToRaw
    *
    * @return array
    */
    public static function dataToRaw()
    {
        return array(
            array(  // #0 Nothing given
                array(
                ),
                array(
                ),
                "default",
                false,
            ),
            array(  // #0 Nothing given
                array(
                    "id" => 56,
                    "SaveDate" => 1280251875,
                    "SetupString" => "00000000380039120041003911034200000140000000",
                    "SensorString" => "YToxOTp7czoxNDoiUmF3Q2FsaWJyYXRpb24iO3M6MDo"
                        ."iIjtzOjc6IlNlbnNvcnMiO2k6MTM7czoxMzoiQWN0aXZlU2Vuc29ycyI"
                        ."7aTo5O3M6MTU6IlBoeXNpY2FsU2Vuc29ycyI7aTo5O3M6MTQ6IlZpcnR"
                        ."1YWxTZW5zb3JzIjtpOjQ7czoxMjoiZm9yY2VTZW5zb3JzIjtiOjA7aTow"
                        ."O2E6MTU6e3M6MjoiaWQiO2k6MDtzOjQ6InR5cGUiO3M6MTQ6IkJDVGhl"
                        ."cm0yMzIyNjQwIjtzOjg6ImxvY2F0aW9uIjtzOjA6IiI7czo4OiJkYXRh"
                        ."VHlwZSI7czozOiJyYXciO3M6NToiZXh0cmEiO2E6MDp7fXM6NToidW5p"
                        ."dHMiO3M6NzoiJiMxNzY7RiI7czo1OiJib3VuZCI7YjowO3M6MTQ6InJh"
                        ."d0NhbGlicmF0aW9uIjtzOjA6IiI7czoxMjoidGltZUNvbnN0YW50Ijtp"
                        ."OjE7czoyOiJBbSI7aToxMDIzO3M6MjoiVGYiO2k6NjU1MzY7czoxOiJE"
                        ."IjtpOjY1NTM2O3M6MToicyI7aTo2NDtzOjM6IlZjYyI7aTo1O3M6ODoi"
                        ."ZGVjaW1hbHMiO2k6Mjt9aToxO2E6MTU6e3M6MjoiaWQiO2k6MDtzOjQ6"
                        ."InR5cGUiO3M6MTQ6IkJDVGhlcm0yMzIyNjQwIjtzOjg6ImxvY2F0aW9u"
                        ."IjtzOjA6IiI7czo4OiJkYXRhVHlwZSI7czozOiJyYXciO3M6NToiZXh0"
                        ."cmEiO2E6MDp7fXM6NToidW5pdHMiO3M6NzoiJiMxNzY7RiI7czo1OiJi"
                        ."b3VuZCI7YjowO3M6MTQ6InJhd0NhbGlicmF0aW9uIjtzOjA6IiI7czox"
                        ."MjoidGltZUNvbnN0YW50IjtpOjE7czoyOiJBbSI7aToxMDIzO3M6Mjoi"
                        ."VGYiO2k6NjU1MzY7czoxOiJEIjtpOjY1NTM2O3M6MToicyI7aTo2NDtz"
                        ."OjM6IlZjYyI7aTo1O3M6ODoiZGVjaW1hbHMiO2k6Mjt9aToyO2E6MTU6"
                        ."e3M6MjoiaWQiO2k6MDtzOjQ6InR5cGUiO3M6MTQ6IkJDVGhlcm0yMzIy"
                        ."NjQwIjtzOjg6ImxvY2F0aW9uIjtzOjA6IiI7czo4OiJkYXRhVHlwZSI7"
                        ."czozOiJyYXciO3M6NToiZXh0cmEiO2E6MDp7fXM6NToidW5pdHMiO3M6"
                        ."NzoiJiMxNzY7RiI7czo1OiJib3VuZCI7YjowO3M6MTQ6InJhd0NhbGli"
                        ."cmF0aW9uIjtzOjA6IiI7czoxMjoidGltZUNvbnN0YW50IjtpOjE7czoy"
                        ."OiJBbSI7aToxMDIzO3M6MjoiVGYiO2k6NjU1MzY7czoxOiJEIjtpOjY1"
                        ."NTM2O3M6MToicyI7aTo2NDtzOjM6IlZjYyI7aTo1O3M6ODoiZGVjaW1h"
                        ."bHMiO2k6Mjt9aTozO2E6MTU6e3M6MjoiaWQiO2k6MDtzOjQ6InR5cGUi"
                        ."O3M6MTQ6IkJDVGhlcm0yMzIyNjQwIjtzOjg6ImxvY2F0aW9uIjtzOjA6"
                        ."IiI7czo4OiJkYXRhVHlwZSI7czozOiJyYXciO3M6NToiZXh0cmEiO2E6"
                        ."MDp7fXM6NToidW5pdHMiO3M6NzoiJiMxNzY7RiI7czo1OiJib3VuZCI7"
                        ."YjowO3M6MTQ6InJhd0NhbGlicmF0aW9uIjtzOjA6IiI7czoxMjoidGlt"
                        ."ZUNvbnN0YW50IjtpOjE7czoyOiJBbSI7aToxMDIzO3M6MjoiVGYiO2k6"
                        ."NjU1MzY7czoxOiJEIjtpOjY1NTM2O3M6MToicyI7aTo2NDtzOjM6IlZj"
                        ."YyI7aTo1O3M6ODoiZGVjaW1hbHMiO2k6Mjt9aTo0O2E6MTU6e3M6Mjoi"
                        ."aWQiO2k6MDtzOjQ6InR5cGUiO3M6MTQ6IkJDVGhlcm0yMzIyNjQwIjtz"
                        ."Ojg6ImxvY2F0aW9uIjtzOjA6IiI7czo4OiJkYXRhVHlwZSI7czozOiJy"
                        ."YXciO3M6NToiZXh0cmEiO2E6MDp7fXM6NToidW5pdHMiO3M6NzoiJiMx"
                        ."NzY7RiI7czo1OiJib3VuZCI7YjowO3M6MTQ6InJhd0NhbGlicmF0aW9u"
                        ."IjtzOjA6IiI7czoxMjoidGltZUNvbnN0YW50IjtpOjE7czoyOiJBbSI7"
                        ."aToxMDIzO3M6MjoiVGYiO2k6NjU1MzY7czoxOiJEIjtpOjY1NTM2O3M6"
                        ."MToicyI7aTo2NDtzOjM6IlZjYyI7aTo1O3M6ODoiZGVjaW1hbHMiO2k6"
                        ."Mjt9aTo1O2E6MTU6e3M6MjoiaWQiO2k6MDtzOjQ6InR5cGUiO3M6MTQ6"
                        ."IkJDVGhlcm0yMzIyNjQwIjtzOjg6ImxvY2F0aW9uIjtzOjA6IiI7czo4"
                        ."OiJkYXRhVHlwZSI7czozOiJyYXciO3M6NToiZXh0cmEiO2E6MDp7fXM6"
                        ."NToidW5pdHMiO3M6NzoiJiMxNzY7RiI7czo1OiJib3VuZCI7YjowO3M6"
                        ."MTQ6InJhd0NhbGlicmF0aW9uIjtzOjA6IiI7czoxMjoidGltZUNvbnN0"
                        ."YW50IjtpOjE7czoyOiJBbSI7aToxMDIzO3M6MjoiVGYiO2k6NjU1MzY7"
                        ."czoxOiJEIjtpOjY1NTM2O3M6MToicyI7aTo2NDtzOjM6IlZjYyI7aTo1"
                        ."O3M6ODoiZGVjaW1hbHMiO2k6Mjt9aTo2O2E6MTU6e3M6MjoiaWQiO2k6"
                        ."MDtzOjQ6InR5cGUiO3M6MTQ6IkJDVGhlcm0yMzIyNjQwIjtzOjg6Imxv"
                        ."Y2F0aW9uIjtzOjA6IiI7czo4OiJkYXRhVHlwZSI7czozOiJyYXciO3M6"
                        ."NToiZXh0cmEiO2E6MDp7fXM6NToidW5pdHMiO3M6NzoiJiMxNzY7RiI7"
                        ."czo1OiJib3VuZCI7YjowO3M6MTQ6InJhd0NhbGlicmF0aW9uIjtzOjA6"
                        ."IiI7czoxMjoidGltZUNvbnN0YW50IjtpOjE7czoyOiJBbSI7aToxMDIz"
                        ."O3M6MjoiVGYiO2k6NjU1MzY7czoxOiJEIjtpOjY1NTM2O3M6MToicyI7"
                        ."aTo2NDtzOjM6IlZjYyI7aTo1O3M6ODoiZGVjaW1hbHMiO2k6Mjt9aTo3"
                        ."O2E6MTU6e3M6MjoiaWQiO2k6MDtzOjQ6InR5cGUiO3M6MTQ6IkJDVGhl"
                        ."cm0yMzIyNjQwIjtzOjg6ImxvY2F0aW9uIjtzOjA6IiI7czo4OiJkYXRh"
                        ."VHlwZSI7czozOiJyYXciO3M6NToiZXh0cmEiO2E6MDp7fXM6NToidW5p"
                        ."dHMiO3M6NzoiJiMxNzY7RiI7czo1OiJib3VuZCI7YjowO3M6MTQ6InJh"
                        ."d0NhbGlicmF0aW9uIjtzOjA6IiI7czoxMjoidGltZUNvbnN0YW50Ijtp"
                        ."OjE7czoyOiJBbSI7aToxMDIzO3M6MjoiVGYiO2k6NjU1MzY7czoxOiJE"
                        ."IjtpOjY1NTM2O3M6MToicyI7aTo2NDtzOjM6IlZjYyI7aTo1O3M6ODoi"
                        ."ZGVjaW1hbHMiO2k6Mjt9aTo4O2E6MTU6e3M6MjoiaWQiO2k6MDtzOjQ6"
                        ."InR5cGUiO3M6MTQ6IkJDVGhlcm0yMzIyNjQwIjtzOjg6ImxvY2F0aW9u"
                        ."IjtzOjA6IiI7czo4OiJkYXRhVHlwZSI7czozOiJyYXciO3M6NToiZXh0"
                        ."cmEiO2E6MDp7fXM6NToidW5pdHMiO3M6NzoiJiMxNzY7RiI7czo1OiJi"
                        ."b3VuZCI7YjowO3M6MTQ6InJhd0NhbGlicmF0aW9uIjtzOjA6IiI7czox"
                        ."MjoidGltZUNvbnN0YW50IjtpOjE7czoyOiJBbSI7aToxMDIzO3M6Mjoi"
                        ."VGYiO2k6NjU1MzY7czoxOiJEIjtpOjY1NTM2O3M6MToicyI7aTo2NDtz"
                        ."OjM6IlZjYyI7aTo1O3M6ODoiZGVjaW1hbHMiO2k6Mjt9aTo5O2E6Mzp7"
                        ."czoyOiJpZCI7aToyNTQ7czo0OiJ0eXBlIjtzOjExOiJQbGFjZWhvbGRl"
                        ."ciI7czo4OiJsb2NhdGlvbiI7Tjt9aToxMDthOjM6e3M6MjoiaWQiO2k6"
                        ."MjU0O3M6NDoidHlwZSI7czoxMToiUGxhY2Vob2xkZXIiO3M6ODoibG9j"
                        ."YXRpb24iO047fWk6MTE7YTozOntzOjI6ImlkIjtpOjI1NDtzOjQ6InR5"
                        ."cGUiO3M6MTE6IlBsYWNlaG9sZGVyIjtzOjg6ImxvY2F0aW9uIjtOO31p"
                        ."OjEyO2E6Mzp7czoyOiJpZCI7aToyNTQ7czo0OiJ0eXBlIjtzOjExOiJQ"
                        ."bGFjZWhvbGRlciI7czo4OiJsb2NhdGlvbiI7Tjt9fQ==",
                ),
                array(
                    'HistoryRawKey' => 10020,
                    'DeviceKey' => 24,
                    'Date' => '2003-11-06 18:30:10',
                    'RawData' => '5a004021690eb59c0ee743075f1f07531c07e01c079f1d'
                        .'07a32607fe2f070070',
                    'ActiveSensors' => 9,
                    'Driver' => 'e00391200',
                    'RawSetup' => '0000000038003912004100391103420000014000000000'
                        .'00000000000000',
                    'RawCalibration' => '',
                    'Status' => 'GOOD',
                    'ReplyTime' => 0,
                    'sendCommand' => 55,
                    'UTCOffset' => 0
                ),
                "other",
                array(
                    'id' => 56,
                    'Date' => 1068143410,
                    'packet' => array(
                        'To' => '000038',
                        'From' => '000000',
                        'Date' => 1068143410,
                        'Command' => '55',
                        'Length' => 0,
                        'Time' => 1068143410,
                        'Data' => array(),
                        'RawData' => '',
                        'Type' => 'SENSORREAD',
                        'Reply' => array(
                            'To' => '000000',
                            'From' => '000038',
                            'Date' => 1068143410,
                            'Command' => '01',
                            'Length' => 32,
                            'Time' => 1068143410,
                            'Data' => array(
                                0 => 90,
                                1 => 0,
                                2 => 64,
                                3 => 33,
                                4 => 105,
                                5 => 14,
                                6 => 181,
                                7 => 156,
                                8 => 14,
                                9 => 231,
                                10 => 67,
                                11 => 7,
                                12 => 95,
                                13 => 31,
                                14 => 7,
                                15 => 83,
                                16 => 28,
                                17 => 7,
                                18 => 224,
                                19 => 28,
                                20 => 7,
                                21 => 159,
                                22 => 29,
                                23 => 7,
                                24 => 163,
                                25 => 38,
                                26 => 7,
                                27 => 254,
                                28 => 47,
                                29 => 7,
                                30 => 0,
                                31 => 112,
                            ),
                            'RawData' => '5a004021690eb59c0ee743075f1f07531c07e01'
                                .'c079f1d07a32607fe2f070070',
                            'Type' => 'REPLY',
                            'Reply' => null,
                            'Checksum' => '94',
                            'CalcChecksum' => '94',
                        ),
                        'Checksum' => '6D',
                        'CalcChecksum' => '6D',
                    ),
                    'devicesHistoryDate' => 1280251875,
                    'command' => 55,
                ),
            ),
        );
    }
    /**
    * Tests for verbosity
    *
    * @param array $dev     Entry into the devices history table
    * @param array $preload The array to preload into the class
    * @param array $group   The database group to use
    * @param array $expect  The expected return
    *
    * @dataProvider dataToRaw
    *
    * @return null
    */
    public function testToRaw($dev, $preload, $group, $expect)
    {
        $devHist = new DevicesHistoryTable($dev);
        $devHist->insertRow();
        $this->o->clearData();
        $this->o->fromAny($preload);
        $raw = $this->o->toRaw($group);
        if (!is_object($raw)) {
            $this->assertSame($expect, $raw);
        } else {
            //$pdo = &$this->config->servers->getPDO();
            //$stmt = $pdo->query("Select * from devicesHistory");
            //var_export($stmt->fetchAll(PDO::FETCH_ASSOC));
            $this->assertEquals($expect, $raw->toArray(false));
        }
    }

}

?>
