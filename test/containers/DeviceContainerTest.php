<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../containers/DeviceContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DeviceContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->o = new DeviceContainer(array());
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(),
                array(
                    "DeviceKey"         => 0,
                    "DeviceID"          => "000000",
                    "DeviceName"        => "",
                    "SerialNum"         => 0,
                    "HWPartNum"         => "",
                    "FWPartNum"         => "",
                    "FWVersion"         => "",
                    "RawSetup"          => "",
                    "RawCalibration"    => "",
                    "Active"            => 0,
                    "GatewayKey"        => 0,
                    "ControllerKey"     => 0,
                    "ControllerIndex"   => 0,
                    "DeviceLocation"    => "",
                    "DeviceJob"         => "",
                    "Driver"            => "eDEFAULT",
                    "PollInterval"      => 0,
                    "ActiveSensors"     => 0,
                    "DeviceGroup"       => "FFFFFF",
                    "BoredomThreshold"  => 50,
                    "LastConfig"        => "2000-01-01 00:00:00",
                    "LastPoll"          => "2000-01-01 00:00:00",
                    "LastHistory"       => "2000-01-01 00:00:00",
                    "LastAnalysis"      => "2000-01-01 00:00:00",
                    "MinAverage"        => "15MIN",
                    "CurrentGatewayKey" => 0,
                    "params"            => null,
                ),
            ),
            array(
                array(
                    "DeviceKey"         => 1,
                    "DeviceID"          => "004738",
                    "DeviceName"        => "Name",
                    "SerialNum"         => 1234,
                    "HWPartNum"         => "0039-21-02-A",
                    "FWPartNum"         => "0039-22-95-C",
                    "FWVersion"         => "02.1.3",
                    "RawSetup"          => "asdf",
                    "RawCalibration"    => "fdsa",
                    "Active"            => 1,
                    "GatewayKey"        => 234,
                    "ControllerKey"     => 28,
                    "ControllerIndex"   => 1,
                    "DeviceLocation"    => "Location",
                    "DeviceJob"         => "Job",
                    "Driver"            => "e00392100",
                    "PollInterval"      => 52,
                    "ActiveSensors"     => 3,
                    "DeviceGroup"       => "123456",
                    "BoredomThreshold"  => 20,
                    "LastConfig"        => "2002-01-01 00:00:00",
                    "LastPoll"          => "2003-01-01 00:00:00",
                    "LastHistory"       => "2005-01-01 00:00:00",
                    "LastAnalysis"      => "2006-01-01 00:00:00",
                    "MinAverage"        => "HOURLY",
                    "CurrentGatewayKey" => 2,
                    "params"            => array(),
                ),
                array(
                    "DeviceKey"         => 1,
                    "DeviceID"          => "004738",
                    "DeviceName"        => "Name",
                    "SerialNum"         => 1234,
                    "HWPartNum"         => "0039-21-02-A",
                    "FWPartNum"         => "0039-22-95-C",
                    "FWVersion"         => "02.1.3",
                    "RawSetup"          => "asdf",
                    "RawCalibration"    => "fdsa",
                    "Active"            => 1,
                    "GatewayKey"        => 234,
                    "ControllerKey"     => 28,
                    "ControllerIndex"   => 1,
                    "DeviceLocation"    => "Location",
                    "DeviceJob"         => "Job",
                    "Driver"            => "e00392100",
                    "PollInterval"      => 52,
                    "ActiveSensors"     => 3,
                    "DeviceGroup"       => "123456",
                    "BoredomThreshold"  => 20,
                    "LastConfig"        => "2002-01-01 00:00:00",
                    "LastPoll"          => "2003-01-01 00:00:00",
                    "LastHistory"       => "2005-01-01 00:00:00",
                    "LastAnalysis"      => "2006-01-01 00:00:00",
                    "MinAverage"        => "HOURLY",
                    "CurrentGatewayKey" => 2,
                    "params"            => array(),
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $o = new DeviceContainer($preload);
        $this->assertAttributeSame($expect, "data", $o);
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataEncodeParams()
    {
        return array(
            array(
                array("this"=>"is","a"=>"test"),
                "YToyOntzOjQ6InRoaXMiO3M6MjoiaXMiO3M6MToiYSI7czo0OiJ0ZXN0Ijt9"
            ),
            array("test String", "test String"),
            array(1234, ""),
            array(array(), "YTowOnt9"),
        );
    }
    /**
     * test
     *
     * @param array  $params Parameters to encode
     * @param string $expect The expected return value
     *
     * @return null
     *
     * @dataProvider dataEncodeParams
     */
    public function testEncodeParams($params, $expect)
    {
        $ret = $this->o->encodeParams($params);
        $this->assertSame(
            $expect,
            $params,
            "Input array passed by reference was not modified correctly"
        );
        $this->assertSame($expect, $ret, "return array incorrect");
    }

    /**
     * data provider
     *
     * @return array
     */
    public static function dataDecodeParams()
    {
        return array(
            array(
                "YToyOntzOjQ6InRoaXMiO3M6MjoiaXMiO3M6MToiYSI7czo0OiJ0ZXN0Ijt9",
                array("this"=>"is","a"=>"test")
            ),
            array(
                array("this"=>"is","an"=>"array"),
                array("this"=>"is","an"=>"array")
            ),
            array(1234, array()),
            array("", array()),
        );
    }
    /**
     * test
     *
     * @param string $params Parameters to decode
     * @param array  $expect The expected return value
     *
     * @return null
     *
     * @dataProvider dataDecodeParams
     */
    public function testDecodeParams($params, $expect)
    {
        $ret = $this->o->decodeParams($params);
        $this->assertSame(
            $expect,
            $params,
            "Input array passed by reference was not modified correctly"
        );
        $this->assertSame($expect, $ret, "return array incorrect");
    }

    /**
     * data provider
     *
     * @return array
     */
    public static function dataEncodeDecodeParams()
    {
        return array(
            array(array()),
            array(array(1,2,3,4,5)),
            array(array("Hello" => "This", "is" => "an", "associative" => "array")),
        );
    }
    /**
     * test
     *
     * @param string $params Parameters to decode
     *
     * @return null
     *
     * @dataProvider dataEncodeDecodeParams
     */
    public function testEncodeDecodeParams($params)
    {
        $expect = $params;
        $this->o->encodeParams($params);
        $this->o->decodeParams($params);
        $this->assertSame($expect, $params);
    }
    /**
    * data provider for testGetDriver
    *
    * @return array
    */
    public static function dataGetDriver()
    {
        return array(
            array(
                array(
                    "HWPartNum" => 1,
                    "FWPartNum" => 2,
                    "FWVersion" =>3
                ),
                "eDEFAULT",
                1
            ),
            /*
            array(
                array(
                    "HWPartNum" => "testHW2",
                    "FWPartNum" => "testFW",
                    "FWVersion" => "0.2.3"
                ),
                "testDriver",
                2
            ),
            array(
                array(
                    "HWPartNum" => "testHW1",
                    "FWPartNum" => "testFW",
                    "FWVersion" => "otherVersion"
                ),
                "testDriver",
                3
            ),
            array(
                array(
                    "HWPartNum" => "testHW3",
                    "FWPartNum" => "otherFW",
                    "FWVersion" => "otherVersion"
                ),
                "testDriver",
                4
            ),
            */
            array(
                array(
                    "HWPartNum" => "testHW4",
                    "FWPartNum" => "testFW2",
                    "FWVersion" => "otherVersion"
                ),
                "eDEFAULT",
                5
            ),
        );
    }
    /**
    * tests findDriver()
    *
    * @param array  $preload The devInfo array
    * @param string $expect  The return to expect
    *
    * @return null
    *
    * @dataProvider dataGetDriver().
    */
    public function testGetDriver($preload, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->getDriver();
        $this->assertSame($expect, $ret);
    }

}

?>
