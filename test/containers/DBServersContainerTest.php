<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../containers/DBServersContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DBServersContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
    }



    /**
    * Data provider for testCreatePDO
    *
    * @return array
    */
    public static function dataCreatePDO()
    {
        return array(
            array(array(), "PDO", "sqlite"),
            array(
                array(array("driver" => "sqlite", "file" => ":memory:")),
                "PDO",
                "sqlite",
            ),
            array(
                array(array("driver" => "badPDODriver", "file" => ":memory:")),
                "PDO",
                "sqlite"
            ),
            array(
                array(
                    array(
                        "driver" => "mysql",
                        "user" => "NotAGoodUserNameToUse",
                        "password" => "Secret Password",
                        "db" => "MyNewDb",
                    ),
                ),
                null,
                "sqlite"
            ),
            array(
                array(
                    array(
                        "driver" => "mysql",
                        "user" => "NotAGoodUserNameToUse",
                        "password" => "Secret Password",
                        "db" => "MyNewDb",
                    ),
                    array("driver" => "sqlite", "file" => ":memory:"),
                ),
                "PDO",
                "sqlite"
            ),
        );
    }
    /**
    * Tests to make sure this function fails if
    * someone tries to make a cache from a memory
    * sqlite instance.
    *
    * @param string $preload      The configuration to use
    * @param mixed  $expect       The expected value.  Set to FALSE or the class name
    * @param mixed  $expectDriver The expected driver
    *
    * @return null
    *
    * @dataProvider dataCreatePDO()
    */
    public function testGetPDO($preload, $expect, $expectDriver)
    {
        $o = new DBServersContainer($preload);
        $pdo = $o->getPDO();
        if ($expect === false) {
            $this->assertFalse($pdo);
        } else if (is_null($expect)) {
            $this->assertNull($pdo);
        } else {
            $this->assertType("object", $pdo);
            $this->assertSame($expect, get_class($pdo));
            $this->assertSame(
                $expectDriver,
                $pdo->getAttribute(PDO::ATTR_DRIVER_NAME)
            );
        }
    }
    /**
    * Data provider for testCreatePDO
    *
    * @return array
    */
    public static function dataConnect()
    {
        return array(
            array(array(), true),
            array(
                array(array("driver" => "sqlite", "file" => ":memory:")),
                true,
            ),
            array(
                array(array("driver" => "badPDODriver", "file" => ":memory:")),
                true
            ),
            array(
                array(
                    array(
                        "driver" => "mysql",
                        "user" => "NotAGoodUserNameToUse",
                        "password" => "Secret Password",
                        "db" => "MyNewDb",
                    ),
                ),
                false,
            ),
            array(
                array(
                    array(
                        "driver" => "mysql",
                        "user" => "NotAGoodUserNameToUse",
                        "password" => "Secret Password",
                        "db" => "MyNewDb",
                    ),
                    array("driver" => "sqlite", "file" => ":memory:"),
                ),
                true,
            ),
        );
    }
    /**
    * Tests to make sure this function fails if
    * someone tries to make a cache from a memory
    * sqlite instance.
    *
    * @param string $preload The configuration to use
    * @param bool   $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConnect()
    */
    public function testConnect($preload, $expect)
    {
        $o = new DBServersContainer($preload);
        $ret = $o->connect();
        $this->assertSame($expect, $ret);
    }

    /**
    * This is to test the singleton item
    *
    * @return null
    */
    public function testSingleton()
    {
        $o = DBServersContainer::singleton($preload);
        $p = DBServersContainer::singleton($preload);
        $this->assertSame($o, $p);
    }

}

?>
