<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../containers/PacketContainer.php';
require_once dirname(__FILE__).'/../../tables/PacketSocketTable.php';
require_once dirname(__FILE__).'/../stubs/DummySocketContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class PacketContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "sockets" => array(
                array(
                    "dummy" => true,
                ),
                array(
                    "dummy" => true,
                    "group" => "other",
                ),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->socket["default"] = &$this->config->sockets->getSocket("default");
        $this->socket["other"] = &$this->config->sockets->getSocket("other");
        $this->o = new PacketContainer();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
                true,
            ),
            array(
                "This is not a packet",
                array(
                    "To" => "000000",
                    "From" => "000000",
                    "Command" => "00",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "00",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
                true,
            ),
            array(
                "",
                array(
                    "To" => "000000",
                    "From" => "000000",
                    "Command" => "00",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "00",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
                true,
            ),
            array(
                array(),
                array(
                    "To" => "000000",
                    "From" => "000000",
                    "Command" => "00",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "00",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
                true,
            ),
            array(
                new PacketSocketTable(),
                array(
                    "To" => "000000",
                    "From" => "000000",
                    "Command" => "00",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "00",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
                true,
            ),
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Timeout"  => 3,
                    "Retries"  => 5,
                    "GetReply" => false,
                    "group"    => "myGroup",
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "Timeout"  => 3,
                    "Retries"  => 5,
                    "GetReply" => false,
                    "group"    => "myGroup",
                ),
                false,
            ),
            array(
                array(
                    "To" => 621,
                    "From" => 248,
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Timeout"  => 3,
                    "Retries"  => 5,
                    "GetReply" => false,
                    "group"    => "myGroup",
                ),
                array(
                    "To" => "00026D",
                    "From" => "0000F8",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C2",
                    "Timeout"  => 3,
                    "Retries"  => 5,
                    "GetReply" => false,
                    "group"    => "myGroup",
                ),
                false,
            ),
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "Timeout"  => 3,
                    "Retries"  => 5,
                    "GetReply" => false,
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "Timeout"  => 3,
                    "Retries"  => 5,
                    "GetReply" => false,
                    "group"    => "default",
                ),
                true,
            ),
            array(
                new PacketSocketTable(
                    array(
                        "group" => "default",
                        "id" => null,
                        "Date" => "2003-03-24 02:21:24",
                        "Command" => "5C",
                        "PacketFrom" => "654321",
                        "PacketTo" => "123456",
                        "RawData" => "0102",
                        "Type" => "CONFIG",
                        "ReplyTime" => 0.0,
                        "Checked" => 0,
                    )
                ),
                array(
                    "To" => "123456",
                    "From" => "654321",
                    "Command" => "5C",
                    "Length"  => 2,
                    "Data" => "0102",
                    "Type" => "CONFIG",
                    "Reply" => null,
                    "Checksum" => "2A",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
                true,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    * @param array $sock    If we expect a socket connection
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect, $sock)
    {
        $o = new PacketContainer($preload);
        $ret = $this->readAttribute($o, "data");
        $this->checkDateTime($ret, false);
        // Check to make sure the data var is set correctly
        $this->assertEquals($expect, $ret);
        // Check the configuration is set correctly
        $config = $this->readAttribute($o, "myConfig");
        $this->assertSame("ConfigContainer", get_class($config));
        // Check the socket is set correctly
        $socket = $this->readAttribute($o, "mySocket");
        $this->assertSame($sock, is_object($socket));
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToArray()
    {
        return array(
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
            ),
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "EF",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "EF",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "79",
                    "CalcChecksum" => "79",
                ),
            ),
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => new PacketContainer("5A5A5A5CABCDEF00002000F5"),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => array(
                        "To" => "ABCDEF",
                        "From" => "000020",
                        "Command" => "5C",
                        "Length"  => 0,
                        "Data" => array(),
                        "RawData" => "",
                        "Type" => "CONFIG",
                        "Reply" => null,
                        "Checksum" => "F5",
                        "CalcChecksum" => "F5",
                    ),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
            ),

        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToArray
    */
    public function testToArray($preload, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->toArray();
        $this->checkDateTime($ret, false);
        $this->assertEquals($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromArray
    */
    public function testFromArray($preload, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->readAttribute($this->o, "data");
        $this->checkDateTime($ret, false);
        $this->assertAttributeEquals($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromPktString()
    {
        return array(
            array(
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
            ),
            array(
                "5A5A5A5C000ABC00002000CA",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "5C",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "CONFIG",
                    "Reply" => null,
                    "Checksum" => "CA",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
            ),
            array(
                "5A5A5A5CABCDEF00002000F5",
                array(
                    "To" => "ABCDEF",
                    "From" => "000020",
                    "Command" => "5C",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "CONFIG",
                    "Reply" => null,
                    "Checksum" => "F5",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
            ),
            array(
                "This is not a packet",
                array(
                    "To" => "000000",
                    "From" => "000000",
                    "Command" => "00",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "00",
                    "Timeout"  => 5,
                    "Retries"  => 3,
                    "GetReply" => true,
                    "group"    => "default",
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromPktString
    */
    public function testFromPktString($preload, $expect)
    {
        $this->o->fromPktString($preload);
        $ret = $this->readAttribute($this->o, "data");
        $this->checkDateTime($ret, false);
        $this->assertEquals($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataRecv()
    {
        return array(
            // packet timeout
            array(
                "5A5A5A55000ABC0000200401020304C3",
                "5A5A5A01000020000ABC0401020304",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                false,
            ),
            // Good Reply
            array(
                "5A5A5A55000ABC0000200401020304C3",
                "0ABC0000200401020304C3A134389105239258"
                ."5A5A5A01000020000ABC040102030497",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => array(
                        "To" => "000020",
                        "From" => "000ABC",
                        "Command" => "01",
                        "Length"  => 4,
                        "Data" => array(1,2,3,4),
                        "RawData" => "01020304",
                        "Type" => "REPLY",
                        "Reply" => null,
                        "Checksum" => "97",
                        "CalcChecksum" => "97",
                    ),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                true,
            ),
            // No reply expected
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                "5A5A5A5E000000000ABC0401020304E8",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                false,
            ),
            // No reply expected
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                null,
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                false,
            ),
            // Bad Checksum
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                "5A5A5A5E000000000ABC0401020304E9",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                false,
            ),
            // No reply expected
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                "5A5A5A010000200ABC00040102030497",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                false,
            ),
            // No reply expected
            array(
                array(
                    "GetReply" => false,
                ),
                "5A5A5A010000200ABC00040102030497",
                array(
                    "To" => "000020",
                    "From" => "0ABC00",
                    "Command" => "01",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "REPLY",
                    "Reply" => null,
                    "Checksum" => "97",
                    "CalcChecksum" => "97",
                ),
                true,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload What to preload into the object
    * @param string $string  The string to feed recv
    * @param string $data    The expected return from toArray();
    * @param array  $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataRecv
    */
    public function testRecv($preload, $string, $data, $expect)
    {
        $o = new PacketContainer($preload);
        $ret = $o->recv($string);
        $this->assertSame($expect, $ret, "recv returned the wrong value");
        $array = $o->toArray();
        $this->checkDateTime($array, false);
        $this->assertSame($data, $array, "The data returned is wrong");
    }
    /**
    * data provider for testUnsolicited
    *
    * @return array
    */
    public static function dataUnsolicited()
    {
        return array(
            array(
                "5A5A5A55000ABC0000200401020304C3",
                false,
            ),
            array(
                array(),
                false,
            ),
            array(
                array(
                    "To" => "000000",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                true,
            ),
            array(
                array(
                    "To" => "000000",
                    "From" => "000020",
                    "Command" => "01",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                false,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload What to preload into the object
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataUnsolicited
    */
    public function testUnsolicited($preload, $expect)
    {
        $o = new PacketContainer($preload);
        $ret = $o->unsolicited();
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testReplyTime
    *
    * @return array
    */
    public static function dataReplyTime()
    {
        return array(
            array(
                array(
                    "Time" => 1.0,
                ),
                array(
                    "Time" => 2.0,
                ),
                1.0,
            ),
            array(
                array(
                    "Time" => 1.0,
                ),
                null,
                0.0,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload What to preload into the object
    * @param array $reply   What to preload into the reply object
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataReplyTime
    */
    public function testReplyTime($preload, $reply, $expect)
    {
        $o = new PacketContainer($preload);
        if (!is_null($reply)) {
            $o->Reply = new PacketContainer($reply);
        }
        $ret = $o->replyTime();
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testToMe
    *
    * @return array
    */
    public static function dataToMe()
    {
        return array(
            array(
                "5A5A5A55000020000ABC0401020304C3",
                true,
            ),
            array(
                array(),
                false,
            ),
            array(
                array(
                    "To" => "000020",
                    "From" => "000ABC",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                true,
            ),
            array(
                array(
                    "To" => "000000",
                    "From" => "000020",
                    "Command" => "01",
                    "Length"  => 4,
                    "Data" => "01020304",
                ),
                false,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload What to preload into the object
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToMe
    */
    public function testToMe($preload, $expect)
    {
        $o = new PacketContainer($preload);
        $ret = $o->toMe();
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataSend()
    {
        return array(
            // packet timeout
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Timeout"  => 1,
                ),
                "",
                "5A5A5A55000ABC0000200401020304C3"
                ."5A5A5A55000ABC0000200401020304C3"
                ."5A5A5A03000ABC0000200095"
                ."5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                "default",
            ),
            // Good Reply
            array(
                "5A5A5A55000ABC0000200401020304C3",
                "5A5A5A55000ABC0000200401020304C3A134389105239258"
                ."5A5A5A01000020000ABC040102030497",
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => array(
                        "To" => "000020",
                        "From" => "000ABC",
                        "Command" => "01",
                        "Length"  => 4,
                        "Data" => array(1,2,3,4),
                        "RawData" => "01020304",
                        "Type" => "REPLY",
                        "Reply" => null,
                        "Checksum" => "97",
                        "CalcChecksum" => "97",
                    ),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                "default",
            ),
            // Good Reply alt socket
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Data" => "01020304",
                    "Checksum" => "C3",
                    "group" => "other",
                    "Timeout" => 1,
                ),
                "5A5A5A55000ABC0000200401020304C3A134389105239258"
                ."5A5A5A01000020000ABC040102030497",
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => array(
                        "To" => "000020",
                        "From" => "000ABC",
                        "Command" => "01",
                        "Length"  => 4,
                        "Data" => array(1,2,3,4),
                        "RawData" => "01020304",
                        "Type" => "REPLY",
                        "Reply" => null,
                        "Checksum" => "97",
                        "CalcChecksum" => "97",
                    ),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                "other",
            ),
            // No reply expected
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "GetReply" => false,
                ),
                "",
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                "default",
            ),
            // No reply expected (find ping sent)
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "GetReply" => false,
                    "Retries" => 2,  // This causes the findping
                ),
                "",
                "5A5A5A55000ABC0000200401020304C35A5A5A03000ABC0000200095",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                "default",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload     The value to preload
    * @param string $readString  This is the string that will be returned from
    *                            the socket
    * @param string $writeString This is what the socket write string should
    *                            look like
    * @param array  $expect      The expected return
    * @param string $group       The group to expect
    *
    * @return null
    *
    * @dataProvider dataSend
    */
    public function testSend($preload, $readString, $writeString, $expect, $group)
    {
        $this->socket[$group]->readString = $readString;
        $o = new PacketContainer($preload);
        $o->send();
        $this->checkTestSend(
            $o,
            $preload,
            $readString,
            $writeString,
            $expect,
            $group
        );
    }
    /**
    * data provider for testIsEmpty
    *
    * @return array
    */
    public static function dataIsEmpty()
    {
        return array(
            array(
                array(
                ),
                true,
            ),
            array(
                array(
                    "To" => "123456",
                    "From" => "123456",
                ),
                false,
            ),
        );
    }
    /**
    * test the isEmpty method
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataIsEmpty
    */
    public function testIsEmpty($preload, $expect)
    {
        $o = new PacketContainer($preload);
        $ret = $o->isEmpty();
        $this->assertSame(
            $expect,
            $ret
        );
    }
    /**
    * data provider for testSame
    *
    * @return array
    */
    public static function dataSame()
    {
        return array(
            array(
                array(
                ),
                array(
                ),
                true,
            ),
            array(
                array(
                    "To" => "123456",
                    "From" => "123456",
                    "Command" => "5B",
                    "Data" => "010203",
                    "Date" => "2004-02-28 01:02:03",
                ),
                array(
                    "To" => "123456",
                    "From" => "123456",
                    "Command" => "5B",
                    "Data" => "010203",
                    "Date" => "2004-02-28 01:02:03",
                ),
                true,
            ),
            array(
                array(
                    "To" => "123456",
                    "From" => "123456",
                    "Command" => "5B",
                    "Data" => "010203",
                    "Date" => "2009-02-28 01:02:03",
                ),
                array(
                    "To" => "123456",
                    "From" => "123456",
                    "Command" => "5B",
                    "Data" => "0102",
                    "Date" => "2009-02-28 01:02:03",
                ),
                false,
            ),
        );
    }
    /**
    * test the isEmpty method
    *
    * @param array  $preload  Data to preload
    * @param array  $preload2 Data to preload
    * @param string $expect   The expected return
    *
    * @return null
    *
    * @dataProvider dataSame
    */
    public function testSame($preload, $preload2, $expect)
    {
        $this->o->fromAny($preload);
        $pkt = new PacketContainer($preload2);
        $ret = $this->o->Same($pkt);
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testTimeout
    *
    * @return array
    */
    public static function dataTimeout()
    {
        return array(
            array(
                array(
                ),
                false,
            ),
            array(
                array(
                    "To" => "123456",
                    "From" => "123456",
                    "Command" => "5B",
                    "Data" => "010203",
                    "Date" => date("Y-m-d H:i:s"),
                    "Timeout" => 1000000,
                ),
                false,
            ),
            array(
                array(
                    "To" => "123456",
                    "From" => "123456",
                    "Command" => "5B",
                    "Data" => "010203",
                    "Date" => "2003-02-25 00:00:00",
                ),
                true,
            ),
        );
    }
    /**
    * test the timeout method
    *
    * @param array  $preload Data to preload
    * @param string $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataTimeout
    */
    public function testTimeout($preload, $expect)
    {
        $pkt = new PacketContainer($preload);
        $ret = $pkt->Timeout();
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataPing()
    {
        return array(
            // packet timeout
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Timeout"  => 1,
                ),
                "",
                "5A5A5A02000ABC000020040102030494"
                ."5A5A5A02000ABC000020040102030494"
                ."5A5A5A03000ABC0000200095"
                ."5A5A5A02000ABC000020040102030494",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "02",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "PING",
                    "Reply" => null,
                    "Checksum" => "94",
                    "CalcChecksum" => "94",
                ),
                false,
                "default",
            ),
            // Good Reply
            array(
                "5A5A5A55000ABC0000200401020304C3",
                "5A5A5A55000ABC0000200401020304C3A134389105239258"
                ."5A5A5A01000020000ABC040102030497",
                "5A5A5A02000ABC000020040102030494",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "02",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "PING",
                    "Reply" => array(
                        "To" => "000020",
                        "From" => "000ABC",
                        "Command" => "01",
                        "Length"  => 4,
                        "Data" => array(1,2,3,4),
                        "RawData" => "01020304",
                        "Type" => "REPLY",
                        "Reply" => null,
                        "Checksum" => "97",
                        "CalcChecksum" => "97",
                    ),
                    "Checksum" => "94",
                    "CalcChecksum" => "94",
                ),
                false,
                "default",
            ),
            // Good Reply, findping
            array(
                "5A5A5A55000ABC0000200401020304C3",
                "5A5A5A55000ABC0000200401020304C3A134389105239258"
                ."5A5A5A01000020000ABC040102030497",
                "5A5A5A03000ABC000020040102030495",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "03",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "FINDPING",
                    "Reply" => array(
                        "To" => "000020",
                        "From" => "000ABC",
                        "Command" => "01",
                        "Length"  => 4,
                        "Data" => array(1,2,3,4),
                        "RawData" => "01020304",
                        "Type" => "REPLY",
                        "Reply" => null,
                        "Checksum" => "97",
                        "CalcChecksum" => "97",
                    ),
                    "Checksum" => "95",
                    "CalcChecksum" => "95",
                ),
                true,
                "default",
            ),
            // No reply expected
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "GetReply" => false,
                ),
                "",
                "5A5A5A02000ABC000020040102030494",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "02",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "PING",
                    "Reply" => null,
                    "Checksum" => "94",
                    "CalcChecksum" => "94",
                ),
                false,
                "default",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload     The value to preload
    * @param string $readString  This is the string that will be returned from
    *                            the socket
    * @param string $writeString This is what the socket write string should
    *                            look like
    * @param array  $expect      The expected return
    * @param bool   $find        If true a findping is used
    * @param string $group       The group to send the data out on
    *
    * @return null
    *
    * @dataProvider dataPing
    */
    public function testPing(
        $preload,
        $readString,
        $writeString,
        $expect,
        $find,
        $group
    ) {
        $this->socket["default"]->readString = $readString;
        $o = new PacketContainer($preload);
        $o->ping("", $find);
        $this->checkTestSend(
            $o, $preload, $readString, $writeString, $expect, $group
        );
    }

    /**
    * data provider for testMonitor
    *
    * @return array
    */
    public static function dataMonitor()
    {
        return array(
            // multiple packets in queue (should return the first)
            array(
                array(
                ),
                "5A5A5A55000ABC0000200401020304C3"
                ."5A5A5A55000ABC0000200401020304C3"
                ."5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
            ),
            // One packet
            array(
                array(
                    "GetReply" => false,
                ),
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
            ),
            // Nothing
            array(
                array(
                    "GetReply" => false,
                    "Timeout"  => 1,
                ),
                "",
                false,
            ),
        );
    }
    /**
    * Tests the packet monitor
    *
    * @param array  $preload    The value to preload
    * @param string $readString This is the string that will be returned from
    *                           the socket
    * @param array  $expect     The expected return
    *
    * @return null
    *
    * @dataProvider dataMonitor
    */
    public function testMonitor($preload, $readString, $expect)
    {
        $this->socket["default"]->readString = $readString;
        $o = PacketContainer::monitor($preload);
        if (is_object($o)) {
            $ret = $o->toArray();
            $this->checkDateTime($ret);
        } else {
            $ret = $o;
        }
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testMyReply
    *
    * @return array
    */
    public static function dataMyReply()
    {
        return array(
            // Good reply
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Date" => "2010-04-22 14:18:28",
                    "Data" => "01020304",
                ),
                array(
                    "To" => "000020",
                    "From" => "000ABC",
                    "Command" => "01",
                    "Date" => "2010-04-22 14:18:28",
                    "Data" => "01020304",
                ),
                true
            ),
            // Bad reply.  Reply dated before packet
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Date" => "2010-04-22 14:18:28",
                    "Data" => "01020304",
                ),
                array(
                    "To" => "000020",
                    "From" => "000ABC",
                    "Command" => "01",
                    "Date" => "2010-04-22 14:18:27",
                    "Data" => "01020304",
                ),
                false
            ),
            // No original packet
            array(
                array(
                ),
                array(
                    "To" => "000020",
                    "From" => "000ABC",
                    "Command" => "01",
                    "Date" => "2010-04-22 14:18:27",
                    "Data" => "01020304",
                ),
                false
            ),
            // No Reply
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Date" => "2010-04-22 14:18:28",
                    "Data" => "01020304",
                ),
                array(
                ),
                false
            ),
            // Nothing
            array(
                array(
                ),
                array(
                ),
                false,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $reply   The reply packet
    * @param bool  $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataMyReply
    */
    public function testMyReply($preload, $reply, $expect)
    {
        $this->o->fromAny($preload);
        $o = new PacketContainer($reply);
        $this->assertSame($expect, $this->o->myReply($o));
    }

    /**
    * data provider for testReply
    *
    * @return array
    */
    public static function dataReply()
    {
        return array(
            array(
                array(
                    "To" => "000020",
                    "From" => "000ABC",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Timeout"  => 1,
                ),
                "",
                "5A5A5A01000ABC0000200097",
                true,
            ),
            array(
                "5A5A5A55000020000ABC0401020304C3",
                "01020304",
                "5A5A5A01000ABC000020040102030497",
                true,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload     The value to preload
    * @param string $replyString This is the string of data for our packet
    * @param string $writeString This is what the socket write string should
    *                            look like
    * @param array  $expect      The expected return
    *
    * @return null
    *
    * @dataProvider dataReply
    */
    public function testReply($preload, $replyString, $writeString, $expect)
    {
        $o = new PacketContainer($preload);
        $ret = $o->reply($replyString);
        $this->assertSame($expect, $ret);
        $this->assertSame($writeString, $this->socket["default"]->writeString);
    }
    /**
    * data provider for testReply
    *
    * @return array
    */
    public static function dataPowerup()
    {
        return array(
            array(
                "",
                "5A5A5A5E000000000020007E",
                true,
            ),
            array(
                "01020304",
                "5A5A5A5E00000000002004010203047E",
                true,
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param string $replyString This is the string of data for our packet
    * @param string $writeString This is what the socket write string should
    *                            look like
    * @param array  $expect      The expected return
    *
    * @return null
    *
    * @dataProvider dataPowerup
    */
    public function testPowerup($replyString, $writeString, $expect)
    {
        $ret = PacketContainer::powerup($replyString);
        $this->assertSame($expect, $ret);
        $this->assertSame($writeString, $this->socket["default"]->writeString);
    }


    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload     The value to preload
    * @param string $readString  This is the string that will be returned from
    *                            the socket
    * @param string $writeString This is what the socket write string should
    *                            look like
    * @param array  $expect      The expected return
    *
    * @return null
    *
    * @dataProvider dataSend
    */
    public function testSendBadSocket($preload, $readString, $writeString, $expect)
    {
        $this->socket["default"] = null;
        $o = new PacketContainer($preload);
        $ret = $o->send();
        $this->assertFalse($ret);
    }


    /**
    * test the set routine when an extra class exists
    *
    * @param object &$o          The object to check
    * @param array  $preload     The value to preload
    * @param string $readString  This is the string that will be returned from
    *                            the socket
    * @param string $writeString This is what the socket write string should
    *                            look like
    * @param array  $expect      The expected return
    * @param string $group       The group to send the data out on
    *
    * @return null
    *
    * @dataProvider dataSend
    */
    public function checkTestSend(
        &$o,
        $preload,
        $readString,
        $writeString,
        $expect,
        $group = "default"
    ) {
        if (is_array($expect)) {
            // First make sure we got an object back.
            $this->assertType("object", $o);
            $ret = $o->toArray();
            $this->checkDateTime($ret);
            $this->assertSame($expect, $ret);
            $this->assertSame($writeString, $this->socket[$group]->writeString);
        } else {
            $this->assertFalse($o);
        }
    }
    /**
    * Checks the 'Date' and 'Time' fields, unsetting them afterwards
    *
    * @param object &$ret      The output of toArray()
    * @param bool   $checkTime Check to see if the time is > 0
    *
    * @return null
    *
    * @dataProvider dataSend
    */
    public function checkDateTime(&$ret, $checkTime = true)
    {
        // Test the date separately
        $this->assertRegExp(
            "/2[0-9]{3}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]/",
            $ret["Date"]
        );
        unset($ret["Date"]);
        // Test the time separately
        $this->assertType("float", $ret["Time"], "Time must be a float");
        if ($checkTime) {
            $this->assertThat(
                $ret["Time"],
                $this->greaterThan(0),
                "Time must be greater than zero"
            );
        }
        unset($ret["Time"]);
        // Now check the reply, if there is one
        if (is_array($ret["Reply"])) {
            // Test the date separately
            $this->assertRegExp(
                "/2[0-9]{3}-[0-1][0-9]-[0-3][0-9] "
                ."[0-2][0-9]:[0-5][0-9]:[0-5][0-9]/",
                $ret["Reply"]["Date"]
            );
            unset($ret["Reply"]["Date"]);
            // Test the time separately
            $this->assertType(
                "float",
                $ret["Reply"]["Time"],
                "Reply Time must be a float"
            );
            if ($checkTime) {
                $this->assertThat(
                    $ret["Reply"]["Time"],
                    $this->greaterThan(0),
                    "Reply time must be greater than 0"
                );
            }
            unset($ret["Reply"]["Time"]);
        }
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToPktString()
    {
        return array(
            array(
                array(
                    "Command" => "55",
                    "To" => "ABC",
                    "From" => "000020",
                    "Data" => "01020304",
                ),
                "5A5A5A55000ABC0000200401020304C3",
            ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "000ABC",
                    "From" => "000020",
                    "Data" => "",
                ),
                "5A5A5A5C000ABC00002000CA",
            ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "12345ABCDEF",
                    "From" => "000020",
                    "Data" => "",
                    "Length" => 0,
                    "Checksum" => "F5",
                ),
                "5A5A5A5CABCDEF00002000F5",
            ),
            array(
                array(),
                "",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToPktString
    */
    public function testToPktString($preload, $expect)
    {
        $this->o->fromArray($preload);
        $this->assertSame($expect, $this->o->toPktString());

    }

    /**
    * This tests to make sure we are setting the group correctly with a default
    * if an empty string is given.
    *
    * @return null
    */
    public function testSetGroup()
    {
        unset($this->config->useSocket);
        $this->o->group = "";
        $this->assertSame("default", $this->o->group);

    }
    /**
    * data provider for testSet
    *
    * @return array
    */
    public static function dataSet()
    {
        return array(
            array("Timeout", 0, 5),
            array("Timeout", 1, 1),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param string $var    The variable to set
    * @param mixed  $value  The value to set
    * @param mixed  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataSet
    */
    public function testSet($var, $value, $expect)
    {
        $this->o->$var = $value;
        $data = $this->readAttribute($this->o, "data");
        $this->assertSame($expect, $data[$var]);
    }
}

?>
