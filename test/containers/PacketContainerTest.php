<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../containers/PacketContainer.php';
require_once dirname(__FILE__).'/../stubs/DummySocketContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class PacketContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "useSocket" => "dummy",
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->o = new PacketContainer();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
        $this->config = null;
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $o = new PacketContainer($preload);
        $this->assertAttributeSame($expect, "data", $o);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToArray()
    {
        return array(
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
            ),
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "EF",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "EF",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
            ),
            array(
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "UNKNOWN",
                    "Reply" => new PacketContainer("5A5A5A5CABCDEF00002000F5"),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => array(1,2,3,4),
                    "RawData" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => array(
                        "To" => "ABCDEF",
                        "From" => "000020",
                        "Command" => "5C",
                        "Length"  => 0,
                        "Data" => array(),
                        "RawData" => "",
                        "Type" => "CONFIG",
                        "Reply" => null,
                        "Checksum" => "F5",
                        "CalcChecksum" => "F5",
                    ),
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                ),
            ),

        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataToArray
    */
    public function testToArray($preload, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->toArray();
        unset($ret["Date"]);
        $this->assertType("float", $ret["Time"]);
        unset($ret["Time"]);
        if (!is_null($expect["Reply"])) {
            unset($ret["Reply"]["Date"]);
            $this->assertType("float", $ret["Reply"]["Time"]);
            unset($ret["Reply"]["Time"]);
        }
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromArray()
    {
        return array(
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromArray
    */
    public function testFromArray($preload, $expect)
    {
        $this->o->fromArray($preload);
        $this->assertAttributeSame($expect, "data", $this->o);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFromString()
    {
        return array(
            array(
                "5A5A5A55000ABC0000200401020304C3",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "55",
                    "Length"  => 4,
                    "Data" => "01020304",
                    "Type" => "SENSORREAD",
                    "Reply" => null,
                    "Checksum" => "C3",
                    "CalcChecksum" => "C3",
                    "Timeout"  => 5,
                    "Retries"  => 3
                ),
            ),
            array(
                "5A5A5A5C000ABC00002000CA",
                array(
                    "To" => "000ABC",
                    "From" => "000020",
                    "Command" => "5C",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "CONFIG",
                    "Reply" => null,
                    "Checksum" => "CA",
                    "CalcChecksum" => "CA",
                    "Timeout"  => 5,
                    "Retries"  => 3
                ),
            ),
            array(
                "5A5A5A5CABCDEF00002000F5",
                array(
                    "To" => "ABCDEF",
                    "From" => "000020",
                    "Command" => "5C",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "CONFIG",
                    "Reply" => null,
                    "Checksum" => "F5",
                    "CalcChecksum" => "F5",
                    "Timeout"  => 5,
                    "Retries"  => 3
                ),
            ),
            array(
                "This is not a packet",
                array(
                    "To" => "000000",
                    "From" => "000000",
                    "Command" => "00",
                    "Length"  => 0,
                    "Data" => "",
                    "Type" => "UNKNOWN",
                    "Reply" => null,
                    "Checksum" => "00",
                    "CalcChecksum" => "00",
                    "Timeout"  => 5,
                    "Retries"  => 3
                ),
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataFromString
    */
    public function testFromString($preload, $expect)
    {
        $this->o->fromString($preload);
        $ret = $this->readAttribute($this->o, "data");
        // Date can't really be tested.
        unset($ret["Date"]);
        $this->assertTrue(is_numeric($ret["Time"]));
        unset($ret["Time"]);
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataCheck()
    {
        return array(
            array(
                "5A5A5A55000ABC0000200401020304C3",
                "55000ABC0000200401020304C3"
            ),
            array(
                "5A5A5A5C000ABC00002000CA",
                "5C000ABC00002000CA"
            ),
            array(
                "5A5A5A5CABCDEF00002000F5",
                "5CABCDEF00002000F5"
            ),
            array(
                "5A5A5A55000ABC00002004",
                false
            ),
            array(
                "This is not a packet",
                false
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataCheck
    */
    public function testCheck($preload, $expect)
    {
        $ret = $this->o->check($preload);
        $this->assertSame($expect, $ret);
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function data2String()
    {
        return array(
            array(
                array(
                    "Command" => "55",
                    "To" => "ABC",
                    "From" => "000020",
                    "Data" => "01020304",
                ),
                "5A5A5A55000ABC0000200401020304C3",
            ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "000ABC",
                    "From" => "000020",
                    "Data" => "",
                ),
                "5A5A5A5C000ABC00002000CA",
            ),
            array(
                array(
                    "Command" => "5C",
                    "To" => "12345ABCDEF",
                    "From" => "000020",
                    "Data" => "",
                    "Length" => 0,
                    "Checksum" => "F5",
                ),
                "5A5A5A5CABCDEF00002000F5",
            ),
            array(
                "This is not an array",
                "5A5A5A000000000000000000",
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testToString($preload, $expect)
    {
        $this->o->fromArray($preload);
        $this->assertSame($expect, $this->o->toString());

    }


}

?>
