<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../containers/OutputContainer.php';
require_once dirname(__FILE__).'/../files/containers/TestOutputContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class OutputContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "plugins" => array(
                "dir" => realpath(dirname(__FILE__)."/../files/plugins/"),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->cont = new TestOutputContainer();
        $this->o = new OutputContainer(array(), $this->cont);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function data2String()
    {
        return array(
            array(
                array(),
                array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
post"
            ),
            array(
                array(),
                array("a" => 3, "c" => 8, "d" => 9),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 3
    [c] => 8
    [d] => 9
)
post"
            ),
            array(
                array(
                ),
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
Array
(
    [a] => 3
    [c] => 8
    [d] => 9
)
post"
            ),
            array(
                array(
                    "iterate" => false,
                ),
                array(
                    array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                    array("a" => 3, "c" => 8, "d" => 9),
                ),
                "preArray
(
    [a] => First Column
    [c] => Third
    [d] => Another Column
)
Array
(
    [a] => 1
    [c] => 3
    [d] => 4
)
post"
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload   Data to preload
    * @param array  $container The container data to use
    * @param string $expect    The expected return
    *
    * @return null
    *
    * @dataProvider data2String
    */
    public function testToString($preload, $container, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->cont->clearData();
        $this->cont->loadData($container);
        $ret = $this->o->toString();
        $this->assertSame(
            $expect,
            $ret
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @return null
    *
    */
    public function testToString2()
    {
        $o = new OutputContainer(array());
        $ret = $o->toString();
        $this->assertSame(
            "",
            $ret
        );
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataToArray()
    {
        return array(
            array(
                array(),
                array("a"=>1, "b"=>2, "c"=>3, "d"=>4),
                array("a" => "1", "c" => "3", "d" => "4")
            ),
            array(
                array(),
                array("a" => 3, "c" => 8, "d" => 9),
                array("a" => "3", "c" => "8", "d" => "9")
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload   Data to preload
    * @param array  $container The container data to use
    * @param string $expect    The expected return
    *
    * @return null
    *
    * @dataProvider dataToArray
    */
    public function testToArray($preload, $container, $expect)
    {
        $this->o->clearData();
        $this->o->fromAny($preload);
        $this->cont->clearData();
        $this->cont->loadData($container);
        $ret = $this->o->toArray();
        $this->assertSame(
            $expect,
            $ret
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @return null
    *
    */
    public function testToArray2()
    {
        $o = new OutputContainer(array());
        $ret = $o->toArray();
        $this->assertSame(
            array(),
            $ret
        );
    }


}
?>
