<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** Pull in the stuff we need */
require_once dirname(__FILE__).'/../../containers/HistoryContainer.php';
require_once dirname(__FILE__).'/../../containers/ConfigContainer.php';
require_once dirname(__FILE__).'/../../containers/DeviceContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HistoryContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $config = array(
            "plugins" => array(
                "dir" => realpath(dirname(__FILE__)."/../files/plugins/"),
            ),
        );
        $this->config = &ConfigContainer::singleton();
        $this->config->forceConfig($config);
        $this->d = new DeviceContainer($data);
        $this->o = new HistoryContainer($preload, $this->d);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
                array(0, 1),
                array(
                    "Test2DataPoint",
                    "TestDataPoint",
                ),
                array(
                    "DriverInfo" => array(
                        "NumSensors" => 2,
                    ),
                    "sensors" => array(
                        array("id" => 3, "type" => "Hello"),
                        array(),
                    )
                ),
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload    The value to preload into the constructor
    * @param array  $check      The elements to check for the right class
    * @param string $class      The class to check for
    * @param object $objPreload The device object to send
    * @param array  $expect     The array to expect back
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $check, $class, $objPreload, $expect)
    {
        $obj = new DeviceContainer($objPreload);
        $o = new HistoryContainer($preload, $obj);
        $ret = $o->toArray();
        $this->assertSame($expect, $ret);
        foreach ((array)$check as $key) {
            $this->assertSame(
                $class[$key], get_class($o->elements[$key]), "Key $key is wrong"
            );
        }
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFactory()
    {
        $config = array(
            "PluginDir" => realpath(
                dirname(__FILE__)."/../files/plugins/"
            ),
        );
        $c = &ConfigContainer::singleton();
        $c->forceConfig($config);
        return array(
            array(
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
                array(0, 1),
                array(
                    "Test2DataPoint",
                    "TestDataPoint",
                ),
                array(
                    "DriverInfo" => array(
                        "NumSensors" => 2,
                    ),
                    "sensors" => array(
                        0 => array(
                            "id"    => 2,
                            "units" => "anotherUnit",
                            "unitType" => "secondUnit",
                        ),
                        1 => array(
                            "id"    => 0,
                            "units" => "testUnit",
                            "unitType" => "firstUnit",
                        ),
                    ),
                ),
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload    The value to preload into the constructor
    * @param array  $check      The elements to check for the right class
    * @param string $class      The class to check for
    * @param object $objPreload The setup for the device object to send
    * @param array  $expect     The array to expect back
    *
    * @return null
    *
    * @dataProvider dataFactory
    */
    public function testFactory($preload, $check, $class, $objPreload, $expect)
    {
        $obj = new DeviceContainer($objPreload);
        $o = &$this->o->factory($preload, $obj);
        $ret = $o->toArray();
        $this->assertSame($expect, $ret);
        foreach ((array)$check as $key) {
            $this->assertSame(
                $class[$key], get_class($o->elements[$key]), "key $key is wrong"
            );
        }
    }

}

?>
