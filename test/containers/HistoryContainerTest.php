<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../containers/HistoryContainer.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class HistoryContainerTest extends PHPUnit_Framework_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->o = new HistoryContainer($preload, $obj);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o = null;
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
                array(0, 1),
                "GenericDataPoint",
                $obj,
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload The value to preload into the constructor
    * @param array  $check   The elements to check for the right class
    * @param string $class   The class to check for
    * @param object $obj     The device object to send
    * @param array  $expect  The array to expect back
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $check, $class, $obj, $expect)
    {
        $o = new HistoryContainer($preload, $obj);
        $ret = $o->toArray();
        $this->assertSame($expect, $ret);
        foreach ((array)$check as $key) {
            $this->assertSame($class, get_class($o->elements[$key]));
        }
    }
    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataFactory()
    {
        return array(
            array(
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
                array(0, 1),
                "GenericDataPoint",
                $obj,
                array(
                    "DeviceKey" => 23,
                    "Date" => "2007-05-21 03:35:13",
                    "deltaT" => 21,
                    "Data0" => 25,
                    "Data1" => 21,
                    "UTCOffset" => -5,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload The value to preload into the constructor
    * @param array  $check   The elements to check for the right class
    * @param string $class   The class to check for
    * @param object $obj     The device object to send
    * @param array  $expect  The array to expect back
    *
    * @return null
    *
    * @dataProvider dataFactory
    */
    public function testFactory($preload, $check, $class, $obj, $expect)
    {
        $o = &HistoryContainer::factory($preload, $obj);
        $ret = $o->toArray();
        $this->assertSame($expect, $ret);
        foreach ((array)$check as $key) {
            $this->assertSame($class, get_class($o->elements[$key]));
        }
    }

    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataCreateSensor()
    {
        return array(
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload Values to preload in
    * @param mixed  $sensor  The value to set it to
    * @param mixed  $value   The value to set it to
    * @param int    $expect  The expected return
    * @param string $class   The class of the returned object
    *
    * @return null
    *
    * @dataProvider dataCreateSensor
    */
    public function testCreateSensor($preload, $sensor, $value, $expect, $class)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->createSensor($sensor, $value);
        $this->assertSame($class, get_class($ret));
    }


}

?>
