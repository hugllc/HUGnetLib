<?php
/**
 * Tests the epsocket class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLib
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id: driver.php 529 2007-12-10 23:12:39Z prices $    
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

// Call plogTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'plogTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../database/plog.php';
require_once dirname(__FILE__).'/databaseTest.php';

/**
 * Test class for plog.
 * Generated by PHPUnit on 2007-11-21 at 10:29:05.
 */
class plogTest extends databaseTest {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
      */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('plogTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
      */
    protected function setUp() {
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
      */
    protected function tearDown() {
        parent::tearDown();
    }

    /**
     * @todo Implement testGetID().
      */
    public function testGetID() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCreatePacketLog().
      */
    public function testCreatePacketLog() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet().
      */
    public function testGet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetOne().
      */
    public function testGetOne() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAdd().
      */
    public function testAdd() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetAll().
      */
    public function testGetAll() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemove().
      */
    public function testRemove() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * data provider for testFindDriver
      */
    public static function dataPacketLog() {
        return array(
            array(
                array("DeviceKey" => 1, "ReplyTime" => 2.54, "RawData" => "1234", "Time" => 1194898871, "From" => "000020", "Command" => "01", "sendCommand" => "5C"),
                array("GatewayKey" => 5),
                "POWERUP",
                array("DeviceKey" => 1, "ReplyTime" => 2.54, "GatewayKey" => 5, "RawData" => "1234", "Date" => "2007-11-12 14:21:11", "PacketFrom" => "000020", "Command" => "01", "sendCommand" => "5C", "Type" => "POWERUP"),
            ),
            array(
                array("DeviceKey" => 1, "RawData" => "1234", "Time" => 1194898871, "From" => "000020", "Command" => "01", "sendCommand" => "55"),
                array("GatewayKey" => 5),
                null,
                array("DeviceKey" => 1, "ReplyTime" => 0.0, "GatewayKey" => 5, "RawData" => "1234", "Date" => "2007-11-12 14:21:11", "PacketFrom" => "000020", "Command" => "01", "sendCommand" => "55", "Type" => "UNSOLICITED"),
            ),
            array(
                array("DeviceKey" => 1, "RawData" => "1234", "Time" => 1194898871, "From" => "000020", "Command" => "01"),
                array("GatewayKey" => 5),
                false,
                array("DeviceKey" => 1, "ReplyTime" => 0.0, "GatewayKey" => 5, "RawData" => "1234", "Date" => "2007-11-12 14:21:11", "PacketFrom" => "000020", "Command" => '01', "sendCommand" => "  ", "Type" => "UNSOLICITED"),
            ),
        );
    }
    /**
     * @dataProvider dataPacketLog().
     * @covers driver::PacketLog
      */
    public function testPacketLogSetup($Packet, $Gateway, $type, $expect) {
        if (is_null($type)) {
            $pkt = plog::PacketLogSetup($Packet, $Gateway);
        } else {
            $pkt = plog::PacketLogSetup($Packet, $Gateway, $type);
        }
        $this->assertSame($expect, $pkt);
    }
}

// Call plogTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'plogTest::main') {
    plogTest::main();
}
?>
