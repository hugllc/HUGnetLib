<?php
/**
 * Tests the firmware class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    HUGnetLib
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$    
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 * @version SVN: $Id$
 *
 */

// Call firmwareTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "firmwareTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../../database/firmware.php';
require_once dirname(__FILE__).'/databaseTest.php';

/**
 * Test class for firmware.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:45:05.
 */
class firmwareTest extends databaseTest {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
      */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("firmwareTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
      */
    protected function setUp() {
        parent::setUp();
        $this->o = new firmware($this->pdo);
        $this->o->createTable();
        
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
      */
    protected function tearDown() {
        parent::tearDown();
        unset($this->o);
    }

    public static function dataInterpSREC() {
        return array(
            array(
                "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC", 
                512, 
                512, 
                "FF",
                array(
                    "FFFFFFFFFFFFFFFFFFFF0039201343000008FFFFFF500102020202101002026F6F6F6F6F70707001000000000000000200000000000000102700102700000010270010270000001027001027000000102700102700000010270010270000001027001027000000202700102700000020270010270000002027001027000000202700102700000020270010270000002027001027000000202700102700000020270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
                ),
            ),
            array(
                "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC", 
                512, 
                0, 
                "FF",
                "FFFFFFFFFFFFFFFFFFFF0039201343000008FFFFFF500102020202101002026F6F6F6F6F70707001000000000000000200000000000000102700102700000010270010270000001027001027000000102700102700000010270010270000001027001027000000202700102700000020270010270000002027001027000000202700102700000020270010270000002027001027000000202700102700000020270010270000002027001027000000",
            ),
            array(
                "S1230000FFFFFFFFFFFFFFFFFFFF0039201343000008FFFFFF500102020202101002026F46
S12300206F6F6F6F707070010000000000000002000000000000001027001027000000102F
S12300402700102700000010270010270000001027001027000000102700102700000010E4
S1230060270010270000002027001027000000202700102700000020270010270000002084
S1230080270010270000002027001027000000202700102700000020270010270000002064
S12300A0270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
S9030000FC", 
                512, 
                64, 
                "FF",
                array(
                    0 => "FFFFFFFFFFFFFFFFFFFF0039201343000008FFFFFF500102020202101002026F6F6F6F6F70707001000000000000000200000000000000102700102700000010",
                    1 => "27001027000000102700102700000010270010270000001027001027000000102700102700000020270010270000002027001027000000202700102700000020",
                    2 => "2700102700000020270010270000002027001027000000202700102700000020270010270000002027001027000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
                ),
            ),
        );
    }

    /**
     * @dataProvider dataInterpSREC().
      */
    public function testInterpSREC($srec, $MemBufferSize, $PageSize, $MemBufferEmpty, $expect) {
        $ret = $this->o->interpSREC($srec, $MemBufferSize, $PageSize, $MemBufferEmpty);
        $this->assertSame($expect, $ret);
    }

    /**
     * @todo Implement testGetLatestFirmware().
      */
    public function testGetLatestFirmware() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetFirmwareFor().
      */
    public function testGetFirmwareFor() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetFirmware().
      */
    public function testGetFirmware() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

}

// Call firmwareTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "firmwareTest::main") {
    firmwareTest::main();
}
?>
