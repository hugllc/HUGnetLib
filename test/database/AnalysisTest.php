<?php
/**
 * Tests the gateway class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Analysis
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */

/** This is our base class */
require_once dirname(__FILE__).'/DatabaseTest.php';
/** The code to test */
require_once dirname(__FILE__).'/../../database/Analysis.php';

/**
 * Test class for gateway.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:45:12.
 *
 * @category   Analysis
 * @package    HUGnetLibTest
 * @subpackage Database
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class AnalysisTest extends databaseTest
{
    /** The table to use */
    public $table = "analysis";

    /** Preload data */
    public static $preload = array(
        array(
            "DeviceKey" => 1,
            "Date" => "2007-12-21",
            "AveragePollTime" => 2.568,
            "Polls" => 253,
            "AverageReplyTime" => 1.253,
            "Replies" => 253,
            "Reconfigs" => 2,
            "Boredom" => 0,
            "Powerups" => 1,
        ),
        array(
            "DeviceKey" => 1,
            "Date" => "2007-12-22",
            "AveragePollTime" => 2.898,
            "Polls" => 253,
            "AverageReplyTime" => 1.113,
            "Replies" => 253,
            "Reconfigs" => 0,
            "Boredom" => 0,
            "Powerups" => 0,
        ),
        array(
            "DeviceKey" => 1,
            "Date" => "2007-12-23",
            "AveragePollTime" => 3.218,
            "Polls" => 251,
            "AverageReplyTime" => 1.083,
            "Replies" => 251,
            "Reconfigs" => 5,
            "Boredom" => 1,
            "Powerups" => 6,
        ),
    );
    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
        parent::setUp();
        $this->o =& HUGnetDB::getInstance("Analysis", $this->config);
        $config = $this->config;
        $config["table"] = "devices";
        $device =& HUGnetDB::getInstance("Device", $config);
        $device->createTable();
        $this->o->createTable($this->table);

    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
        parent::tearDown();
        unset($this->o);
    }
    /**
     * Data provider for testGetLatestFirmware
     *
     * @return array
     */
    public static function dataHealth()
    {
        return array(
            array(
                array(),
                1,
                null,
                7,
                null,
                array(),
            ),
            array(
                self::$preload,
                "DeviceKey = ?",
                array(1),
                7,
                "2007-12-26",
                array(),
            ),
        );
    }

    /**
     * test
     *
     * @param array  $preload   Data to preload into the database
     * @param string $where Extra where clause for the SQL
     * @param array  $data  The data to use for the where clause
     * @param int    $days  The number of days back to go
     * @param mixed  $start The start date of the health report
     * @param array  $expect    The data we expect returned
     *
     * @return null
     *
     * @dataProvider dataHealth().
     */
    public function testHealth(
        $preload,
        $where,
        $data,
        $days,
        $start,
        $expect
    ) {
        $this->load($preload);
        $ret = $this->o->health($where, $data, $days, $start);
        $this->assertSame($expect, $ret);
    }

}

?>
