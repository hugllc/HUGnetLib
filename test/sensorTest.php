<?php
/**
 *   Tests the sensor class
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$
 *
 */

// Call sensorTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "sensorTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../sensor.php';

/**
 * Test class for sensor.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:46:15.
 */
class sensorTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("sensorTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * @todo Implement testGetReading().
     */
    public function testSensorVar() {
    }
    /**
     *
     */
    public function testRegisterSensor() {
        $o = new sensor();
        $class = "testSensor";
        $o->registerSensor($class);
        $this->assertTrue(is_object($o->sensors[$class]), "Driver object is missing");
        $this->assertEquals(get_class($o->sensors[$class]), $class, "The wrong class got registered");    
        foreach($o->sensors[$class]->sensors as $type => $sInfo) {
            foreach($sInfo as $sensor => $val) {
                $this->assertEquals($o->dev[$type][$sensor], $class, "'$type->$sensor': Not found");
            }
        }

    }

    /**
     * @todo Implement testGetReading().
     */
    public function testGetReadingCall() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($this->getMock($cName), $cName);
        $o->sensors[$cName]->expects($this->once())
                           ->method('Test1')
                           ->with($this->equalTo(1), $this->arrayHasKey("longName"), $this->equalTo(10), $this->equalTo("extra"));
        $ret = $o->getReading(1, 0x100, "testSensor1", 10, "extra");
    }
    /**
     * @todo Implement testGetReading().
     */
    public function testGetReadingBadType() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $ret = $o->getReading(1, 0x400, "testSensor1", 10, "extra");
        $this->assertEquals($ret, 1);
    }
    /**
     * @todo Implement testGetReading().
     */
    public function testGetReadingGood() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $ret = $o->getReading(1, 0x100, "testSensor1", 10, "extra");
        $this->assertEquals($ret, 10);
    }

    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionCall() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($this->getMock($cName), $cName);
        $o->sensors[$cName]->expects($this->once())
                           ->method('Test1')
                           ->with($this->equalTo(1), $this->equalTo(2), $this->equalTo(3), $this->equalTo(4));
        $args = array(1,2,3,4);
        $ret = $o->runFunction($o->sensors[$cName], 'Test1', $args, "2");
    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionGood() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $args = array(1,2,3,4);
        $ret = $o->runFunction($o->sensors[$cName], 'Test2', $args, 5);
        $this->assertEquals($ret, 1);
    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionBadFct() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $args = array(1,2,3,4);
        $ret = $o->runFunction($o->sensors[$cName], 'badFunction', $args, 5);
        $this->assertEquals($ret, 5);
    }
    /**
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionBadClass() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $args = array(1,2,3,4);
        $class = "badClass";
        $ret = $o->runFunction($class, 'Test1', $args, 5);
        $this->assertEquals($ret, 5);
    }

    /**
     * @todo Implement testGetClass().
     */
    public function testGetClassSetSensor() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $type = 0x100;
        $sensor = "";
        $class = $o->getClass($type, $sensor);
        $this->assertTrue(is_object($class), "Object not returned");
        $this->assertEquals(get_class($class), $cName, "Object not returned");
        $this->assertEquals($type, 0x100, "Type changed incorrectly");
        $this->assertEquals($sensor, "testSensor1", "Sensor changed incorrectly");
    }
    /**
     * @todo Implement testGetClass().
     */
    public function testGetClassGood() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $type = 0x100;
        $sensor = "testSensor2";
        $class = $o->getClass($type, $sensor);
        $this->assertTrue(is_object($class), "Object not returned");
        $this->assertEquals(get_class($class), $cName, "Object not returned");
        $this->assertEquals($type, 0x100, "Type changed incorrectly");
        $this->assertEquals($sensor, "testSensor2", "Sensor changed incorrectly");
    }
    /**
     * @todo Implement testGetClass().
     */
    public function testGetClassBad() {
        $o = new sensor();
        $cName = "testSensor";
        $o->registerSensor($cName);
        $type = 0x400;
        $sensor = "testSensor2";
        $class = $o->getClass($type, $sensor);
        $this->assertEquals($class, NULL);
    }

    /**
     * @todo Implement testGetUnits().
     */
    public function testGetUnits() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetExtra().
     */
    public function testGetExtra() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetUnitType().
     */
    public function testGetUnitType() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetSize().
     */
    public function testGetSize() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testDoTotal().
     */
    public function testDoTotal() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetUnitMode().
     */
    public function testGetUnitMode() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetUnitDefMode().
     */
    public function testGetUnitDefMode() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetAllUnits().
     */
    public function testGetAllUnits() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testGetAllSensors().
     */
    public function testGetAllSensors() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testCheckUnits().
     */
    public function testCheckUnits() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testDecodeData().
     */
    public function testDecodeData() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testCheckRecord().
     */
    public function testCheckRecord() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testCheckPoint().
     */
    public function testCheckPoint() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }
}

// Call sensorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "sensorTest::main") {
    sensorTest::main();
}

/**
 *  This is a test sensor.  It is not used for anything else.
 */
class testSensor extends sensor_base {
    var $sensors = array(
        0x100 => array(
            "testSensor1" => array(
                "longName" => "Generic Test Sensor 1",
                "unitType" => "Test",
                "validUnits" => array('A', 'B', 'C'),
                "storageUnit" =>  'B',
                "function" => "test1",
                "extra" => "extraTest",
                "extraDefault" => "extraDefaultTest",
                "unitModes" => array(
                    'A' => 'raw,diff',
                    'B' => 'diff',
                    'C' => 'raw',
                ),
            ),
            "testSensor2" => array(
                "longName" => "Generic Test Sensor 2",
                "unitType" => "Test2",
                "validUnits" => array('D', 'E', 'F'),
                "storageUnit" =>  'E',
                "function" => "test",
                "unitModes" => array(
                    'E' => 'raw,diff',
                    'D' => 'diff',
                    'F' => 'raw',
                ),
            ),
        ),
    );

    /**
     * 
     */    
    public function Test1($val, $sensor, $TC, $extra) {
        // This must stay the same. 
        return $val*10;
    }
    public function Test2($val, $sensor, $TC, $extra) {
        return $val;
    }
}
?>
