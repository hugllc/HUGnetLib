<?php
/**
 * Tests the sensor class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$    
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */

// Call sensorTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "sensorTest::main");
}

/** The test case class */
require_once "PHPUnit/Framework/TestCase.php";
/** The test suite class */
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../sensor.php';

/**
 * Test class for sensor.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:46:15.
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class SensorTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     *
     * @return void
     *
     * @access public
     * @static
     */
    public static function main() 
    {
        include_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("sensorTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     *
     * @access protected
     */
    protected function setUp() 
    {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     *
     * @access protected
     */
    protected function tearDown() 
    {
    }

    /**
     * test
     *
     * @return void
     *
     * @todo Implement testGetReading().
     */
    public function TestSensorVar() 
    {
    }
    /**
     * dataProvider for testRegisterSensor
     *
     * @return array
     *
     */
    public static function dataRegisterSensor() 
    {
        return array(
            array("TestSensor", true),
            array("TestSensorBad", false),
            array("TestSensorNoSensors", false),
        );
    }
    /**
     * test
     *
     * @param string $class  The class to use
     * @param mixed  $expect What to expect
     *
     * @return void
     *
     * @dataProvider dataRegisterSensor
     */
    public function testRegisterSensor($class, $expect) 
    {
        $o   = new sensor();
        $ret = $o->registerSensor($class);
        $this->assertSame($expect, $ret);
        if ($expect) {
            $this->assertThat($o->sensors[$class], $this->isInstanceOf($class));
            foreach ($o->sensors[$class]->sensors as $type => $sInfo) {
                foreach ($sInfo as $sensor => $val) {
                    $this->assertEquals($o->dev[$type][$sensor], $class, "'$type->$sensor': Not found");
                }
            }
        }
    }

    /**
     * test
     *
     * @return void
     *
     * @todo Implement testGetReading().
     */
    public function testGetReadingCall() 
    {
        $o     = new sensor();
        $cName = "TestSensor";
        $o->registerSensor($this->getMock($cName), $cName);
        $o->sensors[$cName]->expects($this->once())
                           ->method('test1')
                           ->with($this->equalTo(1), $this->arrayHasKey("longName"), $this->equalTo(10), $this->equalTo("extra"));
        $sensor = "TestSensor1";
        $ret    = $o->getReading(1, 0x100, $sensor, 10, "extra");
    }
    /**
     * data Provider for testGetReading
     *
     * @return array
     *
     */
    public static function dataGetReading() 
    {
        return array(
            array(1, 0x400, "TestSensor1", 10, 1, 1, "TestSensor1"),
            array(5, 0x100, "TestSensor1", 6, 10, 50, "TestSensor1"),
        );
    }
    /**
     * test
     *
     * @param int   $val          Output of the A to D converter
     * @param int   $type         The type of the sensor
     * @param array $sensor       The sensor information array
     * @param int   $TC           The time constant
     * @param mixed $extra        Extra sensor information
     * @param mixed $expect       The output to expect
     * @param mixed $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetReading
     */
    public function testGetReadingBadType($val, $type, $sensor, $TC, $extra, $expect, $sensorExpect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getReading($val, $type, $sensor, $TC, $extra);
        $this->assertSame($expect, $ret);
        // Sensor is passed by reference so it can change.
        $this->assertSame($sensorExpect, $sensor, "Sensor did not match");
    }

    /**
     * test
     *
     * @return void
     *
     * @todo Implement testRunFunction().
     */
    public function testRunFunctionCall() 
    {
        $o     = new sensor();
        $cName = "TestSensor";
        $o->registerSensor($this->getMock($cName), $cName);
        $o->sensors[$cName]->expects($this->once())
                           ->method('test1')
                           ->with($this->equalTo(1), $this->equalTo(2), $this->equalTo(3), $this->equalTo(4));
        $args = array(1,2,3,4);
        $ret  = $o->runFunction($o->sensors[$cName], 'Test1', $args, "2");
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataRunFunction() 
    {
        return array(
            array("TestSensor", "Test2", array(1,2,3,4), 24, 1),
            array("TestSensor", "badFunction", array(1,2,3,4), 5, 5),
            array("badClass", "Test1", array(1,2,3,4), 7, 7),
        );
    }
    /**
     * test
     *
     * @param object $class    Reference to the class the function is a method of
     * @param string $function the name of the function to call
     * @param array  $args     The arguments to send to that function
     * @param mixed  $default  The default return value
     * @param mixed  $expect   Expected function return
     *
     * @return void
     *
     * @dataProvider dataRunFunction
     */
    public function testRunFunction($class, $function, $args, $default, $expect) 
    {
        $o = new sensor();
        $o->registerSensor($class);
        $ret = $o->runFunction($o->sensors[$class], $function, $args, $default);
        $this->assertSame($expect, $ret);
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataGetClass() 
    {
        return array(
            array(0x100, "", "sameClass", 0x100, "TestSensor1"),
            array(0x100, "TestSensor2", "sameClass", 0x100, "TestSensor2"),
            array(0x400, "TestSensor2", null, 0x400, "TestSensor2"),
        );
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param mixed  $expect       The output to expect
     * @param mixed  $typeExpect   The change in the type to expect
     * @param mixed  $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetClass().
     */
    public function testGetClass($type, $sensor, $expect, $typeExpect, $sensorExpect) 
    {
        $o     = new sensor();
        $cName = "TestSensor";
        $o->registerSensor($cName);
        $class = $o->getClass($type, $sensor);
        if ($expect === "sameClass") {
            $expect = $o->sensors[$cName];
        }
        $this->assertSame($class, $expect, "Wrong object returned");
        $this->assertEquals($type, $typeExpect, "Type changed incorrectly");
        $this->assertEquals($sensor, $sensorExpect, "Sensor changed incorrectly");
    }

    /**
     * Data provider for testGetUnits
     *
     * @return array
     *
     */
    public static function dataGetUnits() 
    {
        return array(
            array(0x100, "TestSensor1", "Q", "B", "TestSensor1"),
            array(0x100, "TestSensor1", "A", "A", "TestSensor1"),
        );
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param string $unit         The units
     * @param mixed  $expect       The output to expect
     * @param mixed  $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetUnits().
     */
    public function testGetUnits($type, $sensor, $unit, $expect, $sensorExpect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getUnits($type, $sensor, $unit);
        $this->assertSame($expect, $ret);
        // Sensor is passed by reference so it can change.
        $this->assertSame($sensorExpect, $sensor, "Sensor did not match");
    }

    /**
     * Data provider for testGetUnitType
     *
     * @return array
     *
     */
    public static function dataGetExtra() 
    {
        $expect[0] = array(
            array(
                "text" => "extraTest1",
                "default" => "extraDefaultTest1",
            ),
            array(
                "text" => "extraTest2",
                "default" => "extraDefaultTest2",
            ),
        );
        $expect[1] = array(
            array(
                "text" => "extraTest",
                "default" => "extraDefaultTest",
            ),
        );

        return array(
            array(0x100, "TestSensor3", $expect[0], "TestSensor3"),
            array(0x100, "TestSensor1", $expect[1], "TestSensor1"),
            array(0x100, "TestSensor2", array(), "TestSensor2"),
            array(0x400, "TestSensor3", array(), "TestSensor3"),
        );
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param mixed  $expect       The output to expect
     * @param mixed  $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetExtra
     */
    public function testGetExtra($type, $sensor, $expect, $sensorExpect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getExtra($type, $sensor);
        $this->assertSame($expect, $ret);
        // Sensor is passed by reference so it can change.
        $this->assertSame($sensorExpect, $sensor, "Sensor did not match");
    }
    /**
     * Data provider for testGetUnitType
     *
     * @return array
     *
     */
    public static function dataGetUnitType() 
    {
        return array(
            array(0x100, "TestSensor3", "Test", "TestSensor3"),
            array(0x400, "TestSensor3", null, "TestSensor3"),
        );
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param mixed  $expect       The output to expect
     * @param mixed  $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetUnitType
     */
    public function testGetUnitType($type, $sensor, $expect, $sensorExpect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getUnitType($type, $sensor);
        $this->assertSame($expect, $ret);
        // Sensor is passed by reference so it can change.
        $this->assertSame($sensorExpect, $sensor, "Sensor did not match");
    }
    /**
     * Data provider for testGetSize
     *
     * @return array
     *
     */
    public static function dataGetSize() 
    {
        return array(
            array(0x100, "TestSensor3", 3),
            array(0x100, "TestSensor1", 1),
            array(0x400, "TestSensor3", 1),
        );
    }
    /**
     * test
     *
     * @param int    $type   The type of the sensor
     * @param string $sensor The sensor name
     * @param mixed  $expect The output to expect
     *
     * @return void
     *
     * @dataProvider dataGetSize
     */
    public function testGetSize($type, $sensor, $expect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getSize($type, $sensor);
        $this->assertSame($expect, $ret);
    }

    /**
     *  Data provider for testDoTotal
     *
     * @return array
     *
     */
    public static function dataDoTotal() 
    {
        return array(
            array(0x100, "TestSensor3", true),
            array(0x100, "TestSensor1", false),
            array(0x400, "TestSensor3", false),
        );
    }
    /**
     * test
     *
     * @param int    $type   The type of the sensor
     * @param string $sensor The sensor name
     * @param mixed  $expect The output to expect
     *
     * @return void
     *
     * @dataProvider dataDoTotal
     */
    public function testDoTotal($type, $sensor, $expect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->doTotal($type, $sensor);
        $this->assertSame($expect, $ret);
    }
    /**
     * Data provider for testGetUnitMode
     *
     * @return array
     *
     */
    public static function dataGetUnitMode() 
    {
        return array(
            array("A", "raw", "ignore", "TestSensor2", 0x100, "TestSensor2"), // Wrong unit for this sensor
            array("A", "raw", "raw", "TestSensor1", 0x100, "TestSensor1"),
            array("B", "raw", "diff", "TestSensor1", 0x100, "TestSensor1"),
            array("B", "diff", "diff", "TestSensor1", 0x100, "TestSensor1"),
            array(null, false, array("A"=>array("raw", "diff")), "TestSensor3", 0x100, "TestSensor3"),
            array("A", false, array("raw", "diff"), "TestSensor3", 0x100, "TestSensor3"),
            array("A", "ignore", "ignore", "TestSensor3", 0x100, "TestSensor3"),
        );
    }
    /**
     * test
     *
     * @param string $unit         The units
     * @param string $mode         The mode
     * @param mixed  $expect       The output to expect
     * @param string $sensor       The sensor name
     * @param int    $type         The type of the sensor
     * @param mixed  $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetUnitMode
     */
    public function testGetUnitMode($unit, $mode, $expect, $sensor, $type, $sensorExpect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getUnitMode($type, $sensor, $unit, $mode);
        $this->assertSame($expect, $ret);
        // Sensor is passed by reference so it can change.
        $this->assertSame($sensorExpect, $sensor, "Sensor did not match");

    }

    /**
     * Data provider for testGetUnitDefMode
     *
     * @return array
     *
     */
    public static function dataGetUnitDefMode() 
    {
        return array(
            array(0x100, "TestSensor1", "A", "raw", "TestSensor1"),
            array(0x100, "TestSensor1", "B", "diff", "TestSensor1"),
            array(0x100, "TestSensor1", null, null, "TestSensor1"),
            array(0x100, "TestSensorBad", null, null, "TestSensor1"),
        );
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param string $unit         The units
     * @param mixed  $expect       The output to expect
     * @param mixed  $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetUnitDefMode
     */
    public function testGetUnitDefMode($type, $sensor, $unit, $expect, $sensorExpect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getUnitDefMode($type, $sensor, $unit);
        $this->assertSame($expect, $ret);
        // Sensor is passed by reference so it can change.
        $this->assertSame($sensorExpect, $sensor, "Sensor did not match");

    }

    /**
     * Data provider for testGetAllUnits
     *
     * @return array
     *
     */
    public static function dataGetAllUnits() 
    {
        return array(
            array(0x100, "TestSensor1", array("A","B","C"), "TestSensor1"),
            array(0x100, "TestSensor2", array("D","E","F"), "TestSensor2"),
            array(0x100, "TestSensorBad", array("A","B","C"), "TestSensor1"),
            array(0x400, "TestSensorBad", array(), "TestSensorBad"),
        );
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param mixed  $expect       The output to expect
     * @param mixed  $sensorExpect The change in the sensors to expect
     *
     * @return void
     *
     * @dataProvider dataGetAllUnits
     */
    public function testGetAllUnits($type, $sensor, $expect, $sensorExpect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->getAllUnits($type, $sensor);
        $this->assertSame($expect, $ret);
        // Sensor is passed by reference so it can change.
        $this->assertSame($sensorExpect, $sensor, "Sensor did not match");

    }

    /**
     * Data provider for testGetAllSensors
     *
     * @return array
     *
     */
    public static function dataGetAllSensors() 
    {
        $expect[0] = array(
            "test1" => array(
                "longName" => "Invalid1",
            ),
        );
        $expect[1] = array(
            "test2" => array(
                "longName" => "Invalid2",
            ),
            "test4" => array(
                "longName" => "Invalid4",
            ),
        );

        return array(
            array(0x101, $expect[0]),
            array(0x102, $expect[1]),
            array(0x400, array()),
        );
    }
    /**
     * test
     *
     * @param int   $type   The type of the sensor
     * @param mixed $expect The output to expect
     *
     * @return void
     *
     * @dataProvider dataGetAllSensors
     */
    public function testGetAllSensors($type, $expect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $o->registerSensor("TestSensorExtraSensors");
        $ret = $o->getAllSensors($type);
        $this->assertSame($expect, $ret);

    }

    /**
     * Data provider for testCheckUnits
     *
     * @return array
     *
     */
    public static function dataCheckUnits() 
    {
        return array(
            array(0x100, "TestSensor1", "A", "diff", "TestSensor1", "A", "diff"),
            array(array(0x100, 0x100), "TestSensor1", "A", "diff", array("TestSensor1", "TestSensor1"), array("B", "B"), array("diff", "diff")),
            array(array(0x100, 0x100), array("TestSensor1", "TestSensor2"), array("B", "A"), array("raw", "diff"), array("TestSensor1", "TestSensor2"), array("B", "E"), array("diff", "diff")),
        );
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param string $units        The units
     * @param string $mode         The mode
     * @param mixed  $expectSensor The change in the sensors to expect
     * @param mixed  $expectUnits  The change in the units to expect
     * @param mixed  $expectMode   The change in the mode to expect
     *
     * @return void
     *
     * @dataProvider dataCheckUnits
     */
    public function testCheckUnitsType($type, $sensor, $units, $mode, $expectSensor, $expectUnits, $expectMode) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $expectType = $type;
        $o->checkUnits($type, $sensor, $units, $mode);
        $this->assertSame($expectType, $type, "Type is not the same");
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param string $units        The units
     * @param string $mode         The mode
     * @param mixed  $expectSensor The change in the sensors to expect
     * @param mixed  $expectUnits  The change in the units to expect
     * @param mixed  $expectMode   The change in the mode to expect
     *
     * @return void
     *
     * @dataProvider dataCheckUnits
     */
    public function testCheckUnitsSensor($type, $sensor, $units, $mode, $expectSensor, $expectUnits, $expectMode) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $o->checkUnits($type, $sensor, $units, $mode);
        $this->assertSame($expectSensor, $sensor, "Sensor is not the same");
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param string $units        The units
     * @param string $mode         The mode
     * @param mixed  $expectSensor The change in the sensors to expect
     * @param mixed  $expectUnits  The change in the units to expect
     * @param mixed  $expectMode   The change in the mode to expect
     *
     * @return void
     *
     * @dataProvider dataCheckUnits
     */
    public function testCheckUnitsUnits($type, $sensor, $units, $mode, $expectSensor, $expectUnits, $expectMode) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $o->checkUnits($type, $sensor, $units, $mode);
        $this->assertSame($expectUnits, $units, "Units is not the same");
    }
    /**
     * test
     *
     * @param int    $type         The type of the sensor
     * @param string $sensor       The sensor name
     * @param string $units        The units
     * @param string $mode         The mode
     * @param mixed  $expectSensor The change in the sensors to expect
     * @param mixed  $expectUnits  The change in the units to expect
     * @param mixed  $expectMode   The change in the mode to expect
     *
     * @return void
     *
     * @dataProvider dataCheckUnits
     */
    public function testCheckUnitsMode($type, $sensor, $units, $mode, $expectSensor, $expectUnits, $expectMode) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $o->checkUnits($type, $sensor, $units, $mode);
        $this->assertSame($expectMode, $mode, "Mode is not the same");
    }

    /**
     * Data provider for testDecodeData
     *
     * @return array
     *
     */
    public static function dataDecodeData() 
    {
        // Run is not used.  It is there so that the particular run is printed.
        // Otherwise we don't know which run failed.  It should be incremented
        // for each test case.
        return array(
            // Test case 1
            // This test case has only one device in it
            array(
                "info" => array(
                    1 => array(
                        "params" => array(
                            "sensorType" => array("TestSensor1", "TestSensor1", "TestSensor2", "TestSensor3", "TestSensor2"),
                            "Extra" => array(5,4,3,2,1),
                        ),
                    ),
                ),
                "data" => array(
                    array(
                        "Date" => "2007-01-02 03:00:00",
                        "DeviceKey" => 1,
                        "ActiveSensors" => 5,
                        "raw" => array(1,2,3,4,5),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("A", "B", null, "B", "B"),
                        "dType" => array("raw", "diff", "diff", "ignore", "raw"),
                    ),
                    array(
                        "Date" => "2007-01-02 03:10:00",
                        "DeviceKey" => 1,
                        "ActiveSensors" => 5,
                        "raw" => array(2,3,4,5,6),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("A", "B", null, "B", "B"),
                        "dType" => array("raw", "diff", "diff", "ignore", "raw"),
                    ),
                    array(
                        "Date" => "2007-01-02 03:20:00",
                        "DeviceKey" => 1,
                        "ActiveSensors" => 5,
                        "raw" => array(3,5,5,6,7),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("A", "B", null, "B", "B"),
                        "dType" => array("raw", "diff", "diff", "ignore", "raw"),
                    ),
                ),
                "expectInfo" => array(
                    1 => array(
                        "params" => array(
                            "sensorType" => array("TestSensor1", "TestSensor1", "TestSensor2", "TestSensor3", "TestSensor2"),
                            "Extra" => array(5,4,3,2,1),
                        ),
                    ),
                ),
                "expectData" => array(
                    1 => array(
                        array(
                            "Date" => "2007-01-02 03:00:00",
                            "DeviceKey" => 1,
                            "ActiveSensors" => 5,
                            "raw" => array(1,2,3,4,5),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("A", "B", "E", "B", "B"),
                            "dType" => array("raw", "diff", "raw", "ignore", "raw"),
                            "unitType" => array("Test", "Test", "Test2", "Test"),
                            "Data0" => 5,
                            "data" => array(5, null, 6, 8),
                            "Data2" => 6,
                            "Data3" => 8,
                            "deltaT" => 0,
                            "Status" => "GOOD",
                        ),
                        array(
                            "Date" => "2007-01-02 03:10:00",
                            "DeviceKey" => 1,
                            "ActiveSensors" => 5,
                            "raw" => array(2,3,4,5,6),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("A", "B", "E", "B", "B"),
                            "dType" => array("raw", "diff", "raw", "ignore", "raw"),
                            "unitType" => array("Test", "Test", "Test2", "Test"),
                            "Data0" => 10,
                            "data" => array(10, 4, 8, 10),
                            "deltaT" => 600,
                            "Data1" => 4,
                            "Data2" => 8,
                            "Data3" => 10,
                            "Status" => "GOOD",
                        ),
                        array(
                            "Date" => "2007-01-02 03:20:00",
                            "DeviceKey" => 1,
                            "ActiveSensors" => 5,
                            "raw" => array(3,5,5,6,7),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("A", "B", "E", "B", "B"),
                            "dType" => array("raw", "diff", "raw", "ignore", "raw"),
                            "unitType" => array("Test", "Test", "Test2", "Test"),
                            "Data0" => 15,
                            "data" => array(15, 8, 10, 12),
                            "deltaT" => 600,
                            "Data1" => 8,
                            "Data2" => 10,
                            "Data3" => 12,
                            "Status" => "GOOD",
                        ),
                    ),
                ),
                "run" => 1,
            ),

            // Test case 2
            // This test case has 2 alternating devices in it
            array(
                "info" => array(
                    1 => array(
                        "params" => array(
                            "sensorType" => array("TestSensor1", "TestSensor1", "TestSensor2", "TestSensor3", "TestSensor2"),
                            "Extra" => array(5,4,3,2,1),
                        ),
                    ),
                    2 => array(
                        "params" => array(
                            "sensorType" => array("TestSensor2", "TestSensor2", "TestSensor1", "TestSensor1", "TestSensor1"),
                            "Extra" => array(11,12,2,3,4),
                        ),
                    ),
                ),
                "data" => array(
                    array(
                        "Date" => "2007-01-02 03:00:00",
                        "DeviceKey" => 1,
                        "ActiveSensors" => 5,
                        "raw" => array(1,2,3,4,5),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("A", "B", null, "B", "B"),
                        "dType" => array("raw", "diff", "diff", "ignore", "raw"),
                    ),
                    array(
                        "Date" => "2007-01-02 03:00:00",
                        "DeviceKey" => 2,
                        "ActiveSensors" => 5,
                        "raw" => array(11,12,13,14,15),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("E", "E", "E", "B", "B"),
                        "dType" => array("diff", "diff", "diff", "ignore", "raw"),
                    ),
                    array(
                        "Date" => "2007-01-02 03:10:00",
                        "DeviceKey" => 1,
                        "ActiveSensors" => 5,
                        "raw" => array(2,3,4,5,6),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("A", "B", null, "B", "B"),
                        "dType" => array("raw", "diff", "diff", "ignore", "raw"),
                    ),
                    array(
                        "Date" => "2007-01-02 03:10:00",
                        "DeviceKey" => 2,
                        "ActiveSensors" => 5,
                        "raw" => array(12,13,14,25,26),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("E", "E", "E", "B", "B"),
                        "dType" => array("diff", "diff", "diff", "ignore", "raw"),
                    ),
                    array(
                        "Date" => "2007-01-02 03:20:00",
                        "DeviceKey" => 1,
                        "ActiveSensors" => 5,
                        "raw" => array(3,5,5,6,7),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("A", "B", null, "B", "B"),
                        "dType" => array("raw", "diff", "diff", "ignore", "raw"),
                    ),
                    array(
                        "Date" => "2007-01-02 03:20:00",
                        "DeviceKey" => 2,
                        "ActiveSensors" => 5,
                        "raw" => array(13,15,15,16,17),
                        "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                        "Units" => array("E", "E", "E", "B", "B"),
                        "dType" => array("diff", "diff", "diff", "ignore", "raw"),
                    ),
                ),
                "expectInfo" => array(
                    1 => array(
                        "params" => array(
                            "sensorType" => array("TestSensor1", "TestSensor1", "TestSensor2", "TestSensor3", "TestSensor2"),
                            "Extra" => array(5,4,3,2,1),
                        ),
                    ),
                    2 => array(
                        "params" => array(
                            "sensorType" => array("TestSensor2", "TestSensor2", "TestSensor1", "TestSensor1", "TestSensor1"),
                            "Extra" => array(11,12,2,3,4),
                        ),
                    ),
                ),
                "expectData" => array(
                    1 => array(
                        array(
                            "Date" => "2007-01-02 03:00:00",
                            "DeviceKey" => 1,
                            "ActiveSensors" => 5,
                            "raw" => array(1,2,3,4,5),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("A", "B", "E", "B", "B"),
                            "dType" => array("raw", "diff", "raw", "ignore", "raw"),
                            "unitType" => array("Test", "Test", "Test2", "Test"),
                            "Data0" => 5,
                            "data" => array(5, null, 6, 8),
                            "Data2" => 6,
                            "Data3" => 8,
                            "deltaT" => 0,
                            "Status" => "GOOD",
                        ),
                        array(
                            "Date" => "2007-01-02 03:10:00",
                            "DeviceKey" => 1,
                            "ActiveSensors" => 5,
                            "raw" => array(2,3,4,5,6),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("A", "B", "E", "B", "B"),
                            "dType" => array("raw", "diff", "raw", "ignore", "raw"),
                            "unitType" => array("Test", "Test", "Test2", "Test"),
                            "Data0" => 10,
                            "data" => array(10, 4, 8, 10),
                            "deltaT" => 600,
                            "Data1" => 4,
                            "Data2" => 8,
                            "Data3" => 10,
                            "Status" => "GOOD",
                        ),
                        array(
                            "Date" => "2007-01-02 03:20:00",
                            "DeviceKey" => 1,
                            "ActiveSensors" => 5,
                            "raw" => array(3,5,5,6,7),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("A", "B", "E", "B", "B"),
                            "dType" => array("raw", "diff", "raw", "ignore", "raw"),
                            "unitType" => array("Test", "Test", "Test2", "Test"),
                            "Data0" => 15,
                            "data" => array(15, 8, 10, 12),
                            "deltaT" => 600,
                            "Data1" => 8,
                            "Data2" => 10,
                            "Data3" => 12,
                            "Status" => "GOOD",
                        ),
                    ),
                    2 => array(
                        array(
                            "Date" => "2007-01-02 03:00:00",
                            "DeviceKey" => 2,
                            "ActiveSensors" => 5,
                            "raw" => array(11,12,13,14,15),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("E", "E", "E", "B", "B"),
                            "dType" => array("raw", "raw", "ignore", "diff", "diff"),
                            "unitType" => array("Test2", "Test2", "Test", "Test", "Test"),
                            "Data0" => 22,
                            "data" => array(22, 24, 26, null, null),
                            "Data1" => 24,
                            "Data2" => 26,
                            "deltaT" => 0,
                            "Status" => "GOOD",
                        ),
                        array(
                            "Date" => "2007-01-02 03:10:00",
                            "DeviceKey" => 2,
                            "ActiveSensors" => 5,
                            "raw" => array(12,13,14,25,26),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("E", "E", "E", "B", "B"),
                            "dType" => array("raw", "raw", "ignore", "diff", "diff"),
                            "unitType" => array("Test2", "Test2", "Test", "Test", "Test"),
                            "Data0" => 24,
                            "data" => array(24, 26, 28, 33, 44),
                            "Data1" => 26,
                            "Data2" => 28,
                            "deltaT" => 600,
                            "Data3" => 33,
                            "Data4" => 44,
                            "Status" => "GOOD",
                        ),
                        array(
                            "Date" => "2007-01-02 03:20:00",
                            "DeviceKey" => 2,
                            "ActiveSensors" => 5,
                            "raw" => array(13,15,15,16,17),
                            "Types" => array(0x100, 0x100, 0x100, 0x100, 0x100),
                            "Units" => array("E", "E", "E", "B", "B"),
                            "dType" => array("raw", "raw", "ignore", "diff", "diff"),
                            "unitType" => array("Test2", "Test2", "Test", "Test", "Test"),
                            "Data0" => 26,
                            "data" => array(26, 30, 30, -27, -36),
                            "Data1" => 30,
                            "Data2" => 30,
                            "deltaT" => 600,
                            "Data3" => -27,
                            "Data4" => -36,
                            "Status" => "GOOD",
                        ),
                    ),
                ),
                "run" => 2,
            ),
  
        );
    }
    /**
     * test
     *
     * @param array $info       devInfo array for the device
     * @param array $data       Data to decode
     * @param array $expectInfo expected change in the devInfo array
     * @param array $expectData expected change in the Data
     *
     * @return void
     *
     * @dataProvider dataDecodeData
     */
    public function testDecodeData($info, $data, $expectInfo, $expectData) 
    {
        // Run is not used.  It is there so that the particular run is printed.
        // Otherwise we don't know which run failed.  It should be incremented
        // for each test case.
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $expectType = $type;
        $newData    = array();
        foreach ($data as $d) {
            $o->DecodeData($info[$d['DeviceKey']], $d);
            $newData[$d['DeviceKey']][] = $d;
        }
        $this->assertSame($expectInfo, $info, "Info is not the same");
        $this->assertSame($expectData, $newData, "Data is not the same");
    }


    /**
     * Data provider for testcheckRecord
     *
     * @return array
     *
     */
    public static function datacheckRecord() 
    {
        return array(
            array(
                "data" => array(
                    "ActiveSensors" => 3,
                    "Data0" => 1,
                    "Data1" => 2,
                    "Data2" => 3,
                    "data" => array(1,2,3),
                    "Types" => array(0x100, 0x100, 0x100),
                    "params" => array(
                        "sensorType" => array("TestSensor1", "TestSensor1", "TestSensor2"),
                    ),
                    "Units" => array("A", "B", "D"),
                    "dType" => array("raw", "diff", "raw"),
                ),
                "expect" => array(
                    "ActiveSensors" => 3,
                    "Data0" => 1,
                    "Data1" => 2,
                    "Data2" => null,
                    "data" => array(1,2,null),
                    "Types" => array(0x100, 0x100, 0x100),
                    "params" => array(
                        "sensorType" => array("TestSensor1", "TestSensor1", "TestSensor2"),
                    ),
                    "Units" => array("A", "B", "D"),
                    "dType" => array("raw", "diff", "raw"),
                    "Status" => "GOOD",
                ),
             ),
        );
    }
    /**
     * test
     *
     * @param array $data   Data to decode
     * @param array $expect expected change in the Data
     *
     * @return void
     *
     * @dataProvider datacheckRecord
     */
    public function testcheckRecord($data, $expect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $o->checkRecord($data);
        $this->assertSame($expect, $data);
    }


    /**
     * Data provider for testCheckPoint
     *
     * @return array
     *
     */
    public static function dataCheckPoint() 
    {
        return array(
            array(1, 0x100, "TestSensor1", "diff", true),
        );
    }
    /**
     * test
     *
     * @param mixed  $value  The value to check
     * @param int    $type   The type of the sensor
     * @param string $sensor The sensor name
     * @param string $mode   The mode
     * @param mixed  $expect The output to expect
     *
     * @return void
     *
     * @dataProvider dataCheckPoint
     */
    public function testCheckPoint($value, $type, $sensor, $mode, $expect) 
    {
        $o = new sensor();
        $o->registerSensor("TestSensor");
        $ret = $o->checkPoint($value, $type, $sensor, $mode);
        $this->assertSame($expect, $ret);
    }

}

// Call sensorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "sensorTest::main") {
    sensorTest::main();
}

/**
 *  This is a test sensor.  It is not used for anything else.
 *
 * @category   Test
 * @package    HUGnetLib
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class TestSensor extends sensor_base
{
    var $sensors = array(
        0x100 => array(
            "TestSensor1" => array(
                "longName" => "Generic Test Sensor 1",
                "unitType" => "Test",
                "validUnits" => array('A', 'B', 'C'),
                "storageUnit" =>  'B',
                "function" => "test1",
                "extraText" => "extraTest",
                "extraDefault" => "extraDefaultTest",
                "unitModes" => array(
                    'A' => 'raw,diff',
                    'B' => 'diff',
                    'C' => 'raw',
                ),
            ),
            "TestSensor2" => array(
                "longName" => "Generic Test Sensor 2",
                "unitType" => "Test2",
                "validUnits" => array('D', 'E', 'F'),
                "storageUnit" =>  'E',
                "mult" => 2,
                "function" => "test",
                "checkFunction" => "s2Check",
                "unitModes" => array(
                    'E' => 'raw,diff',
                    'D' => 'diff',
                    'F' => 'raw',
                ),
            ),
            "TestSensor3" => array(
                "longName" => "Generic Test Sensor 3",
                "unitType" => "Test",
                "validUnits" => array('A'),
                "storageUnit" =>  'A',
                "function" => "test1",
                "extraText" => array("extraTest1", "extraTest2"),
                "extraDefault" => array("extraDefaultTest1", "extraDefaultTest2"),
                "unitModes" => array(
                    'A' => 'raw,diff',
                ),
                "inputSize" => 3,
                "doTotal" => true,
            ),
        ),
        0x101 => array(
            "test1" => array(
                "longName" => "Invalid1",
            ),
        ),
        0x102 => array(
            "test2" => array(
                "longName" => "Invalid2",
            ),
        ),
        0x103 => array(
            "test3" => array(
                "longName" => "Invalid3",
            ),
        ),
    );

    /**
     * Some Function
     *
     * @param float $val    The reading
     * @param array $sensor Sensor information array
     * @param int   $TC     The time constant
     * @param array $extra  Extra information from the sensor
     *
     * @return void
     */
    public function test1($val, $sensor, $TC, $extra) 
    {
        // This must stay the same. 
        return $val*$extra;
    }
    /**
     * Some Function
     *
     * @param float $val    The reading
     * @param array $sensor Sensor information array
     * @param int   $TC     The time constant
     * @param array $extra  Extra information from the sensor
     *
     * @return void
     */
    public function test2($val, $sensor, $TC, $extra) 
    {
        return $val;
    }
    /**
     * Some Function
     *
     * @param int    $val    The current sensor value
     * @param array  $sensor The sensor information array
     * @param string $units  The units the current value are in
     * @param mixed  $dType  The data mode
     *
     * @return void
     */
    public function s2Check($val, $sensor, $units, $dType) 
    {
        if ($val == 3) return false;
        return true;
    }

}
/**
 * This class is to test how things handle not having a sensors variable;
 *
 * @category   Test
 * @package    HUGnetLib
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class TestSensorExtraSensors extends sensor_base
{
    /** Sensors array */
    var $sensors = array(
        0x102 => array(
            "test4" => array(
                "longName" => "Invalid4",
            ),
        ),
    );
}
/**
 * This class is to test how things handle not having a sensors variable;
 *
 * @category   Test
 * @package    HUGnetLib
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class TestSensorNoSensors extends sensor_base
{
    /**
     * This is here so that it won't run the sensor_base constructor
     */
    function __construct() 
    {
        // Make absolutely sure that there are no sensors
        unset($this->sensors);
    }
}
?>
