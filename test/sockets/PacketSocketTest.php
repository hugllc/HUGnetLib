<?php
/**
 * Tests the filter class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Sockets
 * @package    HUGnetLibTest
 * @subpackage Sockets
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../../sockets/PacketSocket.php';
require_once dirname(__FILE__).'/../../containers/PacketContainer.php';
require_once 'PHPUnit/Extensions/Database/TestCase.php';

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:56.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Devices
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class PacketSocketTest extends PHPUnit_Extensions_Database_TestCase
{

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        $this->myConfig = &ConfigContainer::singleton();
        $this->myConfig->forceConfig();
        $this->pdo = &$this->myConfig->servers->getPDO();
        $this->pdo->query("DROP TABLE IF EXISTS `PacketSocket`");
        $this->myTable = new PacketSocketTable();
        $this->o = new PacketSocket();
        $this->o->connect();
        parent::setUp();
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
         if (is_object($this->pdo)) {
            $this->pdo->query("DROP TABLE IF EXISTS `myTable`");
        }
        $this->o   = null;
        $this->pdo = null;
    }
    /**
    * This sets up our database connection
    *
    * @return null
    */
    protected function getConnection()
    {
        return $this->createDefaultDBConnection($this->pdo, "sqlite");
    }

    /**
    * This gets us our database preload
    *
    * @access protected
    *
    * @return null
    */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(
            dirname(__FILE__).'/../files/PacketSocketTest.xml'
        );
    }


    /**
    * data provider for testDeviceID
    *
    * @return array
    */
    public static function dataConstructor()
    {
        return array(
            array(
                array(
                ),
                array(
                    "dbGroup" => "default",
                    "group" => "default",
                    "Timeout" => 10,
                    "readIndex" => 0,
                ),
            ),
            array(
                array(
                    "dbGroup" => "myDBGroup",
                    "group" => "myGroup",
                    "Timeout" => 15,
                    "readIndex" => 5,
                ),
                array(
                    "dbGroup" => "myDBGroup",
                    "group" => "myGroup",
                    "Timeout" => 15,
                    "readIndex" => 5,
                ),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor($preload, $expect)
    {
        $o = new PacketSocket($preload);
        $this->assertAttributeSame($expect, "data", $o);
    }
    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataConnect()
    {
        return array(
            array(
                array(),
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataConnect
    */
    public function testConnect($preload, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->connect();
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataDisconnect()
    {
        return array(
            array(
                array(),
                true,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array $preload The value to preload
    * @param array $expect  The expected return
    * @param mixed $socket  What to expect in the socket
    *
    * @return null
    *
    * @dataProvider dataDisconnect
    */
    public function testDisconnect($preload, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->connect();
        $this->o->disconnect();
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataRead()
    {
        return array(
            array(
                array(
                ),
                "",
                false,
            ),
        );
    }


    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataSendPkt()
    {
        return array(
            array(
                array(
                ),
                new PacketContainer(),
                false,
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload The value to preload
    * @param string $write   The string to write
    * @param mixed  $expect  The expected return
    *
    * @return null
    *
    * @dataProvider dataSendPkt
    */
    public function testSendPkt($preload, $write, $expect)
    {
        $this->o->fromArray($preload);
        $ret = $this->o->sendPkt($write);
        $this->assertSame($expect, $ret);
    }

    /**
    * data provider for testConnect
    *
    * @return array
    */
    public static function dataRecvPkt()
    {
        return array(
            array(
                array(
                ),
                "",
                false,
                new PacketContainer(array("Timeout" => 1)),
            ),
            array(
                array(
                ),
                array(
                    "group" => "default",
                    "id" => null,
                    "Date" => date("Y-m-d H:i:s"),
                    "Command" => "01",
                    "PacketTo" => "654321",
                    "PacketFrom" => "123456",
                    "RawData" => "010203040506",
                    "Type" => "Reply",
                    "Checked" => 0,
                    "ReplyTo" => 0,
                ),
                true,
                new PacketContainer(array(
                    "Timeout" => 5,
                    "From" => "654321",
                    "To" => "123456",
                    "Command" => "5C",
                )),
            ),
        );
    }

    /**
    * test the set routine when an extra class exists
    *
    * @param array  $preload The value to preload
    * @param string $write   The string to write
    * @param mixed  $expect  The expected return
    * @param object $pkt     The packet to use
    *
    * @return null
    *
    * @dataProvider dataRecvPkt
    */
    public function testRecvPkt($preload, $write, $expect, $pkt)
    {
        $this->o->fromArray($preload);
        $this->myTable->fromArray($write);
        $this->myTable->insertRow();
        $ret = $this->o->recvPkt($pkt);
        $this->assertSame($expect, $ret);
        // We are going to test the buffer here.  That is about the best we can
        // do without building a custom network server.
        if (strlen($buffer) > 0) {
            $read = $this->readAttribute($this->o, "buffer");
            // Since we can't control the read length, we will make the strings
            // The same size.
            $read = devInfo::dehexify($read);
            $read = substr($read, 0, strlen($buffer));
            $buffer = substr($buffer, 0, strlen($read));
            $this->assertSame($buffer, $read);
        }
    }

}

?>
