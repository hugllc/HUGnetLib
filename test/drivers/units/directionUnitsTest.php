<?php
/**
 * Tests the light sensor class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


require_once dirname(__FILE__).'/../unitTestBase.php';
require_once dirname(__FILE__).'/../../../drivers/units/directionUnits.php';

/**
 * Test class for sensor.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:08:37.
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DirectionUnitsTest extends UnitTestBase
{
    var $class = "directionUnits";

    /**
     * data provider for testUnitArrayLongName, testUnitArrayVarType,
     *
     * @return array
     */
    public static function dataUnitArray()
    {
        return self::getDataUnitArray("directionUnits");
    }
    /**
     * data provider for testUnitArrayConvertFunct
     *
     * @return array
     */
    public static function dataUnitArrayConvertFunct()
    {
        return self::getDataUnitArrayConvertFunct("directionUnits");
    }
    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->o = new directionUnits();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
    }
    /**
     * Data provider for testFindUnit
     *
     * @return array
     */
    public static function dataDirection()
    {
        // Put stuff that works either direction here.
        return array(
            array(0, "N"),
            array(22.5, "NNE"),
            array(45, "NE"),
            array(67.5, "ENE"),
            array(90, "E"),
            array(112.5, "ESE"),
            array(135, "SE"),
            array(157.5, "SSE"),
            array(180, "S"),
            array(202.5, "SSW"),
            array(225, "SW"),
            array(247.5, "WSW"),
            array(270, "W"),
            array(292.5, "WNW"),
            array(315, "NW"),
            array(337.5, "NNW"),
        );
    }
    /**
     * Data provider for testFindUnit
     *
     * @return array
     */
    public static function dataDirtoNumDir()
    {
        $newStuff = array(
            array(0, "ASDF"),
        );
        return array_merge(self::dataDirection(), $newStuff);
    }
    /**
     * Test dirTonumDir
     *
     * @param float  $numdir The text direction
     * @param string $dir    The value to expect
     *
     * @return null
     *
     * @dataProvider dataDirtoNumDir
     */
    public function testDirtonumDir($numdir, $dir)
    {
        $this->assertSame($numdir, $this->o->DirtonumDir($dir, 0, 0));
    }

    /**
     * Data provider for testFindUnit
     *
     * @return array
     */
    public static function dataNumDirtoDir()
    {
        $newStuff = array(
            array(360, "N"),
            array(-1, "N"),
        );
        return array_merge(self::dataDirection(), $newStuff);
    }
    /**
     * Test numDirToDir
     *
     * @param float $numdir The text direction
     * @param int   $dir    The value to expect
     *
     * @return null
     *
     * @dataProvider dataNumDirtoDir
     */
    public function testnumDirtoDir($numdir, $dir)
    {
        $this->assertSame($dir, $this->o->numDirtoDir($numdir, 0, 0));
    }

}
?>
