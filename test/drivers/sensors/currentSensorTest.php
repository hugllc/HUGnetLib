<?php
/**
 *   Tests the current sensor class
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$
 *
 */

// Call currentSensorTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "currentSensorTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../sensorTestBase.php';
require_once dirname(__FILE__).'/../../../drivers/sensors/currentSensor.php';

/**
 * Test class for sensor.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:08:37.
 */
class currentSensorTest extends sensorTestBase {
    var $class = "currentSensor";
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("currentSensorTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * data provider for testSensorArray*
     */    
    public static function dataSensorArray() {
        return sensorTestBase::sensorArrayDataSource("currentSensor");
    }

    /**
     * Data provider for testGetCurrent
     */
    public static function dataGetCurrent() {
        return array(
            array(500, 0.5, 1, 1, 0.0764),
            array(0, 1, 2, 3, 0.0),
            array(1, 0, 2, 3, 0.0),
            array(1, 2, 0, 3, 0.0),
            array(1, 2, 3, 0, 0.0),
        );
    }
    /**
     * @dataProvider dataGetCurrent
     * @covers currentSensor::GetCurrent
     */
    public function testGetCurrent($A, $R, $G, $T, $expect) {
        $o = new currentSensor();
        $ret = $o->getCurrent($A, $R, $G, $T);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testFETBoard
     */
    public static function dataFETBoard() {
        return array(
            array(500, array('extraDefault'=>array(1, 1)), 1, array(0.5, 1), 0, 76.4),
            array(500, array('extraDefault'=>array(0.5, 1)), 1, array(0, 1), 0, 76.4),
            array(500, array('extraDefault'=>array(0.5, 1)), 1, array(0.5, 0), 0, 76.4),
            array(500, array('extraDefault'=>array(0, 0)), 1, array(0, 0), 0, 0.0),
        );
    }
    /**
     * @dataProvider dataFETBoard
     * @covers currentSensor::FETBoard
     */
    public function testFETBoard($val, $sensor, $TC, $extra, $deltaT, $expect) {
        parent::sensorTest("currentSensor", "FETBoard", $val, $sensor, $TC, $extra, $deltaT, $expect);
    }

}

// Call currentSensorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "currentSensorTest::main") {
    currentSensorTest::main();
}
?>
