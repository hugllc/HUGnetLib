<?php
/**
 * Tests the current sensor class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2009 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */


require_once dirname(__FILE__).'/../sensorTestBase.php';
require_once dirname(__FILE__).'/../../../drivers/sensors/currentSensor.php';

/**
 * Test class for sensor.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:08:37.
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class CurrentSensorTest extends sensorTestBase
{
    var $class = "currentSensor";

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
    }

    /**
    * data provider for testSensorArray*
    *
    * @return null
    */
    public static function dataSensorArray()
    {
        return sensorTestBase::sensorArrayDataSource("currentSensor");
    }

    /**
    * Data provider for testGetCurrent
    *
    * @return null
    */
    public static function dataGetCurrent()
    {
        return array(
            array(500, 0.5, 1, 1, 0.0764),
            array(0, 1, 2, 3, 0.0),
            array(1, 0, 2, 3, 0.0),
            array(1, 2, 0, 3, 0.0),
            array(1, 2, 3, 0, 0.0),
        );
    }
    /**
    * test
    *
    * @param int   $A      The raw AtoD reading
    * @param float $R      The resistance of the current sensing resistor
    * @param float $G      The gain of the circuit
    * @param int   $T      The time constant
    * @param float $expect The expected current
    *
    * @return null
    *
    * @dataProvider dataGetCurrent
    * @covers currentSensor::GetCurrent
    */
    public function testGetCurrent($A, $R, $G, $T, $expect)
    {
        $o   = new currentSensor();
        $ret = $o->getCurrent($A, $R, $G, $T);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testfetBoard
    *
    * @return null
    */
    public static function dataFetBoard()
    {
        return array(
            array(
                  500,
                  array('extraDefault'=>array(1, 1)),
                  1,
                  array(0.5, 1),
                  0,
                  76.4
                 ),
            array(
                  500,
                  array('extraDefault'=>array(0.5, 1)),
                  1,
                  array(0, 1),
                  0,
                  76.4
                 ),
            array(
                  500,
                  array('extraDefault'=>array(0.5, 1)),
                  1,
                  array(0.5, 0),
                  0,
                  76.4
                 ),
            array(
                  500,
                  array('extraDefault'=>array(0, 0)),
                  1,
                  array(0, 0),
                  0,
                  0.0
                 ),
        );
    }
    /**
    * test
    *
    * @param float $val    The incoming value
    * @param array $sensor The sensor setup array
    * @param int   $TC     The time constant
    * @param mixed $extra  Extra parameters for the sensor
    * @param float $deltaT The time difference
    * @param float $expect The expected current
    *
    * @return null
    *
    * @dataProvider datafetBoard
    * @covers currentSensor::fetBoard
    */
    public function testFetBoard($val, $sensor, $TC, $extra, $deltaT, $expect)
    {
        parent::sensorTest("currentSensor",
                           "fetBoard",
                           $val,
                           $sensor,
                           $TC,
                           $extra,
                           $deltaT,
                           $expect);
    }

}

?>
