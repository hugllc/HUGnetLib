<?php
/**
 * Tests the resistive sensor class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

require_once dirname(__FILE__).'/../sensorTestBase.php';
require_once dirname(__FILE__).'/../../../drivers/sensors/resistiveSensor.php';

/**
 * Test class for sensor.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:08:37.
 *
 * @category   Sensors
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class ResistiveSensorTest extends SensorTestBase
{
    var $class = "resistiveSensor";

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
    }
    /**
     * data provider for testSensorArray*
     *
     * @return array
     */
    public static function dataSensorArray()
    {
        return parent::sensorArrayDataSource("resistiveSensor");
    }

    /**
     * Data provider for testGetResistance
     *
     * @return array
     */
    public static function dataGetResistance()
    {
        return array(
            array(0, 0, 1, 0.0),
            array(10000, 1, 10, 1.8027),
            array(10000, 1, 10, 0.0, null, 0),
        );
    }
    /**
    * test
    *
    * @param int   $A      The a to d reading
    * @param int   $TC     The time constant
    * @param float $Bias   The bias resistance
    * @param mixed $expect The expected return value
    * @param int   $Tf     See {@link sensor_base::$Tf}
    * @param int   $D      See {@link sensor_base::$D}
    * @param int   $s      See {@link sensor_base::$s}
    * @param int   $Am     See {@link sensor_base::$Am}
    *
    * @return null
    *
    * @dataProvider dataGetResistance
    * @covers resistiveSensor::GetResistance
    */
    public function testGetResistance(
        $A,
        $TC,
        $Bias,
        $expect,
        $Tf = null,
        $D = null,
        $s = null,
        $Am = null
    ) {
        $o   = new resistiveSensor();
        $ret = $o->getResistance($A, $TC, $Bias, $Tf, $D, $s, $Am);
        $this->assertSame($expect, $ret);
    }

    /**
    * Data provider for testGetResistance
    *
    * @return array
    */
    public static function dataGetSweep()
    {
        return array(
            array(0, 1, 1, 0.0),
            array(10000, 1, 10, 1.5274),
            array(65535, 1, 10, 10.0),
            array(10000, 1, 10, 0.0, null, 0),
            array(10000, 1, 10, 10.0, 0),
            array(10000, 1, 10, 0.0, -1),
        );
    }
    /**
    * test
    *
    * @param int   $A      The a to d reading
    * @param int   $TC     The time constant
    * @param float $R      The bias resistance
    * @param mixed $expect The expected return value
    * @param int   $Tf     See {@link sensor_base::$Tf}
    * @param int   $D      See {@link sensor_base::$D}
    * @param int   $s      See {@link sensor_base::$s}
    * @param int   $Am     See {@link sensor_base::$Am}
    *
    * @return null
    *
    * @dataProvider dataGetSweep
    */
    public function testGetSweep(
        $A,
        $TC,
        $R,
        $expect,
        $Tf = null,
        $D = null,
        $s = null,
        $Am = null
    ) {
        $o   = new resistiveSensor();
        $ret = $o->getSweep($A, $TC, $R, $Tf, $D, $s, $Am);
        $this->assertSame($expect, $ret);
    }

    /**
     * Data provider for testBCTherm238164066103
     *
     * @return array
     */
    public static function dataBCTherm238164066103()
    {
        return array(
            array(
                63570,
                array('extraDefault'=>array(10, 10)),
                1,
                array(10, 10),
                0,
                null
            ), // -40.1 degrees
            array(
                1150,
                array('extraDefault'=>array(10, 10)),
                1,
                array(10, 10),
                0,
                null
            ),  // 150.9 degrees
            array(
                5000,
                array('extraDefault'=>array(10, 10)),
                1,
                array(10, 10),
                0,
                93.3105
            ),
            array(
                5000,
                array('extraDefault'=>array(10, 10)),
                1,
                array(0, 10),
                0,
                93.3105
            ),
            array(
                5000,
                array('extraDefault'=>array(10, 10)),
                1,
                array(10, 0),
                0,
                93.3105
            ),
            array(
                5000,
                array('extraDefault'=>array(0, 0)),
                1,
                array(0, 0),
                0,
                null
            ),
            array(
                5000,
                array('extraDefault'=>array(10, 0)),
                1,
                array(0, 0),
                0,
                null
            ),
        );
    }
    /**
     * test
     *
     * @param int   $A      The a to d reading
     * @param array $sensor The sensor array
     * @param int   $TC     The time constant
     * @param mixed $extra  The extra sensor data
     * @param float $deltaT The time difference
     * @param mixed $expect The expected return value
     *
     * @return null
     *
     * @dataProvider dataBCTherm238164066103
     * @covers resistiveSensor::BCTherm238164066103
     * @covers resistiveSensor::_BCTherm2322640Interpolate
     */
    public function testBCTherm238164066103(
        $A,
        $sensor,
        $TC,
        $extra,
        $deltaT,
        $expect
    ) {
        parent::sensorTest(
            "resistiveSensor",
            "BCTherm238164066103",
            $A,
            $sensor,
            $TC,
            $extra,
            $deltaT,
            $expect
        );
    }

    /**
     * Data provider for testBCTherm238164066103
     *
     * @return array
     */
    public static function dataPotDir()
    {
        return array(
            array(
                65535,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(10, 0, 0, 180, 10),
                0,
                180.0
            ),
            array(
                1150,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(10, 0, 1, 180, 1),
                0,
                null
            ),
            array(
                5000,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(10, 1, 0, 1, 15),
                0,
                null,
            ),
            array(
                5000,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(0, 1, 0, 1, 15),
                0,
                null,
            ),
            array(
                0,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(),
                0,
                0.0,
            ),
            array(
                65535,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(),
                0,
                180.0,
            ),
            array(
                65535,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(),
                0,
                180.0,
            ),
            array(
                32768,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                array(),
                0,
                90.0882,
            ),
            array(
                32768,
                array('extraDefault'=>array(10, 0, 0, 180, 10)),
                1,
                "This is not an array",
                0,
                90.0882,
            ),
            array(
                32,
                array('extraDefault'=>array(100, 0, 10, 360, 90)),
                1,
                array(),
                0,
                315.2201,
            ),
            array(
                65432,
                array('extraDefault'=>array(100, 0, 10, 360, 90)),
                1,
                array(),
                0,
                44.7251,
            ),
        );
    }
    /**
     * test
     *
     * @param int   $A      The a to d reading
     * @param array $sensor The sensor array
     * @param int   $TC     The time constant
     * @param mixed $extra  The extra sensor data
     * @param float $deltaT The time difference
     * @param mixed $expect The expected return value
     *
     * @return null
     *
     * @dataProvider dataPotDir
     */
    public function testPotDir(
        $A,
        $sensor,
        $TC,
        $extra,
        $deltaT,
        $expect
    ) {
        parent::sensorTest(
            "resistiveSensor",
            "potDir",
            $A,
            $sensor,
            $TC,
            $extra,
            $deltaT,
            $expect
        );
    }


     /**
    * Data provider for testBCTherm238164066103
    *
    * @return array
     */
    public static function dataIMCSolar()
    {
        return array(
            array(
                63630,
                array('extraDefault'=>array(10)),
                1,
                array(10),
                0,
                null
            ), // -40.1 degrees
            array(
                400,
                array('extraDefault'=>array(10)),
                1,
                array(10),
                0,
                null
            ),  // 192.2 degrees
            array(
                5000,
                array('extraDefault'=>array(10)),
                1,
                array(0),
                0,
                94.0506
            ),
            array(
                5000,
                array('extraDefault'=>array(10)),
                1,
                array(10),
                0,
                94.0506
            ),
            array(
                5000,
                array('extraDefault'=>array(10)),
                1,
                "This is not an array",
                0,
                94.0506
            ),
            array(
                5000,
                array('extraDefault'=>array(0)),
                1,
                array(0),
                0,
                null
            ),
        );
    }
    /**
    * test
    *
    * @param int   $A      The a to d reading
    * @param array $sensor The sensor array
    * @param int   $TC     The time constant
    * @param mixed $extra  The extra sensor data
    * @param float $deltaT The time difference
    * @param mixed $expect The expected return value
    *
    * @return null
    *
    * @dataProvider dataIMCSolar
    */
    public function testIMCSolar($A, $sensor, $TC, $extra, $deltaT, $expect)
    {
        parent::sensorTest(
            "resistiveSensor",
            "IMCSolar",
            $A,
            $sensor,
            $TC,
            $extra,
            $deltaT,
            $expect
        );
    }

     /**
    * Data provider for testBCTherm238164066103
    *
    * @return array
     */
    public static function dataB57560G0103F000()
    {
        return array(
            array(
                65630,
                array('extraDefault'=>array(10)),
                1,
                array(10),
                0,
                null
            ), // -40.1 degrees
            array(
                50,
                array('extraDefault'=>array(10)),
                1,
                array(10),
                0,
                null
            ),  // 192.2 degrees
            array(
                5000,
                array('extraDefault'=>array(10)),
                1,
                array(0),
                0,
                110.0645
            ),
            array(
                5000,
                array('extraDefault'=>array(10)),
                1,
                array(10),
                0,
                110.0645
            ),
            array(
                5000,
                array('extraDefault'=>array(10)),
                1,
                "This is not an array",
                0,
                110.0645
            ),
            array(
                5000,
                array('extraDefault'=>array(0)),
                1,
                array(0),
                0,
                null
            ),
        );
    }
    /**
    * test
    *
    * @param int   $A      The a to d reading
    * @param array $sensor The sensor array
    * @param int   $TC     The time constant
    * @param mixed $extra  The extra sensor data
    * @param float $deltaT The time difference
    * @param mixed $expect The expected return value
    *
    * @return null
    *
    * @dataProvider dataB57560G0103F000
    */
    public function testB57560G0103F000($A, $sensor, $TC, $extra, $deltaT, $expect)
    {
        parent::sensorTest(
            "resistiveSensor",
            "B57560G0103F000",
            $A,
            $sensor,
            $TC,
            $extra,
            $deltaT,
            $expect
        );
    }



    /**
     * Data provider for testResisDoor
     *
     * @return array
     */
    public static function dataResisDoor()
    {
        return array(
            array(
                  5000,
                  array('extraDefault'=>array(10, 10, 10)),
                  1,
                  array(10, 10, 10),
                  0,
                  null), // R < Fixed
            array(
                  50000,
                  array('extraDefault'=>array(10, 10, 10)),
                  1,
                  array(10, 10, 10),
                  0,
                  null), // % > 100
            array(
                  40000,
                  array('extraDefault'=>array(10, 10, 10)),
                  1,
                  array(10, 10, 10),
                  0,
                  57.04),
            array(
                  40001,
                  array('extraDefault'=>array(10, 10, 10)),
                  1,
                  array(0, 10, 10),
                  0,
                  57.05),
            array(
                  40002,
                  array('extraDefault'=>array(10, 10, 10)),
                  1,
                  array(10, 0, 10),
                  0,
                  57.06),
            array(
                  40003,
                  array('extraDefault'=>array(10, 10, 10)),
                  1,
                  array(10, 10, 0),
                  0,
                  57.07),
            array(
                  40004,
                  array('extraDefault'=>array(0, 0, 0)),
                  1,
                  array(0, 10, 10),
                  0,
                  null),
            array(
                  40005,
                  array('extraDefault'=>array(0, 0, 0)),
                  1,
                  array(10, 0, 10),
                  0,
                  null),
            array(
                  40006,
                  array('extraDefault'=>array(0, 0, 0)),
                  1,
                  array(10, 10, 0),
                  0,
                  null),
        );
    }
    /**
     * test
     *
     * @param int   $A      The a to d reading
     * @param array $sensor The sensor array
     * @param int   $TC     The time constant
     * @param mixed $extra  The extra sensor data
     * @param float $deltaT The time difference
     * @param mixed $expect The expected return value
     *
     * @return null
     *
     * @dataProvider dataResisDoor
     * @covers resistiveSensor::ResisDoor
     */
    public function testResisDoor($A, $sensor, $TC, $extra, $deltaT, $expect)
    {
        parent::sensorTest(
            "resistiveSensor",
            "resisDoor",
            $A,
            $sensor,
            $TC,
            $extra,
            $deltaT,
            $expect
        );
    }

    /**
     * Data provider for testgetMoistureV2
     *
     * @return array
     */
    public static function datagetMoistureV2()
    {
        return array(
            array(
                  40000,
                  array('extraDefault'=>array(1000, 10, 1000)),
                  1,
                  array(1000, 10, 1000),
                  0,
                  1570.3518),
            array(
                  40001,
                  array('extraDefault'=>array(1000, 10, 1000)),
                  1,
                  array(0, 10, 1000),
                  0,
                  1570.4527),
            array(
                  40002,
                  array('extraDefault'=>array(1000, 10, 1000)),
                  1,
                  array(1000, 0, 1000),
                  0,
                  1570.5536),
            array(
                  40003,
                  array('extraDefault'=>array(1000, 10, 1000)),
                  1,
                  array(1000, 10, 0),
                  0,
                  1570.6545),
            array(
                  40006,
                  array('extraDefault'=>array(0, 0, 0)),
                  1,
                  array(1000, 10, 0),
                  0,
                  null),
        );
    }
    /**
     * test
     *
     * @param int   $A      The a to d reading
     * @param array $sensor The sensor array
     * @param int   $TC     The time constant
     * @param mixed $extra  The extra sensor data
     * @param float $deltaT The time difference
     * @param mixed $expect The expected return value
     *
     * @return null
     *
     * @dataProvider datagetMoistureV2
     * @covers resistiveSensor::GetMoistureV2
     */
    public function testgetMoistureV2($A, $sensor, $TC, $extra, $deltaT, $expect)
    {
        parent::sensorTest(
            "resistiveSensor",
            "getMoistureV2",
            $A,
            $sensor,
            $TC,
            $extra,
            $deltaT,
            $expect
        );
    }

    /**
     * Data provider for testgetMoistureV1
     *
     * @return array
     */
    public static function datagetMoistureV1()
    {
        return array(
            array(
                4000,
                array('extraDefault'=>array(1000, 10, 1000)),
                1,
                array(1000, 10, 1000),
                0,
                6.56
            ),
            array(
                4001,
                array('extraDefault'=>array(1000, 10, 1000)),
                1,
                array(0, 10, 1000),
                0,
                6.56
            ),
            array(
                4002,
                array('extraDefault'=>array(1000, 10, 1000)),
                1,
                array(1000, 0, 1000),
                0,
                6.56
            ),
            array(
                4003,
                array('extraDefault'=>array(1000, 10, 1000)),
                1,
                array(1000, 10, 0),
                0,
                6.56
            ),
            array(
                4006,
                array('extraDefault'=>array(0, 0, 0)),
                1,
                array(0, 0, 0),
                0,
                null
            ),
            array(
                0,
                array('extraDefault'=>array(1000, 10, 1000)),
                1,
                array(1000, 10, 1000),
                0,
                35.0
            ),
            array(
                400200,
                array('extraDefault'=>array(1000, 10, 1000)),
                1,
                array(1000, 0, 1000),
                0,
                null
            ),
        );
    }
    /**
     * test
     *
     * @param int   $A      The a to d reading
     * @param array $sensor The sensor array
     * @param int   $TC     The time constant
     * @param mixed $extra  The extra sensor data
     * @param float $deltaT The time difference
     * @param mixed $expect The expected return value
     *
     * @return null
     *
     * @dataProvider datagetMoistureV1
     * @covers resistiveSensor::GetMoistureV1
     */
    public function testgetMoistureV1($A, $sensor, $TC, $extra, $deltaT, $expect)
    {
        parent::sensorTest(
            "resistiveSensor",
            "getMoistureV1",
            $A,
            $sensor,
            $TC,
            $extra,
            $deltaT,
            $expect
        );
    }

}

?>
