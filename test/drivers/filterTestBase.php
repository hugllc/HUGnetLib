<?php
/**
 * This is the basis for all filter test classes.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Filters
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */
if (!defined("HUGNET_INCLUDE_PATH")) {
    define("HUGNET_INCLUDE_PATH", dirname(__FILE__)."/../..");
}

require_once dirname(__FILE__).'/../../filter.php';

// Need to make sure this file is not added to the code coverage
PHPUnit_Util_Filter::addFileToFilter(__FILE__);

/**
 * Test class for filter.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:09:44.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Filters
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class FilterTestBase extends PHPUnit_Framework_TestCase
{
    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
    }
    /**
    * This gets the filter array and returns it.
    *
    * @param string $class The class to use
    *
    * @return array
    */
    public static function filterArrayDataSource($class)
    {
        $o = new $class();
        $return = array();
        foreach ($o->filters as $catName => $cat) {
            foreach ($cat as $shortName => $sensor) {
                $return[] = array($catName, $shortName, $sensor);
            }
        }
        return $return;
    }

    /**
     * Data provider stub for testFilterVariable
     *
     *  This should be redifined in subclasses.
     *
     * @return array
     */
    public static function dataFilterVariable()
    {
        return array();
    }
    /**
     * test
     *
     * @param string $catName   The category name
     * @param string $shortName The sensor short name
     * @param array  $filter    The filter array
     *
     * @return null
     *
     * @dataProvider dataFilterVariable
     */
    public function testFilterVariableLongName($catName, $shortName, $filter)
    {
        // Long Name
        $this->assertType(
            "string",
            $filter['longName'],
            $catName.":".$shortName.": Long name is not a string"
        );
        $this->assertThat(
            strlen($filter['longName']),
            $this->greaterThan(0),
            $catName.":".$shortName.": Long name is not a set"
        );
    }
    /**
     * test
     *
     * @param string $catName   The category name
     * @param string $shortName The sensor short name
     * @param array  $sensor    The sensor array
     *
     * @return null
     *
     * @dataProvider dataFilterVariable
     */
    public function testFilterVariableExtra($catName, $shortName, $sensor)
    {
        if (isset($sensor["extraText"])) {
            if (is_array($sensor["extraText"])) {
                $this->assertType(
                    "array",
                    $sensor['extraDefault'],
                    $this->class.":".$type.":".$shortName.": If extraText is an "
                    ."array extraDefault must also be an array."
                );
                $this->assertEquals(
                    count($sensor['extraText']),
                    count($sensor['extraDefault']),
                    $this->class.":".$type.":".$shortName.": extraText and "
                    ."extraDefault must have the same number of elements"
                );
            } else {
                $this->assertType(
                    "string",
                    $sensor['extraText'],
                    $this->class.":".$type.":".$shortName.": extraText must either "
                    ."be an array or a string"
                );
                $this->assertNotType(
                    "array",
                    $sensor['extraDefault'],
                    $this->class.":".$type.":".$shortName.": If extraText is not an "
                    ."array extraDefault must also not be an array."
                );
            }
        }
    }

    /**
     * Generic function to test filter routines.
     *
     * @param string $class  The class to use
     * @param string $method The method to call
     * @param mixed  $val    The value to expect
     *
     * @return null
     *
     * call by using parent::filterTest()
     */
    public static function filterTest($class, $method, $val)
    {

    }
}

?>
