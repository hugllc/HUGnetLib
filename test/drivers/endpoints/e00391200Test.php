<?php
/**
 * Tests the 00391200 endpoint class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2009 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Drivers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */


/** The test case class */
require_once "PHPUnit/Framework/TestCase.php";
/** The test suite class */
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../endpointTestBase.php';
require_once dirname(__FILE__).'/../../../drivers/endpoints/e00391200.php';

/**
 * Test class for endpoints.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:06:08.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Drivers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class e00391200Test extends endpointTestBase
{
    public $class = "e00391200";
    /**
     *  Test cases for the interpConfig routine
     */
    /**
     * Data provider
     *
     * @return array
     */
    static public function dataInterpConfig()
    {
        return array(
            array(
                "Info" => array(
                    "RawSetup" => "000000002500391202420039200343000002FFFFFF5001000000000000000000",
                    "DriverInfo" => "01000000000000000000",
                    "HWPartNum" => "0039-12-02-B",
                    "FWPartNum" => "0039-20-03-C",
                    "FWVersion" => "00.00.02",
                    "DeviceID" => "000025",
                    "SerialNum" => 37,
                    "DeviceGroup" => "FFFFFF",
               ),
                "Return" => array(
                    "RawSetup" => "000000002500391202420039200343000002FFFFFF5001000000000000000000",
                    "DriverInfo" => "01000000000000000000",
                    "HWPartNum" => "0039-12-02-B",
                    "FWPartNum" => "0039-20-03-C",
                    "FWVersion" => "00.00.02",
                    "DeviceID" => "000025",
                    "SerialNum" => 37,
                    "DeviceGroup" => "FFFFFF",
                    "HWName" => "0039-12 Endpoint",
                    "NumSensors" => 9,
                    "Function" => "Temperature Sensor",
                    "TimeConstant" => 1,
                    "DriverInfo" => "01000000000000000000",
                    "Types" => array(0, 0, 0, 0, 0, 0, 0, 0, 0),
                    "Labels" => array("Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature"),
                    "Units" => array("&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C"),
                    "params" => array(
                    "sensorType" => array("BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640"),
                   ),
                    "unitType" => array("Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature"),
                    "dType" => array("raw", "raw", "raw", "raw", "raw", "raw", "raw", "raw", "raw"),
                    "doTotal" => array(false, false, false, false, false, false, false, false, false),

               ),
           ),
        );
    }
    /**
     * Data provider
     *
     * @return array
     */
    static public function dataInterpSensors()
    {
        return array(
            array(
                "Info" => array(
                    "RawSetup" => "000000002500391202420039200343000002FFFFFF5001000000000000000000",
                    "DriverInfo" => "01000000000000000000",
                    "HWPartNum" => "0039-12-02-B",
                    "FWPartNum" => "0039-20-03-C",
                    "FWVersion" => "00.00.02",
                    "DeviceID" => "000025",
                    "SerialNum" => 37,
                    "ActiveSensors" => 9,
                    "Driver" => "e00391200",
                    "DeviceKey" => 5,
                    "DeviceGroup" => "FFFFFF",
                    "HWName" => "0039-12 Endpoint",
                    "NumSensors" => 9,
                    "Function" => "Temperature Sensor",
                    "TimeConstant" => 1,
                    "DriverInfo" => "01000000000000000000",
                    "Types" => array(0, 0, 0, 0, 0, 0, 0, 0, 0),
                    "Labels" => array("Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature"),
                    "Units" => array("&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C", "&#176;C"),
                    "params" => array(
                        "sensorType" => array("BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640", "BCTherm2322640"),
                   ),
                    "unitType" => array("Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature", "Temperature"),
                    "dType" => array("raw", "raw", "raw", "raw", "raw", "raw", "raw", "raw", "raw"),
                    "doTotal" => array(false, false, false, false, false, false, false, false, false),
               ),
                "Packets" => array(
                    array(
                        "RawData" => "fa0001001800ce1f00c51f00c61f0006180000f600b6ff00bfff00bfff007fff",
                        "sendCommand" => "55",
                        "Date" => "2007-02-23 22:38:01",
                   ),
                    array(
                        "RawData" => "020001001800c41f00c01f00c21f0003180000f600b7ff00c0ff00c0ff0080ff",
                        "sendCommand" => "55",
                        "Date" => "2007-02-23 22:48:01",
                   ),
               ),
                "Return" => array(
                    array(
                        "RawData" => "fa0001001800ce1f00c51f00c61f0006180000f600b6ff00bfff00bfff007fff",
                        "sendCommand" => "55",
                        "Date" => "2007-02-23 22:38:01",
                        "Data" => array(250, 0, 1, 0, 24, 0, 206, 31, 0, 197, 31, 0, 198, 31, 0, 6, 24, 0, 0, 246, 0, 182, 255, 0, 191, 255, 0, 191, 255, 0, 127, 255),
                        "NumSensors" => 9,
                        "ActiveSensors" => 9,
                        "Driver" => "e00391200",
                        "DeviceKey" => 5,
                        "Types" => array(0, 0, 0, 0, 0, 0, 0, 0, 0),
                        "DataIndex" => 250,
                        "TimeConstant" => 1,
                        "raw" => array(6144, 8142, 8133, 8134, 6150, 62976, 65462, 65471, 65471),
                        "Data0" => 24.2029,
                        "data" => array(24.2029, 17.17, 17.1976, 17.1945, 24.1786, null, null, null, null),
                        "Data1" => 17.17,
                        "Data2" => 17.1976,
                        "Data3" => 17.1945,
                        "Data4" => 24.1786,
                        "Data5" => null,
                        "Data6" => null,
                        "Data7" => null,
                        "Data8" => null,
                        "deltaT" => 0,
                        "Status" => "GOOD",
                        "StatusOld" => "GOOD",
                   ),
                    array(
                        "RawData" => "020001001800c41f00c01f00c21f0003180000f600b7ff00c0ff00c0ff0080ff",
                        "sendCommand" => "55",
                        "Date" => "2007-02-23 22:48:01",
                        "Data" => array(2, 0, 1, 0, 24, 0, 196, 31, 0, 192, 31, 0, 194, 31, 0, 3, 24, 0, 0, 246, 0, 183, 255, 0, 192, 255, 0, 192, 255, 0, 128, 255),
                        "NumSensors" => 9,
                         "ActiveSensors" => 9,
                         "Driver" => "e00391200",
                        "DeviceKey" => 5,
                        "Types" => array(0, 0, 0, 0, 0, 0, 0, 0, 0),
                        "DataIndex" => 2,
                        "TimeConstant" => 1,
                        "raw" => array(6144, 8132, 8128, 8130, 6147, 62976, 65463, 65472, 65472),
                        "Data0" => 24.2029,
                        "data" => array(24.2029, 17.2006, 17.2129, 17.2068, 24.1906, null, null, null, null),
                        "Data1" => 17.2006,
                        "Data2" => 17.2129,
                        "Data3" => 17.2068,
                        "Data4" => 24.1906,
                        "Data5" => null,
                        "Data6" => null,
                        "Data7" => null,
                        "Data8" => null,
                        "deltaT" => 0,
                        "Status" => "GOOD",
                        "StatusOld" => "GOOD",
                   ),
               ),
           ),
        );
    }
    /**
     * Runs the test methods of this class.
     *
     * @return null
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("e00391200Test");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataDevicesFirmware()
    {
        return parent::devicesArrayDataSource("e00391200", "fw");
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataDevicesHardware()
    {
        return parent::devicesArrayDataSource("e00391200", "hw");
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataDevicesVersion()
    {
        return parent::devicesArrayDataSource("e00391200", "ver");
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataConfigArray()
    {
        return parent::dataConfigArray("e00391200");
    }
    /**
     * data provider for test readConfig
     *
     * @return array
     */
    public static function datareadConfig()
    {
        return array(
            array(
                array("DeviceID" => "000025"),
                array(
                    array("To" => "000025", "Command" => "5C"),
               ),
           ),
        );
    }
}

?>
