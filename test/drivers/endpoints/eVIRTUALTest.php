<?php
/**
 * Tests the 00392800 endpoint class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2009 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Drivers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */

require_once dirname(__FILE__).'/../endpointTestBase.php';
require_once dirname(__FILE__).'/../../../drivers/endpoints/eVIRTUAL.php';

/**
 * Test class for endpoints.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:06:08.
 *
 * @category   Devices
 * @package    HUGnetLibTest
 * @subpackage Drivers
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class EVIRTUALTest extends EndpointTestBase
{
    public $class = "eVIRTUAL";
    /**
     *  Test cases for the interpConfig routine
     */
    /**
     * Data provider
     *
     * @return array
     */
    static public function dataInterpConfig()
    {
        return array(
             array(
                 "Info" => array(
                     "HWPartNum" => "VIRTUAL",
                     "FWPartNum" => "VIRTUAL",
                     "FWVersion" => "VIRTUAL",
                     "DeviceID" => "0000E8",
                     "SerialNum" => 232,
                     "Driver" => "eVIRTUAL",
                     "DeviceGroup" => "FFFFFF",
                     "ActiveSensors" => 2,
                ),
                 "Return" => array(
                     "HWPartNum" => "VIRTUAL",
                     "FWPartNum" => "VIRTUAL",
                     "FWVersion" => "VIRTUAL",
                     "DeviceID" => "0000E8",
                     "SerialNum" => 232,
                     "Driver" => "eVIRTUAL",
                     "DeviceGroup" => "FFFFFF",
                     "HWName" => "Virtual Endpoint",
                     "NumSensors" => 16,
                     "ActiveSensors" => 2,
                     "Function" => "Virtual",
                     "TotalSensors" => 16,
               ),
            ),
             array(
                 "Info" => array(
                     "HWPartNum" => "VIRTUAL",
                     "FWPartNum" => "VIRTUAL",
                     "FWVersion" => "VIRTUAL",
                     "DeviceID" => "0000E8",
                     "SerialNum" => 232,
                     "Driver" => "eVIRTUAL",
                     "DeviceGroup" => "FFFFFF",
                     "ActiveSensors" => 2,
                ),
                 "Return" => array(
                     "HWPartNum" => "VIRTUAL",
                     "FWPartNum" => "VIRTUAL",
                     "FWVersion" => "VIRTUAL",
                     "DeviceID" => "0000E8",
                     "SerialNum" => 232,
                     "Driver" => "eVIRTUAL",
                     "DeviceGroup" => "FFFFFF",
                     "HWName" => "Virtual Endpoint",
                     "NumSensors" => 16,
                     "Function" => "Virtual",
                     "ActiveSensors" => 2,
                     "TotalSensors" => 16,
                ),
            ),
        );
    }
    /**
     * Data provider
     *
     * @return array
     */
    static public function dataInterpSensors()
    {
        return array(
        );
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataDevicesFirmware()
    {
        return parent::devicesArrayDataSource("eVIRTUAL", "fw");
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataDevicesHardware()
    {
        return parent::devicesArrayDataSource("eVIRTUAL", "hw");
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataDevicesVersion()
    {
        return parent::devicesArrayDataSource("eVIRTUAL", "ver");
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function dataConfigArray()
    {
        return parent::dataConfigArray("eVIRTUAL");
    }

    /**
     * data provider for test readConfig
     *
     * @return array
     */
    public static function datareadConfig()
    {
        return array(
        );
    }
    /**
     * data provider
     *
     * @return array
     */
    public static function datacheckRecord()
    {
        return array(
            array(array(), array("Status" => "GOOD"), array("Status" => 'GOOD')),
        );
    }

    /**
     * data provider
     *
     * @return array
     */
    function testInterpSensors()
    {
        $ret = $this->o->interpSensors(array(), array());
        $this->assertSame(array(), $ret);
    }

    /**
     * data provider
     *
     * @return array
     */
    function testReadConfig()
    {
        $ret = $this->o->readConfig(array(), array());
        $this->assertSame(array(), $ret);
    }

}

?>
