<?php
/**
 *   Tests the 00391201 endpoint class
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$
 *
 */

// Call e00391201Test::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "00391201Test::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../endpointTestBase.php';

/**
 * Test class for endpoints.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:06:08.
 */
class e00391201Test extends endpointTestBase {
    public $class = "e00391201";
    /**
     *  Test cases for the InterpConfig routine
     */
    var $InterpConfigTestCases = array(
        array(
            "Info" => array(
                "RawSetup" => "000000004E00391202420039200443000004FFFFFF50E48081828330405060",
                "HWPartNum" => "0039-12-02-B",
                "FWPartNum" => "0039-20-04-C",
                "FWVersion" => "00.00.04",
                "DeviceID" => "00004E",
                "SerialNum" => 78,
                "DeviceGroup" => "FFFFFF",
            ),
            "Return" => array(  
                "RawSetup" => "000000004E00391202420039200443000004FFFFFF50E48081828330405060",
                "HWPartNum" => "0039-12-02-B",
                "FWPartNum" => "0039-20-04-C",
                "FWVersion" => "00.00.04",
                "DeviceID" => "00004E",
                "SerialNum" => 78,
                "DeviceGroup" => "FFFFFF",
                "HWName" => "0039-12 Endpoint",
                "NumSensors" => 9,
                "Function" => "Fan Controller",
                "DriverInfo" => "E48081828330405060",
                "ActiveSensors" => 9,
                "Setup" => 228,
                "FET0Mode" => 0,
                "FET0pMode" => "Digital",
                "FET1Mode" => 1,
                "FET1pMode" => "Analog - High Z",
                "FET2Mode" => 2,
                "FET2pMode" => "Analog - Voltage",
                "FET3Mode" => 3,
                "FET3pMode" => "Analog - Current",
                "FET0" => 128,
                "FET1" => 129,
                "FET2" => 130,
                "FET3" => 131,
                "FET0Mult" => 48,
                "FET1Mult" => 64,
                "FET2Mult" => 80,
                "FET3Mult" => 96,
                "Types" => array(80, 64, 80, 64, 80, 64, 80, 64, 64),
             ),
         ),
     );
     var $InterpSensorsTestCases = array(
        array(
            "Info" => array(
                "DeviceKey" => 46,
                "RawSetup" => "000000004E00391202420039200443000004FFFFFF50E48081828330405060",
                "HWPartNum" => "0039-12-02-B",
                "FWPartNum" => "0039-20-04-C",
                "FWVersion" => "00.00.04",
                "DeviceID" => "00004E",
                "SerialNum" => 78,
                "DeviceGroup" => "FFFFFF",
                "HWName" => "0039-12 Endpoint",
                "NumSensors" => 9,
                "Function" => "Fan Controller",
                "DriverInfo" => "E48081828330405060",
                "ActiveSensors" => 9,
                "Setup" => 228,
                "FET0Mode" => 0,
                "FET0pMode" => "Digital",
                "FET1Mode" => 1,
                "FET1pMode" => "Analog - High Z",
                "FET2Mode" => 2,
                "FET2pMode" => "Analog - Voltage",
                "FET3Mode" => 3,
                "FET3pMode" => "Analog - Current",
                "FET0" => 128,
                "FET1" => 129,
                "FET2" => 130,
                "FET3" => 131,
                "FET0Mult" => 48,
                "FET1Mult" => 64,
                "FET2Mult" => 80,
                "FET3Mult" => 96,
                "Types" => array(80, 64, 80, 64, 80, 64, 80, 64, 64),
            ),
            "Packets" => array(
                array(
                    "RawData" => "078511bb00cb11b3006711c6004210ac00fc4d",
                    "sendCommand" => "55",
                    "Date" => "2007-02-23 22:38:01",
                ),
                array(
                    "RawData" => "4b9d11bc008311bb006111bf003810a200004e",
                    "sendCommand" => "55",
                    "Date" => "2007-02-23 22:48:01",
                ),
            ),
            "Return" => array(
                array(
                    "RawData" => "078511bb00cb11b3006711c6004210ac00fc4d",
                    "sendCommand" => "55",
                    "Date" => "2007-02-23 22:38:01",
                    "Data" => array(7, 133, 17, 187, 0, 203, 17, 179, 0, 103, 17, 198, 0, 66, 16, 172, 0, 252, 77),
                    "NumSensors" => 9,
                    "ActiveSensors" => 9,
                    "Driver" => NULL,
                    "DeviceKey" => 46,
                    "Types" => array(80, 64, 80, 64, 80, 64, 80, 64, 64),
                    "DataIndex" => 7,
                    "TimeConstant" => 1,
                    "raw" => array(4485, 187, 4555, 179, 4455, 198, 4162, 172, 19964),
                    "Data0" => 685.0,
                    "data" => array(685.0, 24.1654, 695.7, 24.1752, 680.4, 24.152, 635.7, 24.1837, 24.3939),
                    "Data1" => 24.1654,
                    "Data2" => 695.7,
                    "Data3" => 24.1752,
                    "Data4" => 680.4,
                    "Data5" => 24.152,
                    "Data6" => 635.7,
                    "Data7" => 24.1837,
                    "Data8" => 24.3939,
                    "deltaT" => 0,
                    "Status" => "GOOD",
                    "StatusOld" => "GOOD",
                ),
                array(
                    "RawData" => "4b9d11bc008311bb006111bf003810a200004e",
                    "sendCommand" => "55",
                    "Date" => "2007-02-23 22:48:01",
                    "Data" => array(75, 157, 17, 188, 0, 131, 17, 187, 0, 97, 17, 191, 0, 56, 16, 162, 0, 0, 78),
                    "NumSensors" => 9,
                    "ActiveSensors" => 9,
                    "Driver" => NULL,
                    "DeviceKey" => 46,
                    "Types" => array(80, 64, 80, 64, 80, 64, 80, 64, 64),
                    "DataIndex" => 75,
                    "TimeConstant" => 1,
                    "raw" => array(4509, 188, 4483, 187, 4449, 191, 4152, 162, 19968),
                    "Data0" => 688.7,
                    "data" => array(688.7, 24.1691, 684.7, 24.1703, 679.5, 24.1654, 634.2, 24.2009, 24.3988),
                    "Data1" => 24.1691,
                    "Data2" => 684.7,
                    "Data3" => 24.1703,
                    "Data4" => 679.5,
                    "Data5" => 24.1654,
                    "Data6" => 634.2,
                    "Data7" => 24.2009,
                    "Data8" => 24.3988,
                    "deltaT" => 0,
                    "Status" => "GOOD",
                    "StatusOld" => "GOOD",
                ),
            ),
        ),
    );
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("e00391201Test");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

}

// Call e00391201Test::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "e00391201Test::main") {
    e00391201Test::main();
}
?>
