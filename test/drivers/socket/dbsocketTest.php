<?php
/**
 * Tests the epsocket class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2009 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Database
 * @package    HUGnetLibTest
 * @subpackage Socket
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */


/** The test case class */
require_once "PHPUnit/Framework/TestCase.php";
/** The test suite class */
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../../../drivers/socket/dbsocket.php';

/**
 * Test class for epsocket.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:48:38.
 *
 * @category   Database
 * @package    HUGnetLibTest
 * @subpackage Socket
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class DbSocketTest extends PHPUnit_Framework_TestCase
{

    protected $table = "PacketSend";
    /**
    * Runs the test methods of this class.
    *
    * @return null
    *
    * @access public
    * @static
    */
    public static function main()
    {
        include_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("dbsocketTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function setUp()
    {
        parent::setUp();
        if (!empty($this->id)) {
            $this->config["id"] = $this->id;
        }
        if (!empty($this->table)) {
            $this->config["table"] = $this->table;
        }
        $this->config["file"]        = ":memory:";
        $this->config["socketTable"] = $this->table;
        $this->config["servers"][0]  = array(
            'driver' => 'sqlite',
            'host'   => 'localhost',
            'user'   => '',
            'pass'   => '',
        );
        HUGnetDB::setConfig($this->config);

        $this->plog = &HUGnetDB::getInstance("Plog");
        $this->plog->createTable($this->table);

        $this->pdo =& $this->readAttribute($this->plog, "db");
        $this->pdo->query($query);
        $this->o = new dbsocket(); //new dbsocket($this->pdo);
    }

    /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @return null
    *
    * @access protected
    */
    protected function tearDown()
    {
        $this->o->Close();
        unset($this->o);
        //        unset($this->oBadDB);
    }

    /**
    * data provider for testWrite
    *
    * @return array
    */
    public static function dataWrite()
    {
        return array(
            array(
                "pkt" => array(
                    "PacketTo" => "ABCDE",
                    "sendCommand" => "5C",
                    "Date" => "2007-11-23 05:02:01",
                    "GatewayKey" => 1,
                    "DeviceKey" => 5,
                    "Type" => "OUTGOING",
                    "RawData" => "01020304",
                    "sentRawData" => "01020304",
               ),
                "expect" => array(
                    "DeviceKey" => 5,
                    "GatewayKey" => 1,
                    "Date" => "2007-11-23 05:02:01",
                    "Command" => "",
                    "sendCommand" => "5C",
                    "PacketFrom" => "",
                    "PacketTo" => "ABCDE",
                    "RawData" => "01020304",
                    "sentRawData" => "01020304",
                    "Type" => "OUTGOING",
                    "Status" => "NEW",
                    "ReplyTime" => 0,
                    "Checked" => 0,
               ),
           ),

        );
    }

    /**
    * test
    *
    * @param array $pkt    The packet to test with
    * @param array $expect What we expect returned
    *
    * @return null
    *
    * @dataProvider dataWrite
    */
    public function testWrite($pkt, $expect)
    {
        /*
        $id = $this->o->Write($pkt);
        $query = "SELECT * FROM ".$this->table." WHERE id=".$id;
        $ret = $this->pdo->query($query);
        $res = $ret->fetchAll(PDO::FETCH_ASSOC);
        $res = $res[0];
        if (is_array($res)) {
            foreach ($res as $key => $rec) {
                if (is_numeric($key)) unset($res[$key]);
            }
        }
        unset($res["id"]);
        $this->assertEquals($expect, $res);
        */
    }

    /**
    * data provider for testWriteBadDB()
    *
    * @return array
    */
    public static function dataWriteBadDB()
    {
        return array(
            array(
                "str" => "",
                "pkt" => array(
                    "PacketTo" => "ABCDE",
                    "sendCommand" => "5C",
                    "Date" => "2007-11-23 05:02:01",
                    "GatewayKey" => 1,
                    "DeviceKey" => 5,
                    "Type" => "OUTGOING",
                    "RawData" => "01020304",
                    "sentRawData" => "01020304",
               ),
                "expect" => false,
           ),
        );
    }
    /**
    * test
    *
    * @param string $str    The packet string to send
    * @param array  $pkt    The packet to test with
    * @param array  $expect What we expect returned
    *
    * @return null
    *
    * @dataProvider dataWriteBadDB
    */
    public function testWriteBadDB($str, $pkt, $expect)
    {
        //        $id = $this->oBadDB->Write($str, $pkt);
        //        $this->assertEquals($expect, $id);
    }


    /**
    * test
    *
    * @return null
    *
    * @todo Implement testClose().
    */
    public function testClose()
    {
        $this->o->Close();
        $this->assertSame(false, $this->o->socket);
    }

    /**
    * test
    *
    * @return null
    *
    * @todo Implement testCheckConnect().
    */
    public function testCheckConnect()
    {
        $ret = $this->o->CheckConnect();
        $this->assertTrue($ret);
    }

    /**
    * test
    *
    * @return null
    *
    * @todo Implement testConnect().
    */
    public function testConnect()
    {
        $ret = $this->o->Connect();
        $this->assertTrue($ret);
    }

    /**
    * test
    *
    * @return null
    *
    * @todo Implement testConnect().
    */
    public function testConnectBadDB()
    {
        //        $ret = $this->oBadDB->Connect();
        //        $this->assertFalse($ret);
    }
}

?>
