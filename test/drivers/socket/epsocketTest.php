<?php
/**
 * Tests the epsocket class
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Socket
 * @package    HUGnetLibTest
 * @subpackage Socket
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
if (!defined("HUGNET_INCLUDE_PATH")) {
    define("HUGNET_INCLUDE_PATH", dirname(__FILE__)."/../../..");
}

require_once dirname(__FILE__).'/../../../drivers/socket/epsocket.php';

/**
 * Test class for epsocket.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:48:38.
 *
 * @category   Socket
 * @package    HUGnetLibTest
 * @subpackage Socket
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class EpsocketTest extends PHPUnit_Framework_TestCase
{
    /** @var int The TCP port number for the test */
    protected $port = 35000;
    /** @var string the host running the tcp server */
    protected $host = "127.0.0.1";
    /** @var array the descriptor stack */
    protected $descriptorspec = array(
        0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
        1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
    );

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->proc = proc_open(
            "php ".dirname(__FILE__)."/epsocketTestScript.php",
            $this->descriptorspec,
            $this->pipes
        );
        $config = array(
            "GatewayIP"   => $this->host,
            "GatewayPort" => $this->port,
        );
        $this->s    = new epsocket($config);
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
        fwrite($this->pipes[0], "quit\r\n");
        fflush($this->pipes[0]);
        fclose($this->pipes[0]);
        fclose($this->pipes[1]);
        proc_terminate($this->proc);
        proc_close($this->proc);
        $this->s->Close();
        unset($this->s);
    }

    /**
     * gets a TCP string
     *
     * @return string
     */
    private function _getstring()
    {

    }

    /**
     * Test the write function
     *
     * @return null
     *
     * @todo Implement testWrite().
     */
    public function testWrite()
    {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete("This test has not been implemented yet.");
    }

    /**
     * Test the epsocket::readChar function
     *
     * @return null
     *
     * @todo Implement testReadChar().
     */
    public function testReadChar()
    {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete("This test has not been implemented yet.");
    }


    /**
     * Test the write function
     *
     * @return null
     *
     * @todo Implement testClose().
     */
    public function testClose()
    {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete("This test has not been implemented yet.");
    }

    /**
     * Test the write function
     *
     * @return null
     *
     * @todo Implement testCheckConnect().
     */
    public function testCheckConnect()
    {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete("This test has not been implemented yet.");
    }

    /**
     * Test the write function
     *
     * @return null
     *
     * @todo Implement testConnect().
     */
    public function testConnect()
    {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete("This test has not been implemented yet.");
    }

}

?>
