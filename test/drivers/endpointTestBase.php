<?php
/**
 *   This is the basis for all endpoint driver test classes.
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$
 *
 */

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../driverTest.php';
require_once dirname(__FILE__).'/../EPacketTest.php';
require_once dirname(__FILE__).'/../unitConversionTest.php';

/**
 * Test class for endpoints.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:06:08.
 */
abstract class endpointTestBase extends PHPUnit_Framework_TestCase {

    var $goodEndpoints = array(
        array(
            "DeviceID" => "123456",
            "DeviceName" => "Test 1",
        ),
    );
    
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("endpointTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     *
     */
    function &setupDriver($preloadPackets=NULL) {
        $o = driverTest::createDriver();
        if (is_object($o->drivers[$this->class])) {
            $o->packet->socket[1] = new epsocketMock;
            if (is_array($preloadPackets)) {
                foreach($preloadPackets as $data => $reply) {
                    $o->packet->socket[1]->setReply($data, $reply);
                }
            }
            $o->packet->ReplyTimeout=1;  // The reply timeout can be short becuase we should get an instant reply.
//            $o->packet->verbose=TRUE;
            return $o;
        } else {
            return FALSE;
        }
    }
    /**
     *
     */
    function testDriver() {
        $o = $this->setupDriver();
        $this->assertType("object", $o->drivers[$this->class], "This class '".$this->class."' did not register as a plugin");
    }

    /**
     *  A subclass should call this routine in the dataDevicesArray function
     * parent::devicesCheckVersion($class)
     */
    public static function devicesArrayDataSource($class, $var) {
        $o = driverTest::createDriver();
        $return = array();
        foreach($o->drivers[$class]->devices as $fw => $Firm) {
            if ($var == "fw") {
                $return[] = array($fw, $Firm);
            } else {
                foreach($Firm as $hw => $ver) {
                    if ($var == "hw") {
                        $return[] = array($fw, $hw, $ver);
                    } else {
                        $dev = explode(",", $ver);
                        foreach($dev as $v) {
                            $return[] = array($fw, $hw, $v);
                        }
                    }
                }
            }
            
        }
        return $return;
    }



    /**
     * data provider for testDevicesArray
     */    
    public static function dataDevicesVersion() {
        return array();
    }
    /**
     * @dataProvider dataDevicesVersion
     */
    function testDevicesArrayVersion($fw, $hw, $version) {
        $this->checkVersion($version);
    }
    /**
     * data provider for testDevicesArray
     */    
    public static function dataDevicesFirmware() {
        return array();
    }
    /**
     * @dataProvider dataDevicesFirmware
     */
    function testDevicesArrayFirmware($fw, $Firm) {
        $this->checkPartNum($fw);
        $this->assertType("array", $Firm);
    }
    /**
     * data provider for testDevicesArray
     */    
    public static function dataDevicesHardware() {
        return array();
    }
    /**
     * @dataProvider dataDevicesHardware
     */
    function testDevicesArrayHardware($fw, $hw, $Ver) {
        $this->checkPartNum($hw);
        $this->assertType("string", $Ver);
    }
    /**
     *
     */
    function testConfigDefault() {
        $o = $this->setupDriver();
        $d = &$o->drivers[$this->class];
        $this->assertType("array", $d->config['DEFAULT'], "Driver '".$this->class."' has no DEFAULT config");
    }
    
    /**
     *
     */
    function testHWName() {
        $o = $this->setupDriver();
        $d = &$o->drivers[$this->class];
        $this->assertType("string", $d->HWName, "Driver '".$this->class."' has no HWName attribute");
        $this->assertThat(strlen($d->HWName), $this->greaterThan(0), "Driver '".$this->class."' has blank HWName");

    }
    /**
     *
     */
    function testAverageTable() {
        $o = $this->setupDriver();
        $d = &$o->drivers[$this->class];
        $this->assertType("string", $d->average_table, "Driver '".$this->class."' has no HWName attribute");
        $this->assertThat(strlen($d->average_table), $this->greaterThan(0), "Driver '".$this->class."' has blank HWName");
    }
    /**
     *
     */
    function testHistoryTable() {
        $o = $this->setupDriver();
        $d = &$o->drivers[$this->class];
        $this->assertType("string", $d->history_table, "Driver '".$this->class."' has no HWName attribute");
        $this->assertThat(strlen($d->history_table), $this->greaterThan(0), "Driver '".$this->class."' has blank HWName");
    }
    /**
     *
     */
    function testAtoDMax() {
        $o = $this->setupDriver();
        $d = &$o->drivers[$this->class];
        $this->assertType("int", $d->AtoDMax, "Driver '".$this->class."': AtoDMax must be an integer.");                
    }

    /**
     * Check to make sure the part number is in the correct format
     */
    private function checkPartNum($part) {
        if ($part == "DEFAULT") return TRUE;
        $p = explode("-", $part);
        $this->assertEquals(count($p), 4, "'$part' is not in XXXX-XX-XX-X format");
        $this->assertEquals(strlen($p[0]), 4, "'".$p[0]."' is not 4 characters");
        $this->assertType("numeric", $p[0], "'".$p[0]."' is not a number");
        $this->assertEquals(strlen($p[1]), 2, "'".$p[1]."' is not 2 characters");
        $this->assertType("numeric", $p[1], "'".$p[1]."' is not a number");
        $this->assertEquals(strlen($p[2]), 2, "'".$p[2]."' is not 2 characters");
        $this->assertType("numeric", $p[2], "'".$p[2]."' is not a number");
        $this->assertEquals(strlen($p[3]), 1, "'".$p[3]."' is not 1 character");
        $this->assertNotType("numeric", $p[3], "'".$p[2]."' can not be a number");
        
        return TRUE;
    }
    /**
     *
     */    
    private function checkVersion($ver) {
        if ($ver == "DEFAULT") return TRUE;
        if ($ver == "BAD") return TRUE;
        $v = explode(".", $ver);
        $this->assertEquals(count($v), 3, "'$ver' is not in X.Y.Z format");
        $this->assertType("numeric", $v[0], "'".$v[0]."' is not a number in '$ver'");
        $this->assertType("numeric", $v[1], "'".$v[1]."' is not a number in '$ver'");
        $this->assertType("numeric", $v[2], "'".$v[2]."' is not a number in '$ver'");
        foreach($v as $val) {
            $this->assertThat($val, $this->greaterThanOrEqual(0));
            $this->assertThat($val, $this->lessThanOrEqual(255));
        }        
    }

    /**
     * data provider for dataConfigArray* functions
     */
    public static function dataConfigArray($class=NULL) {
        if (empty($class)) return array();
        $o = driverTest::createDriver();
        $return = array();
        foreach($o->drivers[$class]->config as $fw => $params) {
            $return[] = array($class, $fw, $params);
        }
        return $return;
    }
    
    /**
     * @dataProvider dataConfigArray
     */
    function testConfigArray($class, $fw, $params) {
        $o = $this->setupDriver();
        $this->checkPartNum($fw);
        $this->assertType("array", $params, "'$fw':Parameters are not an array");
        $this->assertType("array", $o->drivers[$this->class]->devices[$fw], "'$fw' not found in devices array");
    }
    
    /**
     * @dataProvider dataConfigArray
     */
    function testConfigArrayFunction($class, $fw, $params) {
        $this->assertType("string", $params["Function"], "'$fw': Parameter 'Function' must be a string");
    }
    
    /**
     * @dataProvider dataConfigArray
     *
     */
    function testConfigArraySensors($class, $fw, $params) {
        $this->assertType("int", $params["Sensors"], "'$fw': Parameter 'Sensors' must be a int");
        $this->assertThat($params["Sensors"], $this->greaterThanOrEqual(0), "'$fw': The number of sensors must be greater than 0");
    }
    /**
     * @dataProvider dataConfigArray
     *
     */
    function testConfigArrayDisplayOrder($class, $fw, $params) {
        // This is not required so we only check it if it is present
        if (isset($params['DisplayOrder'])) {
            $this->assertType("string", $params["DisplayOrder"], "'$fw': Parameter 'DisplayOrder' must be a int");
            $do = explode(",", $params['DisplayOrder']);
            $this->assertEquals(count($do), $params["Sensors"], "'$fw': Number of display items needs to be identical to the number of sensors.");
            $doTmp = array();
            foreach($do as $order) {
                $this->assertThat($order, $this->lessThan($params["Sensors"]), "'$fw': Display order items must be less than the number of sensors.");
                $this->assertThat($order, $this->greaterThanOrEqual(0), "'$fw': Display order items must be greater than or equal to 0");
                $this->assertFalse(isset($doTmp[$order]), "'$fw': $order already duplicated!  All entries in display order must be unique");
                $doTmp[$order] = TRUE;
            }
        }
    }
    /**
     * @dataProvider dataConfigArray
     *
     */
    function testConfigArrayBad($class, $fw, $params) {
        $this->assertFalse(isset($params["SensorLength"]), "'$fw': Parameter 'SensorLength' is not used anymore and should be removed.");
    }
    /**
     * Test the read sensors routine
     * @todo implement testReadSensors()
     */
    function testReadSensors() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testsaveSensorData()
     */
    function testsaveSensorData() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testupdateConfig()
     */
    function testupdateConfig() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     *
     */
    public static function dataCheckRecord() {
        return array(
            array(array(), array("Status" => "GOOD"), array("Status" => 'BAD', "StatusOld" => "GOOD"), 1),
            array(
                array(),
                array("sendCommand" => PACKET_COMMAND_GETDATA, "RawData" => "00010203", "Data0" => NULL, "Data1" => NULL, "Data2" => NULL, "Data3" => NULL, "Data4" => NULL, "NumSensors" => 5),
                array("sendCommand" => PACKET_COMMAND_GETDATA, "RawData" => "00010203", "Data0" => NULL, "Data1" => NULL, "Data2" => NULL, "Data3" => NULL, "Data4" => NULL, "NumSensors" => 5, "Status" => "BAD", "StatusCode" => "All Bad"),
                2,
            ),
            array(
                array(),
                array("sendCommand" => PACKET_COMMAND_GETDATA, "RawData" => "00010203", "Data0" => 1, "NumSensors" => 1),
                array("sendCommand" => PACKET_COMMAND_GETDATA, "RawData" => "00010203", "Data0" => 1, "NumSensors" => 1, "Status" => "BAD", "StatusCode" => "Bad TC"),
                3,
            ),
        );
    }

    /**
     * @dataProvider dataCheckRecord()
     */
    function testCheckRecord($Info, $Rec, $expect) {
        $o = $this->setupDriver();
        if (is_object($o)) {
            $o->drivers[$this->class]->checkRecord($Info, $Rec);
            $this->assertSame($expect, $Rec);
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }


    /**
     * @todo implement testReadMem()
     */
    function testReadMem() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    /**
     * @todo implement testGetConfigVars()
     */
    function testGetConfigVars() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    /**
     * data provider for testReadConfig
     */
    public static function dataReadConfig() {
        return array(
            array(
                array(
                    "5A5A5A5C0000250000200059" => "5A5A5A0100002000002520000000002500391202420039200343000002FFFFFF50010000000000000000009F",
                    "5A5A5A4C0000250000200049" => "5A5A5AFF00002000002500FA",
                ),
                array("DeviceID" => "000025", "GatewayKey" => 1),
                array(
                    "GetReply" => TRUE,
                    "SentFrom" => "000020",
                    "SentTo" => "000025",
                    "sendCommand" => "5C",
                    "group" => FALSE,
                    "packet" => array(
                        "to" => "000025",
                        "command" => "5C",
                        "data" => "",
                    ),
                    "PacketTo" => "000025",
                    "GatewayKey" => 1,
                    "DeviceKey" => NULL,
                    "Type" => "OUTGOING",
                    "RawData" => "000000002500391202420039200343000002FFFFFF5001000000000000000000",
                    "sentRawData" => "",
                    "Parts" => 1,
                    "Command" => "01",
                    "To" => "000020",
                    "From" => "000025",
                    "Length" => 32,
                    "Checksum" => "9F",
                    "CalcChecksum" => "9F",
                    "Socket" => 1,
                    "Reply" => TRUE,
                    "toMe" => TRUE,
                    "isGateway" => FALSE,
                    "Data" => array(
                        0 => 0,
                        1 => 0,
                        2 => 0,
                        3 => 0,
                        4 => 37,
                        5 => 0,
                        6 => 57,
                        7 => 18,
                        8 => 2,
                        9 => 66,
                        10 => 0,
                        11 => 57,
                        12 => 32,
                        13 => 3,
                        14 => 67,
                        15 => 0,
                        16 => 0,
                        17 => 2,
                        18 => 255,
                        19 => 255,
                        20 => 255,
                        21 => 80,
                        22 => 1,
                        23 => 0,
                        24 => 0,
                        25 => 0,
                        26 => 0,
                        27 => 0,
                        28 => 0,
                        29 => 0,
                        30 => 0,
                        31 => 0,
                    ),
                    "RawPacket" => "0100002000002520000000002500391202420039200343000002FFFFFF50010000000000000000009F"
                ),
                1,
            ),
        );
    }
    /**
     * @dataProvider dataReadConfig()
     */
    function testReadConfig($preloadPackets, $Info, $expect) {
        $o = $this->setupDriver($preloadPackets);
        if (is_object($o)) {
            $ret = $o->drivers[$this->class]->ReadConfig($Info);
            $ret = $ret[0];
            unset($ret["pktTimeout"]);
            unset($ret["SentTime"]);
            unset($ret["Date"]);
            unset($ret["Time"]);
            unset($ret["ReplyTime"]);
            $this->assertSame($expect, $ret);
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
        
    /**
     * @todo implement testUnsolicited()
     */
    function testUnsolicited() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    /**
     */
    function testInterpConfig() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            if (is_array($this->InterpConfigTestCases) && (count($this->InterpConfigTestCases) > 0)) {
                foreach($this->InterpConfigTestCases as $key => $params) {
                    $ret = $o->drivers[$this->class]->InterpConfig($params["Info"]);
                    $this->checkInterpConfigReturn($ret, $params['Return']);
                }
            } else {
                $this->markTestSkipped("Skipped do to lack of driver"); 
            }
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     *
     */
    private function checkInterpConfigReturn($ret, $expected) {
        // Check the stuff we can predict
        foreach($expected as $key => $val) {
            $this->assertSame($ret[$key], $val, $this->class.": InterpConfig Failure in key $key");
        }
        // Check the stuff we can't predict (it might change witout a change in this code)
        foreach(array("Labels", "Units", "unitType", "dType", "doTotal") as $type) {
            $this->assertType("array", $ret[$type], $this->class."Missing array '$type'");
            $this->assertEquals(count($ret[$type]), $ret['NumSensors'], $this->class.": $type doesn't have ".$ret['NumSensors']." elements");
        }
        for($key = 0; $key < $ret['NumSensors']; $key++) {
            foreach(array("Labels", "Units", "unitType", "dType") as $type) {
                $this->assertType("string", $ret[$type][$key], $this->class.": $type element $key is not a string");
            }
            $this->assertType("bool", $ret["doTotal"][$key], $this->class.": doTotal element $key is not a boolean");
            $this->assertType("string", $ret["params"]["sensorType"][$key], $this->class.": params[sensorType] element $key is not a string");
        }
        $this->assertType("array", $ret['params'], $this->class.': params element must be an array');
    }



    function printArray($ret) {
        if (is_array($ret)) {
            foreach($ret as $name => $val) {
                print '"'.$name.'" => ';
                endpointTestBase::printArrayVal($val);
                print ",\n";
            }
        }
    }
    
    function printArrayVal($val) {
        if (is_array($val)) {
            print "array(";
            $sep = "";
            foreach($val as $key => $v) {
                if (is_array($v)) {
                    print "\n    ";
                    if (is_string($key)) print '"'.$key.'" => ';
                    endpointTestBase::printArrayVal($v);
                    print ",\n";
                } else {
                    if (is_string($key)) {
                        print '"'.$key.'" => ';
                    } else {
                        print $sep;
                        $sep = ", ";                    
                    }
                    endpointTestBase::printArrayVal($v);
                    if (is_string($key)) print ",\n";
                }
            }                
            print ")";
        } else if (is_string($val)) {
            print '"'.$val.'"';
        } else if (is_bool($val)) {
            if ($val) {
                print "TRUE";
            } else {
                print "FALSE";
            }
        } else if (is_null($val)) {
            print "NULL";
        } else {
            print $val;
        }
    }    
    
    /**
     *
     */
    function testBadDriver() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            $this->assertFalse($o->drivers[$this->class]->BadDriver($Info, "Test"));
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }    
    
    /**
     *
     */
    function testInterpSensors() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            if (is_array($this->InterpSensorsTestCases)) {
                foreach($this->InterpSensorsTestCases as $key => $params) {
                    $ret = $o->drivers[$this->class]->InterpSensors($params["Info"], $params["Packets"]);
                    if (is_array($params["Return"])) {
                        $this->assertType("array", $ret, "Return was not an array");
                        foreach($ret as $p => $pkt) {
                            $this->checkInterpSensorsReturn($pkt, $params["Return"][$p], $p);
                        }
                    } else {
                        $this->assertSame($params["Return"], $ret);
                    }
                }
            } else {
                $this->markTestSkipped("Skipped do to lack of driver"); 
            }
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     *
     */
    private function checkInterpSensorsReturn($ret, $expected, $p) {
        $this->assertType("array", $ret, $this->class." run $p: return is not an array");
        // Check the stuff we can predict
        foreach($expected as $key => $val) {
            $this->assertSame($val, $ret[$key], $this->class." run $p: InterpSensors Failure in key $key");
        }
        if (is_array($expected["Types"])) {
            $nSensors = (isset($expected['ActiveSensors'])) ? $expected['ActiveSensors'] : $expected['NumSensors'];
            for($key = 0; $key < $nSensors; $key++) {
                foreach(array("Units", "unitType") as $type) {
                    $this->assertType("string", $ret[$type][$key], $this->class."run $p : $type element $key is not a string");
                }
            }
        } else {
            $function = "checkInterpSensorsReturn".$expected["sendCommand"];
            if (method_exists($this, $function)) {
                $this->$function($ret, $expected, $p);
            }
        }
    }


    /**
     * @todo implement testGetCols()
     */
    function testDefCols(){
        $o = $this->setupDriver();
        if (is_object($o)) {
            $Info = array();
            $cols = $o->drivers[$this->class]->defcols;
            $this->assertType("array", $cols, "Variable must be an array");
            foreach($cols as $key => $val) {
                $this->assertType("string", $key, "Array key must be an string");                
                $this->assertType("string", $val, "Array value must be an string");                
            }
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    /**
     * @todo implement testGetCols()
     */
    function testCols(){
        $o = $this->setupDriver();
        if (is_object($o)) {
            $Info = array();
            $cols = $o->drivers[$this->class]->cols;
            $this->assertType("array", $cols, "Variable must be an array");
            foreach($cols as $key => $val) {
                $this->assertFalse(isset($o->drivers[$this->class]->defcols[$key]), "Column already defined as a default in variable defcols");                
                $this->assertType("string", $key, "Array key must be an string");                
                $this->assertType("string", $val, "Array value must be an string");                
            }
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    
    /**
     * @todo implement testSetAllConfig()
     */
    function testSetAllConfig() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    /**
     * @todo implement testGetCalibration()
     */
    function testGetCalibration() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testSetConfig()
     */
    function testSetConfig() {
        $o = $this->setupDriver();    
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
}
?>
