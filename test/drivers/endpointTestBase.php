<?php
/**
 *   This is the basis for all endpoint driver test classes.
 *
 *   <pre>
 *   HUGnetLib is a library of HUGnet code
 *   Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 3
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *   </pre>
 *
 *   @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *   @package HUGnetLib
 *   @subpackage Test
 *   @copyright 2007 Hunt Utilities Group, LLC
 *   @author Scott Price <prices@hugllc.com>
 *   @version $Id$
 *
 */

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../driverTest.php';
require_once dirname(__FILE__).'/../EPacketTest.php';
require_once dirname(__FILE__).'/../unitConversionTest.php';

/**
 * Test class for endpoints.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 09:06:08.
 */
class endpointTestBase extends PHPUnit_Framework_TestCase {

    var $goodEndpoints = array(
        array(
            "DeviceID" => "123456",
            "DeviceName" => "Test 1",
        ),
    );


    function __construct() {
        $this->driver = get_class($this);
        $this->driver = str_replace("Test", "", $this->driver);
    }

    
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("endpointTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    private function &setupDriver() {
        $o = driverTest::createDriver();
        if (is_object($o->drivers[$this->driver])) {
            return $o;
        } else {
            return FALSE;
        }
    }
    function testDriver() {
        $o = $this->setupDriver();
        $this->assertTrue(is_object($o), "This class '".$this->driver."' did not register as a plugin");
    }
    /**
     * Test the read sensors routine
     * @todo implement testReadSensors()
     */
    function testReadSensors() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testsaveSensorData()
     */
    function testsaveSensorData() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testupdateConfig()
     */
    function testupdateConfig() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testcheckDataArray()
     */
    function testcheckDataArray() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testCheckRecord()
     */
    function testCheckRecord() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }


    /**
     * @todo implement testReadMem()
     */
    function testReadMem() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    /**
     * @todo implement testGetConfigVars()
     */
    function testGetConfigVars() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    
    /**
     * @todo implement testReadConfig()
     */
    function testReadConfig() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    
    /**
     * @todo implement testDecodeData()
     */
    function testDecodeData() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    /**
     * @todo implement testUnsolicited()
     */
    function testUnsolicited() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    /**
     * @todo implement testInterpConfig()
     */
    function testInterpConfig() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    /**
     */
    function testBadDriver() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            $this->assertFalse($o->drivers[$this->driver]->BadDriver($Info, "Test"));
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }    
    
    /**
     * @todo implement testInterpSensors()
     */
    function testInterpSensors() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }


    /**
     * @todo implement testGetCols()
     */
    function testGetCols(){
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testGetEditCols()
     */
    function testGetEditCols(){
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    /**
     * @todo implement testSetAllConfig()
     */
    function testSetAllConfig() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    /**
     * @todo implement testGetCalibration()
     */
    function testGetCalibration() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }

    /**
     * @todo implement testSetConfig()
     */
    function testSetConfig() {
        $o = $this->setupDriver();    
        if (is_object($o)) {
            /* Put test here */
            // Remove the following line when you implement this test.
            $this->markTestIncomplete("This test has not been implemented yet.");
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }
    
    /**
     * @todo implement testCompareFWVersion()
     */
    function testCompareFWVersion() {
        $o = $this->setupDriver();
        if (is_object($o)) {
            $this->assertEquals(0, $o->drivers[$this->driver]->CompareFWVersion("1.2.3", "1.2.3"));
            $this->assertEquals(1, $o->drivers[$this->driver]->CompareFWVersion("1.2.4", "1.2.3"));
            $this->assertEquals(1, $o->drivers[$this->driver]->CompareFWVersion("1.3.3", "1.2.3"));
            $this->assertEquals(1, $o->drivers[$this->driver]->CompareFWVersion("2.2.3", "1.2.3"));
            $this->assertEquals(-1, $o->drivers[$this->driver]->CompareFWVersion("1.2.3", "1.2.4"));
            $this->assertEquals(-1, $o->drivers[$this->driver]->CompareFWVersion("1.2.3", "1.3.3"));
            $this->assertEquals(-1, $o->drivers[$this->driver]->CompareFWVersion("1.2.3", "2.2.3"));
        } else {
            $this->markTestSkipped("Skipped do to lack of driver"); 
        }
    }        

}

?>
