<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2009 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

/** Test framework */
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../lib/plugins.inc.php';

/**
 * Test class for SensorBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2009 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class PluginsTest extends PHPUnit_Framework_TestCase
{
    /**
    * @var object The test object
    * @access protected
    */
    protected $o;

    /**
    * Runs the test methods of this class.
    *
    * @access public
    * @static
    *
    * @return null
    */
    public static function main()
    {
        include_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('PluginsTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->o = new plugins();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataRegisterFunction()
    {
        return array(
            array("name", "type", "title", "desc", null),
            array("", "type", "title", "desc", null),
            array(
                "pluginTestFunction1",
                null,
                "title",
                "desc",
                array(
                    "Functions" => array(
                        "ALL_TYPES" => array(
                            array(
                                    "Name" => "pluginTestFunction1",
                                    "Types" => null,
                                    "Title" => "title",
                                    "Description" => "desc",
                                ),
                            ),
                        ),
                    ),
                ),
            array(
                "pluginTestFunction1",
                "type",
                "title",
                "desc",
                array(
                    "Functions" => array(
                        "type" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Types" => "type",
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Name" => "pluginTestFunction1",
                    "Types" => "type",
                    "Title" => "title",
                    "Description" => "desc",
                ),
                "asdf",
                "fdsa",
                "hello there",
                array(
                    "Functions" => array(
                        "type" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Types" => "type",
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                "pluginTestFunction1",
                array("type1", "type2"),
                "title",
                "desc",
                array(
                    "Functions" => array(
                        "type1" => array(
                              array(
                                "Name" => "pluginTestFunction1",
                                "Types" => array("type1", "type2"),
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                        "type2" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Types" => array("type1", "type2"),
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param mixed  $Name   The name to test
    * @param string $Type   The type to test
    * @param string $Title  The title to test.
    * @param string $Desc   The description of the plugin.
    * @param int    $expect The expected value
    *
    * @return null
    *
    * @dataProvider dataRegisterFunction
    */
    public function testRegisterFunction($Name, $Type, $Title, $Desc, $expect)
    {
        $this->o->registerFunction($Name, $Type, $Title, $Desc);
        $this->assertSame($expect, $this->o->plugins);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataAddGeneric()
    {
        return array(
            array(
                "",
                "HTML",
                "type",
                null,
            ),
            array(
                "name",
                "HTML",
                null,
                array(
                    "Generic" => array(
                        "ALL_TYPES" => array(
                            array(
                                "Name" => "name",
                                "HTML" => "HTML",
                                "Type" => "ALL_TYPES",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                "name",
                "HTML",
                "type",
                array(
                    "Generic" => array(
                        "type" => array(
                            array(
                                "Name" => "name",
                                "HTML" => "HTML",
                                "Type" => "type",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Name" => "pluginTestFunction1",
                    "Type" => "type",
                    "Title" => "title",
                ),
                "asdf",
                "fdsa",
                array(
                    "Generic" => array(
                        "type" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Type" => "type",
                                "Title" => "title",
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param mixed  $Name   The name to test
    * @param string $HTML   The HTML to use.
    * @param string $Type   The type to test
    * @param int    $expect The expected value
    *
    * @return null
    *
    * @dataProvider dataAddGeneric
    */
    public function testAddGeneric($Name, $HTML, $Type, $expect)
    {
        $this->o->AddGeneric($Name, $HTML, $Type);
        $this->assertSame($expect, $this->o->plugins);
    }

     /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataGetGeneric()
    {
        $plugins = array(
                    "Generic" => array(
                        "type1" => array(
                            array(
                                "Name" => "name",
                                "HTML" => "HTML",
                                "Type" => "type1",
                            ),
                        ),
                        "type" => array(
                            array(
                                "Name"  => "zpluginTestFunction1",
                                "Type"  => "type",
                                "Title" => "title",
                            ),
                            array(
                                "Name" => "aname",
                                "HTML" => "HTML",
                                "Type" => "type",
                            ),
                        ),
                    ),
        );
        $plugins2 = $plugins;
        $plugins2["Generic"]["ALL_TYPES"] = array(
            array(
                "Name"    => "zName",
                "Type"    => "ALL_TYPES",
                "history" => "not relevent",
            ),
        );
        return array(
            array(
                "type",
                array("Generic" => array()),
                array(),
            ),
            array(
                "type1",
                $plugins,
                array(
                    array(
                        "Name" => "name",
                        "HTML" => "HTML",
                        "Type" => "type1",
                    ),
                ),
            ),
            array(
                "type",
                $plugins,
                array(
                    array(
                        "Name" => "zpluginTestFunction1",
                        "Type" => "type",
                        "Title" => "title",
                    ),
                    array(
                        "Name" => "aname",
                        "HTML" => "HTML",
                        "Type" => "type",
                    ),
                ),
            ),
            array(
                "type1",
                $plugins2,
                array(
                    array(
                        "Name" => "name",
                        "HTML" => "HTML",
                        "Type" => "type1",
                    ),
                    array(
                        "Name"    => "zName",
                        "Type"    => "ALL_TYPES",
                        "history" => "not relevent",
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $Type    The type to test
    * @param array  $preload The array to preload into $o->plugins
    * @param array  $expect  The expected value
    *
    * @return null
    *
    * @dataProvider dataGetGeneric
    */
    public function testGetGeneric($Type, $preload, $expect)
    {
        $preload = (array)$preload;
        $this->o->plugins = $preload;
        $stuff = $this->o->getGeneric($Type);
        $this->assertSame($expect, $stuff);
    }


}

/**
* data provider for testConstructor
*
* @return array
*/
function pluginTestFunction1($stuff)
{
    return $stuff;
}
?>
