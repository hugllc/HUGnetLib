<?php
/**
 * This runs all of the tests associated with HUGnetLib.
 *
 * PHP Version 5
 *
 * <pre>
 * HUGnetLib is a library of HUGnet code
 * Copyright (C) 2007-2010 Hunt Utilities Group, LLC
 * Copyright (C) 2009 Scott Price
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Plugins
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 *
 */

require_once dirname(__FILE__).'/../../lib/plugins.inc.php';

// Make sure the plugins for test don't get in the code coverage
PHPUnit_Util_Filter::addDirectoryToFilter(
    dirname(__FILE__).'/plugins', '.php'
);


/**
 * Test class for SensorBase.
 * Generated by PHPUnit on 2007-12-13 at 09:08:18.
 *
 * @category   Base
 * @package    HUGnetLibTest
 * @subpackage Sensors
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007-2010 Hunt Utilities Group, LLC
 * @copyright  2009 Scott Price
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:HUGnetLib
 */
class PluginsTest extends PHPUnit_Framework_TestCase
{
    /**
    * @var object The test object
    * @access protected
    */
    protected $o;

    /**
    * Runs the test methods of this class.
    *
    * @access public
    * @static
    *
    * @return null
    */
    public static function main()
    {
        include_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('PluginsTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function setUp()
    {
        $this->o = new plugins();
    }

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    *
    * @return null
    */
    protected function tearDown()
    {
        unset($this->o);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataRegisterFunction()
    {
        return array(
            array("name", "type", "title", "desc", array()),
            array("", "type", "title", "desc", array()),
            array(array(), "type", "title", "desc", array()),
            array(
                "pluginTestFunction1",
                null,
                "title",
                "desc",
                array(
                    "Functions" => array(
                        "ALL_TYPES" => array(
                            array(
                                    "Name" => "pluginTestFunction1",
                                    "Types" => null,
                                    "Title" => "title",
                                    "Description" => "desc",
                                ),
                            ),
                        ),
                    ),
                ),
            array(
                "pluginTestFunction1",
                "type",
                "title",
                "desc",
                array(
                    "Functions" => array(
                        "type" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Types" => "type",
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Name" => "pluginTestFunction1",
                    "Types" => "type",
                    "Title" => "title",
                    "Description" => "desc",
                ),
                "asdf",
                "fdsa",
                "hello there",
                array(
                    "Functions" => array(
                        "type" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Types" => "type",
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                "pluginTestFunction1",
                array("type1", "type2"),
                "title",
                "desc",
                array(
                    "Functions" => array(
                        "type1" => array(
                              array(
                                "Name" => "pluginTestFunction1",
                                "Types" => array("type1", "type2"),
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                        "type2" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Types" => array("type1", "type2"),
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param mixed  $Name   The name to test
    * @param string $Type   The type to test
    * @param string $Title  The title to test.
    * @param string $Desc   The description of the plugin.
    * @param int    $expect The expected value
    *
    * @return null
    *
    * @dataProvider dataRegisterFunction
    */
    public function testRegisterFunction($Name, $Type, $Title, $Desc, $expect)
    {
        $this->o->registerFunction($Name, $Type, $Title, $Desc);
        $this->assertSame($expect, $this->o->plugins);
    }


    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataRegisterFunctionRaw()
    {
        return array(
            array(array(), array()),
            array(
                array(
                    "Name" => "pluginTestFunction1",
                    "Types" => "type",
                    "Title" => "title",
                    "Description" => "desc",
                ),
                array(
                    "Functions" => array(
                        "type" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Types" => "type",
                                "Title" => "title",
                                "Description" => "desc",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                "This is not an array",
                array(),
            ),
        );
    }
    /**
    * test
    *
    * @param mixed $info   The name to test
    * @param int   $expect The expected value
    *
    * @return null
    *
    * @dataProvider dataRegisterFunctionRaw
    */
    public function testRegisterFunctionRaw($info, $expect)
    {
        $this->o->registerFunctionRaw($info);
        $this->assertSame($expect, $this->o->plugins);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataAddGeneric()
    {
        return array(
            array(
                "",
                "HTML",
                "type",
                array(),
            ),
            array(
                "name",
                "HTML",
                null,
                array(
                    "Generic" => array(
                        "ALL_TYPES" => array(
                            array(
                                "Name" => "name",
                                "HTML" => "HTML",
                                "Type" => "ALL_TYPES",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                "name",
                "HTML",
                "type",
                array(
                    "Generic" => array(
                        "type" => array(
                            array(
                                "Name" => "name",
                                "HTML" => "HTML",
                                "Type" => "type",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                array(
                    "Name" => "pluginTestFunction1",
                    "Type" => "type",
                    "Title" => "title",
                ),
                "asdf",
                "fdsa",
                array(
                    "Generic" => array(
                        "type" => array(
                            array(
                                "Name" => "pluginTestFunction1",
                                "Type" => "type",
                                "Title" => "title",
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param mixed  $Name   The name to test
    * @param string $HTML   The HTML to use.
    * @param string $Type   The type to test
    * @param int    $expect The expected value
    *
    * @return null
    *
    * @dataProvider dataAddGeneric
    */
    public function testAddGeneric($Name, $HTML, $Type, $expect)
    {
        $this->o->AddGeneric($Name, $HTML, $Type);
        $this->assertSame($expect, $this->o->plugins);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataGetGeneric()
    {
        $plugins = array(
            "Generic" => array(
                "type1" => array(
                    array(
                        "Name" => "name",
                        "HTML" => "HTML",
                        "Type" => "type1",
                    ),
                ),
                "type" => array(
                    array(
                        "Name"  => "zpluginTestFunction1",
                        "Type"  => "type",
                        "Title" => "title",
                    ),
                    array(
                        "Name" => "aname",
                        "HTML" => "HTML",
                        "Type" => "type",
                    ),
                ),
            ),
        );

        $plugins2 = $plugins;

        $plugins2["Generic"]["ALL_TYPES"] = array(
            array(
                "Name"    => "zName",
                "Type"    => "ALL_TYPES",
                "history" => "not relevent",
            ),
        );

        return array(
            array(
                "type",
                array("Generic" => array()),
                array(),
            ),
            array(
                "type1",
                $plugins,
                array(
                    array(
                        "Name" => "name",
                        "HTML" => "HTML",
                        "Type" => "type1",
                    ),
                ),
            ),
            array(
                "type",
                $plugins,
                array(
                    array(
                        "Name" => "zpluginTestFunction1",
                        "Type" => "type",
                        "Title" => "title",
                    ),
                    array(
                        "Name" => "aname",
                        "HTML" => "HTML",
                        "Type" => "type",
                    ),
                ),
            ),
            array(
                "type1",
                $plugins2,
                array(
                    array(
                        "Name" => "name",
                        "HTML" => "HTML",
                        "Type" => "type1",
                    ),
                    array(
                        "Name"    => "zName",
                        "Type"    => "ALL_TYPES",
                        "history" => "not relevent",
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $Type    The type to test
    * @param array  $preload The array to preload into $o->plugins
    * @param array  $expect  The expected value
    *
    * @return null
    *
    * @dataProvider dataGetGeneric
    */
    public function testGetGeneric($Type, $preload, $expect)
    {
        $preload          = (array)$preload;
        $this->o->plugins = $preload;
        $stuff            = $this->o->getGeneric($Type);
        $this->assertSame($expect, $stuff);
    }
    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataGetFunction()
    {
        $plugins = array(
            "Functions" => array(
                "type1" => array(
                    array(
                        "Name" => "aName",
                        "Types" => "type1",
                        "Title" => "title2",
                        "Description" => "description",
                    ),
                ),
                "type" => array(
                    array(
                        "Name"  => "zName",
                        "Type"  => "type",
                        "Title" => "title",
                        "Title" => "title3",
                        "Description" => "description2",
                    ),
                    array(
                        "Name" => "qName",
                        "Type" => "type",
                        "Title" => "title4",
                        "Description" => "description3",
                    ),
                ),
            ),
        );
        return array(
            array(
                "asdf",
                array("Functions" => array()),
                false,
            ),
            array(
                "asdf",
                array(),
                false,
            ),
            array(
                "asdf",
                array("Functions" => array("type" => 1.0)),
                false,
            ),
            array(
                "zName",
                $plugins,
                array(
                    "Name"  => "zName",
                    "Type"  => "type",
                    "Title" => "title",
                    "Title" => "title3",
                    "Description" => "description2",
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $Name    The name to test
    * @param array  $preload The array to preload into $o->plugins
    * @param array  $expect  The expected value
    *
    * @return null
    *
    * @dataProvider dataGetFunction
    */
    public function testGetFunction($Name, $preload, $expect)
    {
        $preload          = (array)$preload;
        $this->o->plugins = $preload;
        $stuff            = $this->o->getFunction($Name);
        $this->assertSame($expect, $stuff);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataGetFunctions()
    {
        $plugins = array(
            "Functions" => array(
                "type1" => array(
                    array(
                        "Name" => "aName",
                        "Types" => "type1",
                        "Title" => "title2",
                        "Description" => "description",
                    ),
                ),
                "type" => array(
                    array(
                        "Name"  => "zName",
                        "Type"  => "type",
                        "Title" => "title",
                        "Title" => "title3",
                        "Description" => "description2",
                    ),
                    array(
                        "Name" => "qName",
                        "Type" => "type",
                        "Title" => "title4",
                        "Description" => "description3",
                    ),
                ),
            ),
        );
        return array(
            array(
                "asdf",
                array("Functions" => array()),
                array(),
            ),
            array(
                "asdf",
                array(),
                array(),
            ),
            array(
                "asdf",
                array("Functions" => array("type" => 1.0)),
                array(),
            ),
            array(
                "type",
                $plugins,
                array(
                    array(
                        "Name"  => "zName",
                        "Type"  => "type",
                        "Title" => "title",
                        "Title" => "title3",
                        "Description" => "description2",
                    ),
                    array(
                        "Name" => "qName",
                        "Type" => "type",
                        "Title" => "title4",
                        "Description" => "description3",
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $Type    The type to test
    * @param array  $preload The array to preload into $o->plugins
    * @param array  $expect  The expected value
    *
    * @return null
    *
    * @dataProvider dataGetFunctions
    */
    public function testGetFunctions($Type, $preload, $expect)
    {
        $preload          = (array)$preload;
        $this->o->plugins = $preload;
        $stuff            = $this->o->getFunctions($Type);
        $this->assertSame($expect, $stuff);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataRunFunction()
    {
        $plugins = array(
            "Functions" => array(
                "type1" => array(
                    array(
                        "Name"        => "pluginTestFunction1",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                    ),
                ),
                "type" => array(
                    array(
                        "Name"  => "zName",
                        "Type"  => "type",
                        "Title" => "title",
                        "Title" => "title3",
                        "Description" => "description2",
                    ),
                    array(
                        "Name"        => "pluginTestFunction2",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                        "INFO"        => true,
                    ),
                ),
            ),
        );
        return array(
            array(
                "asdf",
                array(),
                array("Functions" => array()),
                null,
            ),
            array(
                "zName",
                $plugins,
                array(),
                null,
            ),
            array(
                "asdf",
                array(),
                array("Functions" => array("type" => 1.0)),
                null,
            ),
            array(
                "pluginTestFunction1",
                array(1,2,3,4),
                $plugins,
                array(1,2,3,4),
            ),
        );
    }
    /**
    * test
    *
    * @param string $name    The name of the function to call
    * @param array  $args    The argument array.
    * @param array  $preload The array to preload into $o->plugins
    * @param array  $expect  The expected value
    *
    * @return null
    *
    * @dataProvider dataRunFunction
    */
    public function testRunFunction($name, $args, $preload, $expect)
    {
        unset($_SESSION["pluginTestFunction"]);
        $preload          = (array)$preload;
        $args             = (array)$args;
        $this->o->plugins = $preload;
        $function         = array($this->o, "runFunction");
        array_unshift($args, $name);  // Put the name as the first element
        call_user_func_array($function, $args);
        $this->assertSame($expect, $_SESSION["pluginTestFunction"][$name]);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataRunFunctions()
    {
        $plugins = array(
            "Functions" => array(
                "type1" => array(
                    array(
                        "Name"        => "pluginTestFunction1",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                    ),
                    array(
                        "Name"        => "pluginTestFunction2",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                    ),
                ),
                "type" => array(
                    array(
                        "Name"  => "zName",
                        "Type"  => "type",
                        "Title" => "title",
                        "Title" => "title3",
                        "Description" => "description2",
                    ),
                    array(
                        "Name"        => "pluginTestFunction2",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                        "INFO"        => true,
                    ),
                ),
            ),
        );
        return array(
            array(
                "asdf",
                array(),
                array("Functions" => array()),
                null,
            ),
            array(
                "zName",
                $plugins,
                array(),
                null,
            ),
            array(
                "asdf",
                array(),
                array("Functions" => array("type" => 1.0)),
                null,
            ),
            array(
                "type1",
                array(1,2,3,4),
                $plugins,
                array(
                    "pluginTestFunction1" => array(1,2,3,4),
                    "pluginTestFunction2" => array(4,3,2,1),
                ),
            ),
            array(
                "type",
                array(1,2,3,4),
                $plugins,
                array(
                    "pluginTestFunction2" => array(4,3,2,1),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $type    The type of the functions to call
    * @param array  $args    The argument array.
    * @param array  $preload The array to preload into $o->plugins
    * @param array  $expect  The expected value
    *
    * @return null
    *
    * @dataProvider dataRunFunctions
    */
    public function testRunFunctions($type, $args, $preload, $expect)
    {
        unset($_SESSION["pluginTestFunction"]); // Clear previous runs
        $preload          = (array)$preload;
        $args             = (array)$args;
        $this->o->plugins = $preload;
        $function         = array($this->o, "runFunctions");
        array_unshift($args, $type);  // Put the name as the first element
        call_user_func_array($function, $args);
        $this->assertEquals($expect, $_SESSION["pluginTestFunction"]);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataRunFilter()
    {
        $plugins = array(
            "Functions" => array(
                "type1" => array(
                    array(
                        "Name"        => "pluginTestFilter1",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                    ),
                    array(
                        "Name"        => "pluginTestFilter2",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                    ),
                ),
                "type" => array(
                    array(
                        "Name"  => "zName",
                        "Type"  => "type",
                        "Title" => "title",
                        "Title" => "title3",
                        "Description" => "description2",
                    ),
                    array(
                        "Name"        => "pluginTestFilter2",
                        "Types"       => "type1",
                        "Title"       => "title2",
                        "Description" => "description",
                        "INFO"        => true,
                    ),
                ),
            ),
        );
        return array(
            array(
                array(),
                "asdf",
                array(),
                array("Functions" => array()),
                null,
            ),
            array(
                array(),
                "zName",
                $plugins,
                array(),
                null,
            ),
            array(
                array(),
                "asdf",
                array(),
                array("Functions" => array("type" => 1.0)),
                null,
            ),
            array(
                "Hello",
                "type1",
                array(1,2,3,4),
                $plugins,
                array(
                    "pluginTestFilter1" => array("Hello",1,2,3,4,"arg" => "Hello"),
                    "pluginTestFilter2" => array(4,3,2,1, "Hello", "arg" => "Hello"),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param mixed  $argument The argument to filter
    * @param string $type     The type of the functions to call
    * @param array  $args     The argument array.
    * @param array  $preload  The array to preload into $o->plugins
    * @param array  $expect   The expected value
    *
    * @return null
    *
    * @dataProvider dataRunFilter
    */
    public function testRunFilter($argument, $type, $args, $preload, $expect)
    {
        unset($_SESSION["pluginTestFilter"]); // Clear previous runs
        $preload          = (array)$preload;
        $args             = (array)$args;
        $this->o->plugins = $preload;
        $function         = array($this->o, "runFilter");
        array_unshift($args, $type);  // Put the name as the first element
        array_unshift($args, $argument);  // Put the name as the first element
        call_user_func_array($function, $args);
        $this->assertEquals($expect, $_SESSION["pluginTestFilter"]);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataComparePlugins()
    {
        return array(
            array(
                array("Name" => "a"),
                array("Name" => "b"),
                -1,
            ),
            array(
                array("Name" => "b"),
                array("Name" => "a"),
                1,
            ),
            array(
                array("Name" => "a"),
                array("Name" => "a"),
                0,
            ),
            array(
                array(),
                array(),
                0,
            ),
            array(
                null,
                null,
                0,
            ),
        );
    }
    /**
    * test
    *
    * @param mixed $a      The first name
    * @param array $b      The second name
    * @param array $expect The expected value
    *
    * @return null
    *
    * @dataProvider dataComparePlugins
    */
    public function testComparePlugins($a, $b, $expect)
    {
        $ret = $this->o->comparePlugins($a, $b);
        $this->assertEquals($expect, $ret);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataConstructor()
    {
        return array(
            array(
                "a", "b", "c", array("d"), 4,
                "dir",
                "a",
            ),
            array(
                "a", "b", "c", array("d"), 4,
                "extension",
                "b",
            ),
            array(
                "a", "b", "c", array("d"), 4,
                "webdir",
                "c",
            ),
            array(
                "a", "b", "c", array("d"), 4,
                "_skipDir",
                array("d"),
            ),
            array(
                "a", "b", "c", "d", 4,
                "verbose",
                4,
            ),
            array(
                "", "", "", "d", "Not an Integer",
                "dir",
                "./plugins/",
            ),
            array(
                "", "", "", "d", "Not an Integer",
                "extension",
                ".plugin.php",
            ),
            array(
                "", "", "", "d", "Not an Integer",
                "webdir",
                "plugins/",
            ),
            array(
                "", "", "", "d", "Not an Integer",
                "_skipDir",
                array(),
            ),
            array(
                "", "", "", "d", "Not an Integer",
                "verbose",
                0,
            ),
        );
    }
    /**
    * test
    *
    * @param string $basedir   the directory to look for Plugins in.  Sets this->dir
    * @param string $extension the file extension to look for.  Sets this->extension
    * @param string $webdir    the directory that it will be in on the web site.
    * @param array  $skipDir   Array of Strings Directories to not look into for
    *                          plugins.
    * @param int    $verbose   The verbosity level
    * @param string $attribute The attribute to check
    * @param array  $expect    The expected value
    *
    * @return null
    *
    * @dataProvider dataConstructor
    */
    public function testConstructor(
        $basedir,
        $extension,
        $webdir,
        $skipDir,
        $verbose,
        $attribute,
        $expect
    ) {
        $o = new plugins($basedir, $extension, $webdir, $skipDir, $verbose);
        $this->assertAttributeEquals($expect, $attribute, $o);
    }

    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataIncludeFile()
    {
        return array(
            array(
                "Bad File",
                "Bad Directory",
                "Nothing Here",
                array(),
            ),
            array(
                "testPlugin.inc.php",
                dirname(__FILE__)."/plugins/",
                "Nothing Here",
                array(
                    "Functions" => array(
                        "filter" => array(
                            0 => array(
                                "Name" => "pluginTestPlugin1",
                                "Types" => "filter",
                                "Title" => "messy",
                                "Description" => "messier",
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param string $file    The full or relative path to the file to be included.
    * @param string $filedir The filesystem directory where the files are located.
    * @param string $webdir  The web directory where they are located (the path
    *     relative to DOCUMENT_ROOT)
    * @param array  $expect  The expected value
    *
    * @return null
    *
    * @dataProvider dataIncludeFile
    */
    public function testIncludeFile(
        $file,
        $filedir,
        $webdir,
        $expect
    ) {
        $this->o->includeFile($file, $filedir, $webdir);
        $this->assertAttributeEquals($expect, "plugins", $this->o);
    }


    /**
    * data provider for testConstructor
    *
    * @return array
    *
    * @static
    */
    public static function dataGetPluginDir()
    {
        return array(
            array(
                dirname(__FILE__)."/plugins/",
                "inc.php",
                "plugins/",
                0,
                true,
                array(
                    "Functions" => array(
                        "filter" => array(
                            array(
                                "Name"        => "pluginTestPlugin2",
                                "Types"       => "filter",
                                "Title"       => "clean",
                                "Description" => "cleaner",
                            ),
                            array(
                                "Name"        => "pluginTestPlugin1",
                                "Types"       => "filter",
                                "Title"       => "messy",
                                "Description" => "messier",
                            ),
                        ),
                    ),
                ),
            ),
            array(
                dirname(__FILE__)."/plugins/",
                "inc.php",
                "plugins/",
                0,
                false,
                array(
                    "Functions" => array(
                        "filter" => array(
                            array(
                                "Name"        => "pluginTestPlugin1",
                                "Types"       => "filter",
                                "Title"       => "messy",
                                "Description" => "messier",
                            ),
                        ),
                    ),
                ),
            ),
        );
    }
    /**
    * test
    *
    * @param mixed  $basedir   The base directory to scan plugins in
    * @param array  $extension The file extension
    * @param string $webdir    The base directory on the web
    * @param int    $level     The level we are currently at
    * @param bool   $recursive Whether or not to recurse through the directories
    * @param array  $expect    The expected plugin array
    *
    * @return null
    *
    * @dataProvider dataGetPluginDir()
    */
    public function testGetPluginDir(
        $basedir,
        $extension,
        $webdir,
        $level,
        $recursive,
        $expect
    ) {
        $this->o->extension = $extension;
        $this->o->getPluginDir($basedir, $webdir, $level, $recursive);
        $this->assertEquals($expect, $this->o->plugins);
    }

}

/**
* data provider for testConstructor
*
* @return mixed Returns $stuff.
*/
function pluginTestFunction1()
{
    $_SESSION["pluginTestFunction"]["pluginTestFunction1"] = func_get_args();
    return func_get_args();
}
/**
* data provider for testConstructor
*
* @return mixed Returns $stuff.
*/
function pluginTestFunction2()
{
    $args = func_get_args();
    if (is_array($args)) {
        $args = array_reverse($args);
    }
    $_SESSION["pluginTestFunction"]["pluginTestFunction2"] = $args;
    return func_get_args();
}

/**
* data provider for testConstructor
*
* @param mixed $argument The argument to filter
*
* @return mixed Returns $stuff.
*/
function pluginTestFilter1($argument)
{
    $_SESSION["pluginTestFilter"]["pluginTestFilter1"]        = func_get_args();
    $_SESSION["pluginTestFilter"]["pluginTestFilter1"]["arg"] = $argument;
    return $argument;
}
/**
* data provider for testConstructor
*
* @param mixed $argument The argument to filter
*
* @return mixed Returns $stuff.
*/
function pluginTestFilter2($argument)
{
    $args = func_get_args();
    if (is_array($args)) {
        $args = array_reverse($args);
    }
    $_SESSION["pluginTestFilter"]["pluginTestFilter2"]        = $args;
    $_SESSION["pluginTestFilter"]["pluginTestFilter2"]["arg"] = $argument;

    return $argument;
}

?>
